//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace docreminder.InfoShareService {
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogonResultContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LogonResultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConnectionTimeoutSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsApplicationLicenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConcurrentLicenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNamedLicenceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionId {
            get {
                return this.ConnectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionIdField, value) != true)) {
                    this.ConnectionIdField = value;
                    this.RaisePropertyChanged("ConnectionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectionTimeoutSeconds {
            get {
                return this.ConnectionTimeoutSecondsField;
            }
            set {
                if ((this.ConnectionTimeoutSecondsField.Equals(value) != true)) {
                    this.ConnectionTimeoutSecondsField = value;
                    this.RaisePropertyChanged("ConnectionTimeoutSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsApplicationLicence {
            get {
                return this.IsApplicationLicenceField;
            }
            set {
                if ((this.IsApplicationLicenceField.Equals(value) != true)) {
                    this.IsApplicationLicenceField = value;
                    this.RaisePropertyChanged("IsApplicationLicence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcurrentLicence {
            get {
                return this.IsConcurrentLicenceField;
            }
            set {
                if ((this.IsConcurrentLicenceField.Equals(value) != true)) {
                    this.IsConcurrentLicenceField = value;
                    this.RaisePropertyChanged("IsConcurrentLicence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNamedLicence {
            get {
                return this.IsNamedLicenceField;
            }
            set {
                if ((this.IsNamedLicenceField.Equals(value) != true)) {
                    this.IsNamedLicenceField = value;
                    this.RaisePropertyChanged("IsNamedLicence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
    [System.SerializableAttribute()]
    public partial class ServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorNumber {
            get {
                return this.ErrorNumberField;
            }
            set {
                if ((this.ErrorNumberField.Equals(value) != true)) {
                    this.ErrorNumberField = value;
                    this.RaisePropertyChanged("ErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchDefinitionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchDefinitionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SearchConditionContract[] ConditionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FulltextWordRelationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FulltextWordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SearchStoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseWildCardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SearchConditionContract[] Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FulltextWordRelation {
            get {
                return this.FulltextWordRelationField;
            }
            set {
                if ((object.ReferenceEquals(this.FulltextWordRelationField, value) != true)) {
                    this.FulltextWordRelationField = value;
                    this.RaisePropertyChanged("FulltextWordRelation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FulltextWords {
            get {
                return this.FulltextWordsField;
            }
            set {
                if ((object.ReferenceEquals(this.FulltextWordsField, value) != true)) {
                    this.FulltextWordsField = value;
                    this.RaisePropertyChanged("FulltextWords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SearchStores {
            get {
                return this.SearchStoresField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchStoresField, value) != true)) {
                    this.SearchStoresField = value;
                    this.RaisePropertyChanged("SearchStores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseWildCard {
            get {
                return this.UseWildCardField;
            }
            set {
                if ((this.UseWildCardField.Equals(value) != true)) {
                    this.UseWildCardField = value;
                    this.RaisePropertyChanged("UseWildCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchConditionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchConditionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComparisonEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceHolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelationEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComparisonEnum {
            get {
                return this.ComparisonEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ComparisonEnumField, value) != true)) {
                    this.ComparisonEnumField = value;
                    this.RaisePropertyChanged("ComparisonEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaceHolder {
            get {
                return this.PlaceHolderField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceHolderField, value) != true)) {
                    this.PlaceHolderField = value;
                    this.RaisePropertyChanged("PlaceHolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelationEnum {
            get {
                return this.RelationEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationEnumField, value) != true)) {
                    this.RelationEnumField = value;
                    this.RaisePropertyChanged("RelationEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResultContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchResultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.DocumentSimpleContract[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasMoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ProcessSimpleContract[] ProcessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResumePointField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.DocumentSimpleContract[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasMore {
            get {
                return this.HasMoreField;
            }
            set {
                if ((this.HasMoreField.Equals(value) != true)) {
                    this.HasMoreField = value;
                    this.RaisePropertyChanged("HasMore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ProcessSimpleContract[] Processes {
            get {
                return this.ProcessesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessesField, value) != true)) {
                    this.ProcessesField = value;
                    this.RaisePropertyChanged("Processes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResumePoint {
            get {
                return this.ResumePointField;
            }
            set {
                if ((object.ReferenceEquals(this.ResumePointField, value) != true)) {
                    this.ResumePointField = value;
                    this.RaisePropertyChanged("ResumePoint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentSimpleContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentSimpleContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckOutStateEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderElementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasAnnotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasBlogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasSignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasTempAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckOutStateEnum {
            get {
                return this.CheckOutStateEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckOutStateEnumField, value) != true)) {
                    this.CheckOutStateEnumField = value;
                    this.RaisePropertyChanged("CheckOutStateEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderElementId {
            get {
                return this.FolderElementIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderElementIdField, value) != true)) {
                    this.FolderElementIdField = value;
                    this.RaisePropertyChanged("FolderElementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAnnotation {
            get {
                return this.HasAnnotationField;
            }
            set {
                if ((this.HasAnnotationField.Equals(value) != true)) {
                    this.HasAnnotationField = value;
                    this.RaisePropertyChanged("HasAnnotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasBlog {
            get {
                return this.HasBlogField;
            }
            set {
                if ((this.HasBlogField.Equals(value) != true)) {
                    this.HasBlogField = value;
                    this.RaisePropertyChanged("HasBlog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasLinks {
            get {
                return this.HasLinksField;
            }
            set {
                if ((this.HasLinksField.Equals(value) != true)) {
                    this.HasLinksField = value;
                    this.RaisePropertyChanged("HasLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSignature {
            get {
                return this.HasSignatureField;
            }
            set {
                if ((this.HasSignatureField.Equals(value) != true)) {
                    this.HasSignatureField = value;
                    this.RaisePropertyChanged("HasSignature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasTempAccess {
            get {
                return this.HasTempAccessField;
            }
            set {
                if ((this.HasTempAccessField.Equals(value) != true)) {
                    this.HasTempAccessField = value;
                    this.RaisePropertyChanged("HasTempAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessSimpleContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProcessSimpleContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderElementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.DueDateField, value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderElementId {
            get {
                return this.FolderElementIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderElementIdField, value) != true)) {
                    this.FolderElementIdField = value;
                    this.RaisePropertyChanged("FolderElementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasLinks {
            get {
                return this.HasLinksField;
            }
            set {
                if ((this.HasLinksField.Equals(value) != true)) {
                    this.HasLinksField = value;
                    this.RaisePropertyChanged("HasLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityEnum {
            get {
                return this.PriorityEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityEnumField, value) != true)) {
                    this.PriorityEnumField = value;
                    this.RaisePropertyChanged("PriorityEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusEnum {
            get {
                return this.StatusEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusEnumField, value) != true)) {
                    this.StatusEnumField = value;
                    this.RaisePropertyChanged("StatusEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringGlobalContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StringGlobalContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalEntry[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalEntry[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringGlobalEntry", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StringGlobalEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResultIdsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchResultIdsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasMoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResumePointField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasMore {
            get {
                return this.HasMoreField;
            }
            set {
                if ((this.HasMoreField.Equals(value) != true)) {
                    this.HasMoreField = value;
                    this.RaisePropertyChanged("HasMore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Ids {
            get {
                return this.IdsField;
            }
            set {
                if ((object.ReferenceEquals(this.IdsField, value) != true)) {
                    this.IdsField = value;
                    this.RaisePropertyChanged("Ids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResumePoint {
            get {
                return this.ResumePointField;
            }
            set {
                if ((object.ReferenceEquals(this.ResumePointField, value) != true)) {
                    this.ResumePointField = value;
                    this.RaisePropertyChanged("ResumePoint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoStoreContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class InfoStoreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.InfoStoreConfigurationContract ConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.InfoStoreConfigurationContract Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoStoreConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class InfoStoreConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessLogEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AutoSuggestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] BlobStoreIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] BlobStoreProviderIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BuildThumbnailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBCompressionEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EncryptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileCompressionEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FulltextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FulltextWithPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IntegrityTestOnReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IntegrityTestOnWriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThumbnailBlobStoreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThumbnailBlobStoreProviderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ThumbnailSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersioningEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessLogEnum {
            get {
                return this.AccessLogEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessLogEnumField, value) != true)) {
                    this.AccessLogEnumField = value;
                    this.RaisePropertyChanged("AccessLogEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoSuggest {
            get {
                return this.AutoSuggestField;
            }
            set {
                if ((this.AutoSuggestField.Equals(value) != true)) {
                    this.AutoSuggestField = value;
                    this.RaisePropertyChanged("AutoSuggest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BlobStoreIds {
            get {
                return this.BlobStoreIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobStoreIdsField, value) != true)) {
                    this.BlobStoreIdsField = value;
                    this.RaisePropertyChanged("BlobStoreIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BlobStoreProviderIds {
            get {
                return this.BlobStoreProviderIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobStoreProviderIdsField, value) != true)) {
                    this.BlobStoreProviderIdsField = value;
                    this.RaisePropertyChanged("BlobStoreProviderIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BuildThumbnails {
            get {
                return this.BuildThumbnailsField;
            }
            set {
                if ((this.BuildThumbnailsField.Equals(value) != true)) {
                    this.BuildThumbnailsField = value;
                    this.RaisePropertyChanged("BuildThumbnails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBCompressionEnum {
            get {
                return this.DBCompressionEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.DBCompressionEnumField, value) != true)) {
                    this.DBCompressionEnumField = value;
                    this.RaisePropertyChanged("DBCompressionEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Encrypted {
            get {
                return this.EncryptedField;
            }
            set {
                if ((this.EncryptedField.Equals(value) != true)) {
                    this.EncryptedField = value;
                    this.RaisePropertyChanged("Encrypted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileCompressionEnum {
            get {
                return this.FileCompressionEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.FileCompressionEnumField, value) != true)) {
                    this.FileCompressionEnumField = value;
                    this.RaisePropertyChanged("FileCompressionEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Fulltext {
            get {
                return this.FulltextField;
            }
            set {
                if ((this.FulltextField.Equals(value) != true)) {
                    this.FulltextField = value;
                    this.RaisePropertyChanged("Fulltext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FulltextWithProperties {
            get {
                return this.FulltextWithPropertiesField;
            }
            set {
                if ((this.FulltextWithPropertiesField.Equals(value) != true)) {
                    this.FulltextWithPropertiesField = value;
                    this.RaisePropertyChanged("FulltextWithProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IntegrityTestOnRead {
            get {
                return this.IntegrityTestOnReadField;
            }
            set {
                if ((this.IntegrityTestOnReadField.Equals(value) != true)) {
                    this.IntegrityTestOnReadField = value;
                    this.RaisePropertyChanged("IntegrityTestOnRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IntegrityTestOnWrite {
            get {
                return this.IntegrityTestOnWriteField;
            }
            set {
                if ((this.IntegrityTestOnWriteField.Equals(value) != true)) {
                    this.IntegrityTestOnWriteField = value;
                    this.RaisePropertyChanged("IntegrityTestOnWrite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThumbnailBlobStoreId {
            get {
                return this.ThumbnailBlobStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailBlobStoreIdField, value) != true)) {
                    this.ThumbnailBlobStoreIdField = value;
                    this.RaisePropertyChanged("ThumbnailBlobStoreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThumbnailBlobStoreProviderId {
            get {
                return this.ThumbnailBlobStoreProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailBlobStoreProviderIdField, value) != true)) {
                    this.ThumbnailBlobStoreProviderIdField = value;
                    this.RaisePropertyChanged("ThumbnailBlobStoreProviderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ThumbnailSize {
            get {
                return this.ThumbnailSizeField;
            }
            set {
                if ((this.ThumbnailSizeField.Equals(value) != true)) {
                    this.ThumbnailSizeField = value;
                    this.RaisePropertyChanged("ThumbnailSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersioningEnum {
            get {
                return this.VersioningEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.VersioningEnumField, value) != true)) {
                    this.VersioningEnumField = value;
                    this.RaisePropertyChanged("VersioningEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaStoreContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SchemaStoreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbonnementMailTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.GlobalImportSettingsContract GlobalImportSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ImportTemplateContract[] ImportTemplatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LanguageCodeContract[] LanguageCodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LifeCycleStateContract[] LifeCycleStatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LifeCycleStartContract[] LifeCyclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.MailTemplateContract[] MailTemplatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ProcessSettingsContract ProcessSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ProcessTemplateContract[] ProcessTemplatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyFillerPluginContract[] PropertyFillerPluginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyFillerContract[] PropertyFillersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyPageTemplateContract[] PropertyPageTemplatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyTypeCategoryContract[] PropertyTypeCategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyTypeContract[] PropertyTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SearchSettingsContract SearchSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SigningProfileContract[] SigningProfilesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AbonnementMailTemplateId {
            get {
                return this.AbonnementMailTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AbonnementMailTemplateIdField, value) != true)) {
                    this.AbonnementMailTemplateIdField = value;
                    this.RaisePropertyChanged("AbonnementMailTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.GlobalImportSettingsContract GlobalImportSettings {
            get {
                return this.GlobalImportSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.GlobalImportSettingsField, value) != true)) {
                    this.GlobalImportSettingsField = value;
                    this.RaisePropertyChanged("GlobalImportSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ImportTemplateContract[] ImportTemplates {
            get {
                return this.ImportTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplatesField, value) != true)) {
                    this.ImportTemplatesField = value;
                    this.RaisePropertyChanged("ImportTemplates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LanguageCodeContract[] LanguageCodes {
            get {
                return this.LanguageCodesField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageCodesField, value) != true)) {
                    this.LanguageCodesField = value;
                    this.RaisePropertyChanged("LanguageCodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LifeCycleStateContract[] LifeCycleStates {
            get {
                return this.LifeCycleStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleStatesField, value) != true)) {
                    this.LifeCycleStatesField = value;
                    this.RaisePropertyChanged("LifeCycleStates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LifeCycleStartContract[] LifeCycles {
            get {
                return this.LifeCyclesField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCyclesField, value) != true)) {
                    this.LifeCyclesField = value;
                    this.RaisePropertyChanged("LifeCycles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.MailTemplateContract[] MailTemplates {
            get {
                return this.MailTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.MailTemplatesField, value) != true)) {
                    this.MailTemplatesField = value;
                    this.RaisePropertyChanged("MailTemplates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ProcessSettingsContract ProcessSettings {
            get {
                return this.ProcessSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessSettingsField, value) != true)) {
                    this.ProcessSettingsField = value;
                    this.RaisePropertyChanged("ProcessSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ProcessTemplateContract[] ProcessTemplates {
            get {
                return this.ProcessTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTemplatesField, value) != true)) {
                    this.ProcessTemplatesField = value;
                    this.RaisePropertyChanged("ProcessTemplates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyFillerPluginContract[] PropertyFillerPlugins {
            get {
                return this.PropertyFillerPluginsField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyFillerPluginsField, value) != true)) {
                    this.PropertyFillerPluginsField = value;
                    this.RaisePropertyChanged("PropertyFillerPlugins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyFillerContract[] PropertyFillers {
            get {
                return this.PropertyFillersField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyFillersField, value) != true)) {
                    this.PropertyFillersField = value;
                    this.RaisePropertyChanged("PropertyFillers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyPageTemplateContract[] PropertyPageTemplates {
            get {
                return this.PropertyPageTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyPageTemplatesField, value) != true)) {
                    this.PropertyPageTemplatesField = value;
                    this.RaisePropertyChanged("PropertyPageTemplates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyTypeCategoryContract[] PropertyTypeCategories {
            get {
                return this.PropertyTypeCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeCategoriesField, value) != true)) {
                    this.PropertyTypeCategoriesField = value;
                    this.RaisePropertyChanged("PropertyTypeCategories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyTypeContract[] PropertyTypes {
            get {
                return this.PropertyTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypesField, value) != true)) {
                    this.PropertyTypesField = value;
                    this.RaisePropertyChanged("PropertyTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SearchSettingsContract SearchSettings {
            get {
                return this.SearchSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchSettingsField, value) != true)) {
                    this.SearchSettingsField = value;
                    this.RaisePropertyChanged("SearchSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SigningProfileContract[] SigningProfiles {
            get {
                return this.SigningProfilesField;
            }
            set {
                if ((object.ReferenceEquals(this.SigningProfilesField, value) != true)) {
                    this.SigningProfilesField = value;
                    this.RaisePropertyChanged("SigningProfiles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GlobalImportSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class GlobalImportSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ImportTemplateRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NeedsClientSideSigningField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ImportTemplateRequired {
            get {
                return this.ImportTemplateRequiredField;
            }
            set {
                if ((this.ImportTemplateRequiredField.Equals(value) != true)) {
                    this.ImportTemplateRequiredField = value;
                    this.RaisePropertyChanged("ImportTemplateRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NeedsClientSideSigning {
            get {
                return this.NeedsClientSideSigningField;
            }
            set {
                if ((this.NeedsClientSideSigningField.Equals(value) != true)) {
                    this.NeedsClientSideSigningField = value;
                    this.RaisePropertyChanged("NeedsClientSideSigning");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProcessSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EscalationMailTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EscalationManagerTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailTemplateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EscalationMailTemplateId {
            get {
                return this.EscalationMailTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalationMailTemplateIdField, value) != true)) {
                    this.EscalationMailTemplateIdField = value;
                    this.RaisePropertyChanged("EscalationMailTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EscalationManagerTime {
            get {
                return this.EscalationManagerTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalationManagerTimeField, value) != true)) {
                    this.EscalationManagerTimeField = value;
                    this.RaisePropertyChanged("EscalationManagerTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MailTemplateId {
            get {
                return this.MailTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MailTemplateIdField, value) != true)) {
                    this.MailTemplateIdField = value;
                    this.RaisePropertyChanged("MailTemplateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CopySearchCriterionValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CopySearchCriterionValues {
            get {
                return this.CopySearchCriterionValuesField;
            }
            set {
                if ((this.CopySearchCriterionValuesField.Equals(value) != true)) {
                    this.CopySearchCriterionValuesField = value;
                    this.RaisePropertyChanged("CopySearchCriterionValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ImportTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeFoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeInfoStoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeLifeCycleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeProcessTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangePropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeProtectionDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeSignatureProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteFileAfterImportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoStoreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LifeCycleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyPageTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureProfileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StartProcessAfterImportField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeFolders {
            get {
                return this.CanChangeFoldersField;
            }
            set {
                if ((this.CanChangeFoldersField.Equals(value) != true)) {
                    this.CanChangeFoldersField = value;
                    this.RaisePropertyChanged("CanChangeFolders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeInfoStore {
            get {
                return this.CanChangeInfoStoreField;
            }
            set {
                if ((this.CanChangeInfoStoreField.Equals(value) != true)) {
                    this.CanChangeInfoStoreField = value;
                    this.RaisePropertyChanged("CanChangeInfoStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeLifeCycle {
            get {
                return this.CanChangeLifeCycleField;
            }
            set {
                if ((this.CanChangeLifeCycleField.Equals(value) != true)) {
                    this.CanChangeLifeCycleField = value;
                    this.RaisePropertyChanged("CanChangeLifeCycle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeLinks {
            get {
                return this.CanChangeLinksField;
            }
            set {
                if ((this.CanChangeLinksField.Equals(value) != true)) {
                    this.CanChangeLinksField = value;
                    this.RaisePropertyChanged("CanChangeLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeProcessTemplate {
            get {
                return this.CanChangeProcessTemplateField;
            }
            set {
                if ((this.CanChangeProcessTemplateField.Equals(value) != true)) {
                    this.CanChangeProcessTemplateField = value;
                    this.RaisePropertyChanged("CanChangeProcessTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeProperties {
            get {
                return this.CanChangePropertiesField;
            }
            set {
                if ((this.CanChangePropertiesField.Equals(value) != true)) {
                    this.CanChangePropertiesField = value;
                    this.RaisePropertyChanged("CanChangeProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeProtectionDomain {
            get {
                return this.CanChangeProtectionDomainField;
            }
            set {
                if ((this.CanChangeProtectionDomainField.Equals(value) != true)) {
                    this.CanChangeProtectionDomainField = value;
                    this.RaisePropertyChanged("CanChangeProtectionDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeSignatureProfile {
            get {
                return this.CanChangeSignatureProfileField;
            }
            set {
                if ((this.CanChangeSignatureProfileField.Equals(value) != true)) {
                    this.CanChangeSignatureProfileField = value;
                    this.RaisePropertyChanged("CanChangeSignatureProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteFileAfterImport {
            get {
                return this.DeleteFileAfterImportField;
            }
            set {
                if ((this.DeleteFileAfterImportField.Equals(value) != true)) {
                    this.DeleteFileAfterImportField = value;
                    this.RaisePropertyChanged("DeleteFileAfterImport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoStoreId {
            get {
                return this.InfoStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoStoreIdField, value) != true)) {
                    this.InfoStoreIdField = value;
                    this.RaisePropertyChanged("InfoStoreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LifeCycleId {
            get {
                return this.LifeCycleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleIdField, value) != true)) {
                    this.LifeCycleIdField = value;
                    this.RaisePropertyChanged("LifeCycleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessTemplateId {
            get {
                return this.ProcessTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTemplateIdField, value) != true)) {
                    this.ProcessTemplateIdField = value;
                    this.RaisePropertyChanged("ProcessTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyPageTemplateId {
            get {
                return this.PropertyPageTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyPageTemplateIdField, value) != true)) {
                    this.PropertyPageTemplateIdField = value;
                    this.RaisePropertyChanged("PropertyPageTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignatureProfileId {
            get {
                return this.SignatureProfileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureProfileIdField, value) != true)) {
                    this.SignatureProfileIdField = value;
                    this.RaisePropertyChanged("SignatureProfileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StartProcessAfterImport {
            get {
                return this.StartProcessAfterImportField;
            }
            set {
                if ((this.StartProcessAfterImportField.Equals(value) != true)) {
                    this.StartProcessAfterImportField = value;
                    this.RaisePropertyChanged("StartProcessAfterImport");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LanguageCodeContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LanguageCodeContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LifeCycleStateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LifeCycleStateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LifeCycleStateProtectionContract[] LifeCycleProtectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] NextAllowedLifeCycleStateIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextAutomaticLifeCycleStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextCheckOutLifeCycleStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextInfoStoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LifeCycleStateProtectionContract[] LifeCycleProtections {
            get {
                return this.LifeCycleProtectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleProtectionsField, value) != true)) {
                    this.LifeCycleProtectionsField = value;
                    this.RaisePropertyChanged("LifeCycleProtections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] NextAllowedLifeCycleStateIds {
            get {
                return this.NextAllowedLifeCycleStateIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.NextAllowedLifeCycleStateIdsField, value) != true)) {
                    this.NextAllowedLifeCycleStateIdsField = value;
                    this.RaisePropertyChanged("NextAllowedLifeCycleStateIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextAutomaticLifeCycleStateId {
            get {
                return this.NextAutomaticLifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextAutomaticLifeCycleStateIdField, value) != true)) {
                    this.NextAutomaticLifeCycleStateIdField = value;
                    this.RaisePropertyChanged("NextAutomaticLifeCycleStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextCheckOutLifeCycleStateId {
            get {
                return this.NextCheckOutLifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextCheckOutLifeCycleStateIdField, value) != true)) {
                    this.NextCheckOutLifeCycleStateIdField = value;
                    this.RaisePropertyChanged("NextCheckOutLifeCycleStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextInfoStoreId {
            get {
                return this.NextInfoStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextInfoStoreIdField, value) != true)) {
                    this.NextInfoStoreIdField = value;
                    this.RaisePropertyChanged("NextInfoStoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LifeCycleStartContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LifeCycleStartContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartLifeCycleStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartLifeCycleStateId {
            get {
                return this.StartLifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StartLifeCycleStateIdField, value) != true)) {
                    this.StartLifeCycleStateIdField = value;
                    this.RaisePropertyChanged("StartLifeCycleStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class MailTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddLinkAsAttachmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BodyIsHtmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddLinkAsAttachment {
            get {
                return this.AddLinkAsAttachmentField;
            }
            set {
                if ((this.AddLinkAsAttachmentField.Equals(value) != true)) {
                    this.AddLinkAsAttachmentField = value;
                    this.RaisePropertyChanged("AddLinkAsAttachment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BodyIsHtml {
            get {
                return this.BodyIsHtmlField;
            }
            set {
                if ((this.BodyIsHtmlField.Equals(value) != true)) {
                    this.BodyIsHtmlField = value;
                    this.RaisePropertyChanged("BodyIsHtml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProcessTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddProcessPropertiesToDocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AssignToCreatorAfterCompletionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AssumeDocumentPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.CustomPropertyContract[] CustomPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DiagrammField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DueDateDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowCommentWindowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskTemplateConditionContract[] TaskTemplateConditionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskTemplateWebServiceContract[] TaskTemplateWebServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskTemplateContract[] TaskTemplatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddProcessPropertiesToDocument {
            get {
                return this.AddProcessPropertiesToDocumentField;
            }
            set {
                if ((this.AddProcessPropertiesToDocumentField.Equals(value) != true)) {
                    this.AddProcessPropertiesToDocumentField = value;
                    this.RaisePropertyChanged("AddProcessPropertiesToDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AssignToCreatorAfterCompletion {
            get {
                return this.AssignToCreatorAfterCompletionField;
            }
            set {
                if ((this.AssignToCreatorAfterCompletionField.Equals(value) != true)) {
                    this.AssignToCreatorAfterCompletionField = value;
                    this.RaisePropertyChanged("AssignToCreatorAfterCompletion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AssumeDocumentProperties {
            get {
                return this.AssumeDocumentPropertiesField;
            }
            set {
                if ((this.AssumeDocumentPropertiesField.Equals(value) != true)) {
                    this.AssumeDocumentPropertiesField = value;
                    this.RaisePropertyChanged("AssumeDocumentProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfiguration {
            get {
                return this.ColumnConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationField, value) != true)) {
                    this.ColumnConfigurationField = value;
                    this.RaisePropertyChanged("ColumnConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.CustomPropertyContract[] CustomProperties {
            get {
                return this.CustomPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertiesField, value) != true)) {
                    this.CustomPropertiesField = value;
                    this.RaisePropertyChanged("CustomProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Diagramm {
            get {
                return this.DiagrammField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagrammField, value) != true)) {
                    this.DiagrammField = value;
                    this.RaisePropertyChanged("Diagramm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DueDateDays {
            get {
                return this.DueDateDaysField;
            }
            set {
                if ((this.DueDateDaysField.Equals(value) != true)) {
                    this.DueDateDaysField = value;
                    this.RaisePropertyChanged("DueDateDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityEnum {
            get {
                return this.PriorityEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityEnumField, value) != true)) {
                    this.PriorityEnumField = value;
                    this.RaisePropertyChanged("PriorityEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowCommentWindow {
            get {
                return this.ShowCommentWindowField;
            }
            set {
                if ((this.ShowCommentWindowField.Equals(value) != true)) {
                    this.ShowCommentWindowField = value;
                    this.RaisePropertyChanged("ShowCommentWindow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskTemplateConditionContract[] TaskTemplateConditions {
            get {
                return this.TaskTemplateConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTemplateConditionsField, value) != true)) {
                    this.TaskTemplateConditionsField = value;
                    this.RaisePropertyChanged("TaskTemplateConditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskTemplateWebServiceContract[] TaskTemplateWebServices {
            get {
                return this.TaskTemplateWebServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTemplateWebServicesField, value) != true)) {
                    this.TaskTemplateWebServicesField = value;
                    this.RaisePropertyChanged("TaskTemplateWebServices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskTemplateContract[] TaskTemplates {
            get {
                return this.TaskTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTemplatesField, value) != true)) {
                    this.TaskTemplatesField = value;
                    this.RaisePropertyChanged("TaskTemplates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyFillerPluginContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyFillerPluginContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyFillerContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyFillerContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyFillerPluginIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyFillerRoleContract[] PropertyFillerRolesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyFillerPluginId {
            get {
                return this.PropertyFillerPluginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyFillerPluginIdField, value) != true)) {
                    this.PropertyFillerPluginIdField = value;
                    this.RaisePropertyChanged("PropertyFillerPluginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyFillerRoleContract[] PropertyFillerRoles {
            get {
                return this.PropertyFillerRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyFillerRolesField, value) != true)) {
                    this.PropertyFillerRolesField = value;
                    this.RaisePropertyChanged("PropertyFillerRoles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyPageTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyPageTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyTemplateContract[] PropertyTemplatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyTemplateContract[] PropertyTemplates {
            get {
                return this.PropertyTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTemplatesField, value) != true)) {
                    this.PropertyTemplatesField = value;
                    this.RaisePropertyChanged("PropertyTemplates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyTypeCategoryContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyTypeCategoryContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyTypeContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyTypeContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ComparisonEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyTypeConfigurationContract ConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditFormatterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FreeEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FreeSelectableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MultikeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ObsoleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypePluginIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypePluginTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SearchableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemPropertyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViewFormatterIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ComparisonEnum {
            get {
                return this.ComparisonEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ComparisonEnumField, value) != true)) {
                    this.ComparisonEnumField = value;
                    this.RaisePropertyChanged("ComparisonEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyTypeConfigurationContract Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditFormatterId {
            get {
                return this.EditFormatterIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EditFormatterIdField, value) != true)) {
                    this.EditFormatterIdField = value;
                    this.RaisePropertyChanged("EditFormatterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FreeEditable {
            get {
                return this.FreeEditableField;
            }
            set {
                if ((this.FreeEditableField.Equals(value) != true)) {
                    this.FreeEditableField = value;
                    this.RaisePropertyChanged("FreeEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FreeSelectable {
            get {
                return this.FreeSelectableField;
            }
            set {
                if ((this.FreeSelectableField.Equals(value) != true)) {
                    this.FreeSelectableField = value;
                    this.RaisePropertyChanged("FreeSelectable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Multikey {
            get {
                return this.MultikeyField;
            }
            set {
                if ((this.MultikeyField.Equals(value) != true)) {
                    this.MultikeyField = value;
                    this.RaisePropertyChanged("Multikey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Obsolete {
            get {
                return this.ObsoleteField;
            }
            set {
                if ((this.ObsoleteField.Equals(value) != true)) {
                    this.ObsoleteField = value;
                    this.RaisePropertyChanged("Obsolete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeCategoryId {
            get {
                return this.PropertyTypeCategoryIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeCategoryIdField, value) != true)) {
                    this.PropertyTypeCategoryIdField = value;
                    this.RaisePropertyChanged("PropertyTypeCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypePluginId {
            get {
                return this.PropertyTypePluginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypePluginIdField, value) != true)) {
                    this.PropertyTypePluginIdField = value;
                    this.RaisePropertyChanged("PropertyTypePluginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypePluginTypeEnum {
            get {
                return this.PropertyTypePluginTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypePluginTypeEnumField, value) != true)) {
                    this.PropertyTypePluginTypeEnumField = value;
                    this.RaisePropertyChanged("PropertyTypePluginTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Searchable {
            get {
                return this.SearchableField;
            }
            set {
                if ((this.SearchableField.Equals(value) != true)) {
                    this.SearchableField = value;
                    this.RaisePropertyChanged("Searchable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemProperty {
            get {
                return this.SystemPropertyField;
            }
            set {
                if ((this.SystemPropertyField.Equals(value) != true)) {
                    this.SystemPropertyField = value;
                    this.RaisePropertyChanged("SystemProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViewFormatterId {
            get {
                return this.ViewFormatterIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewFormatterIdField, value) != true)) {
                    this.ViewFormatterIdField = value;
                    this.RaisePropertyChanged("ViewFormatterId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SigningProfileContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SigningProfileContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AvaialableForClientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CheckOfflineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssuerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeStampServerUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WithTimeStampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AvaialableForClients {
            get {
                return this.AvaialableForClientsField;
            }
            set {
                if ((this.AvaialableForClientsField.Equals(value) != true)) {
                    this.AvaialableForClientsField = value;
                    this.RaisePropertyChanged("AvaialableForClients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateLocation {
            get {
                return this.CertificateLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateLocationField, value) != true)) {
                    this.CertificateLocationField = value;
                    this.RaisePropertyChanged("CertificateLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CheckOffline {
            get {
                return this.CheckOfflineField;
            }
            set {
                if ((this.CheckOfflineField.Equals(value) != true)) {
                    this.CheckOfflineField = value;
                    this.RaisePropertyChanged("CheckOffline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Issuer {
            get {
                return this.IssuerField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerField, value) != true)) {
                    this.IssuerField = value;
                    this.RaisePropertyChanged("Issuer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignatureTypeEnum {
            get {
                return this.SignatureTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureTypeEnumField, value) != true)) {
                    this.SignatureTypeEnumField = value;
                    this.RaisePropertyChanged("SignatureTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeStampServerUrl {
            get {
                return this.TimeStampServerUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeStampServerUrlField, value) != true)) {
                    this.TimeStampServerUrlField = value;
                    this.RaisePropertyChanged("TimeStampServerUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WithTimeStamp {
            get {
                return this.WithTimeStampField;
            }
            set {
                if ((this.WithTimeStampField.Equals(value) != true)) {
                    this.WithTimeStampField = value;
                    this.RaisePropertyChanged("WithTimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LifeCycleStateProtectionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LifeCycleStateProtectionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteAfterExpirationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectAnnotationChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectCheckOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectContentChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectPropertyChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectProtectionDomainChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ProtectionDurationTicksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteAfterExpiration {
            get {
                return this.DeleteAfterExpirationField;
            }
            set {
                if ((this.DeleteAfterExpirationField.Equals(value) != true)) {
                    this.DeleteAfterExpirationField = value;
                    this.RaisePropertyChanged("DeleteAfterExpiration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectAnnotationChange {
            get {
                return this.ProtectAnnotationChangeField;
            }
            set {
                if ((this.ProtectAnnotationChangeField.Equals(value) != true)) {
                    this.ProtectAnnotationChangeField = value;
                    this.RaisePropertyChanged("ProtectAnnotationChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectCheckOut {
            get {
                return this.ProtectCheckOutField;
            }
            set {
                if ((this.ProtectCheckOutField.Equals(value) != true)) {
                    this.ProtectCheckOutField = value;
                    this.RaisePropertyChanged("ProtectCheckOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectContentChange {
            get {
                return this.ProtectContentChangeField;
            }
            set {
                if ((this.ProtectContentChangeField.Equals(value) != true)) {
                    this.ProtectContentChangeField = value;
                    this.RaisePropertyChanged("ProtectContentChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectDelete {
            get {
                return this.ProtectDeleteField;
            }
            set {
                if ((this.ProtectDeleteField.Equals(value) != true)) {
                    this.ProtectDeleteField = value;
                    this.RaisePropertyChanged("ProtectDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectPropertyChange {
            get {
                return this.ProtectPropertyChangeField;
            }
            set {
                if ((this.ProtectPropertyChangeField.Equals(value) != true)) {
                    this.ProtectPropertyChangeField = value;
                    this.RaisePropertyChanged("ProtectPropertyChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectProtectionDomainChange {
            get {
                return this.ProtectProtectionDomainChangeField;
            }
            set {
                if ((this.ProtectProtectionDomainChangeField.Equals(value) != true)) {
                    this.ProtectProtectionDomainChangeField = value;
                    this.RaisePropertyChanged("ProtectProtectionDomainChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProtectionDurationTicks {
            get {
                return this.ProtectionDurationTicksField;
            }
            set {
                if ((this.ProtectionDurationTicksField.Equals(value) != true)) {
                    this.ProtectionDurationTicksField = value;
                    this.RaisePropertyChanged("ProtectionDurationTicks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ColumnConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ColumnConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnInformationContract[] ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] GroupedColumnIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InheritPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowAggregateFunctionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowColumnFiltersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowGroupsExpandedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SortColumnContract[] SortedColumnsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnInformationContract[] Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] GroupedColumnIds {
            get {
                return this.GroupedColumnIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupedColumnIdsField, value) != true)) {
                    this.GroupedColumnIdsField = value;
                    this.RaisePropertyChanged("GroupedColumnIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InheritProperties {
            get {
                return this.InheritPropertiesField;
            }
            set {
                if ((this.InheritPropertiesField.Equals(value) != true)) {
                    this.InheritPropertiesField = value;
                    this.RaisePropertyChanged("InheritProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowAggregateFunctions {
            get {
                return this.ShowAggregateFunctionsField;
            }
            set {
                if ((this.ShowAggregateFunctionsField.Equals(value) != true)) {
                    this.ShowAggregateFunctionsField = value;
                    this.RaisePropertyChanged("ShowAggregateFunctions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowColumnFilters {
            get {
                return this.ShowColumnFiltersField;
            }
            set {
                if ((this.ShowColumnFiltersField.Equals(value) != true)) {
                    this.ShowColumnFiltersField = value;
                    this.RaisePropertyChanged("ShowColumnFilters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowGroupsExpanded {
            get {
                return this.ShowGroupsExpandedField;
            }
            set {
                if ((this.ShowGroupsExpandedField.Equals(value) != true)) {
                    this.ShowGroupsExpandedField = value;
                    this.RaisePropertyChanged("ShowGroupsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SortColumnContract[] SortedColumns {
            get {
                return this.SortedColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.SortedColumnsField, value) != true)) {
                    this.SortedColumnsField = value;
                    this.RaisePropertyChanged("SortedColumns");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomPropertyContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CustomPropertyContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyTypeEnum {
            get {
                return this.CustomPropertyTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyTypeEnumField, value) != true)) {
                    this.CustomPropertyTypeEnumField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTemplateConditionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskTemplateConditionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextTemplateIdOnFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskSearchConditionContract[] SearchConditionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextTemplateId {
            get {
                return this.NextTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextTemplateIdField, value) != true)) {
                    this.NextTemplateIdField = value;
                    this.RaisePropertyChanged("NextTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextTemplateIdOnFalse {
            get {
                return this.NextTemplateIdOnFalseField;
            }
            set {
                if ((object.ReferenceEquals(this.NextTemplateIdOnFalseField, value) != true)) {
                    this.NextTemplateIdOnFalseField = value;
                    this.RaisePropertyChanged("NextTemplateIdOnFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskSearchConditionContract[] SearchConditions {
            get {
                return this.SearchConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchConditionsField, value) != true)) {
                    this.SearchConditionsField = value;
                    this.RaisePropertyChanged("SearchConditions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTemplateWebServiceContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskTemplateWebServiceContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextTemplateId {
            get {
                return this.NextTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextTemplateIdField, value) != true)) {
                    this.NextTemplateIdField = value;
                    this.RaisePropertyChanged("NextTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ApplicationExecutionInfoContract[] ApplicationExecuteInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssignedGroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssignedUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOverrideAssignedUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CloseProcessAfterCompletionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DeactivatedTabsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DelayedNotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DoEscalateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DueDateDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EscalateGroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EscalateUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FreeSelectAssignedUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NoNotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiresAllRecipientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiresResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowCloseTaskDialogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UIPluginControlFATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UIPluginControlSilverlightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UIPluginControlWebField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ApplicationExecutionInfoContract[] ApplicationExecuteInfos {
            get {
                return this.ApplicationExecuteInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationExecuteInfosField, value) != true)) {
                    this.ApplicationExecuteInfosField = value;
                    this.RaisePropertyChanged("ApplicationExecuteInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssignedGroupIds {
            get {
                return this.AssignedGroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedGroupIdsField, value) != true)) {
                    this.AssignedGroupIdsField = value;
                    this.RaisePropertyChanged("AssignedGroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssignedUserIds {
            get {
                return this.AssignedUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedUserIdsField, value) != true)) {
                    this.AssignedUserIdsField = value;
                    this.RaisePropertyChanged("AssignedUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOverrideAssignedUsers {
            get {
                return this.CanOverrideAssignedUsersField;
            }
            set {
                if ((this.CanOverrideAssignedUsersField.Equals(value) != true)) {
                    this.CanOverrideAssignedUsersField = value;
                    this.RaisePropertyChanged("CanOverrideAssignedUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CloseProcessAfterCompletion {
            get {
                return this.CloseProcessAfterCompletionField;
            }
            set {
                if ((this.CloseProcessAfterCompletionField.Equals(value) != true)) {
                    this.CloseProcessAfterCompletionField = value;
                    this.RaisePropertyChanged("CloseProcessAfterCompletion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DeactivatedTabs {
            get {
                return this.DeactivatedTabsField;
            }
            set {
                if ((object.ReferenceEquals(this.DeactivatedTabsField, value) != true)) {
                    this.DeactivatedTabsField = value;
                    this.RaisePropertyChanged("DeactivatedTabs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DelayedNotification {
            get {
                return this.DelayedNotificationField;
            }
            set {
                if ((this.DelayedNotificationField.Equals(value) != true)) {
                    this.DelayedNotificationField = value;
                    this.RaisePropertyChanged("DelayedNotification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoEscalate {
            get {
                return this.DoEscalateField;
            }
            set {
                if ((this.DoEscalateField.Equals(value) != true)) {
                    this.DoEscalateField = value;
                    this.RaisePropertyChanged("DoEscalate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DueDateDays {
            get {
                return this.DueDateDaysField;
            }
            set {
                if ((this.DueDateDaysField.Equals(value) != true)) {
                    this.DueDateDaysField = value;
                    this.RaisePropertyChanged("DueDateDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EscalateGroupIds {
            get {
                return this.EscalateGroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalateGroupIdsField, value) != true)) {
                    this.EscalateGroupIdsField = value;
                    this.RaisePropertyChanged("EscalateGroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EscalateUserIds {
            get {
                return this.EscalateUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalateUserIdsField, value) != true)) {
                    this.EscalateUserIdsField = value;
                    this.RaisePropertyChanged("EscalateUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FreeSelectAssignedUsers {
            get {
                return this.FreeSelectAssignedUsersField;
            }
            set {
                if ((this.FreeSelectAssignedUsersField.Equals(value) != true)) {
                    this.FreeSelectAssignedUsersField = value;
                    this.RaisePropertyChanged("FreeSelectAssignedUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextTemplateId {
            get {
                return this.NextTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextTemplateIdField, value) != true)) {
                    this.NextTemplateIdField = value;
                    this.RaisePropertyChanged("NextTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NoNotification {
            get {
                return this.NoNotificationField;
            }
            set {
                if ((this.NoNotificationField.Equals(value) != true)) {
                    this.NoNotificationField = value;
                    this.RaisePropertyChanged("NoNotification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiresAllRecipients {
            get {
                return this.RequiresAllRecipientsField;
            }
            set {
                if ((this.RequiresAllRecipientsField.Equals(value) != true)) {
                    this.RequiresAllRecipientsField = value;
                    this.RaisePropertyChanged("RequiresAllRecipients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiresResponse {
            get {
                return this.RequiresResponseField;
            }
            set {
                if ((this.RequiresResponseField.Equals(value) != true)) {
                    this.RequiresResponseField = value;
                    this.RaisePropertyChanged("RequiresResponse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowCloseTaskDialog {
            get {
                return this.ShowCloseTaskDialogField;
            }
            set {
                if ((this.ShowCloseTaskDialogField.Equals(value) != true)) {
                    this.ShowCloseTaskDialogField = value;
                    this.RaisePropertyChanged("ShowCloseTaskDialog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UIPluginControlFAT {
            get {
                return this.UIPluginControlFATField;
            }
            set {
                if ((object.ReferenceEquals(this.UIPluginControlFATField, value) != true)) {
                    this.UIPluginControlFATField = value;
                    this.RaisePropertyChanged("UIPluginControlFAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UIPluginControlSilverlight {
            get {
                return this.UIPluginControlSilverlightField;
            }
            set {
                if ((object.ReferenceEquals(this.UIPluginControlSilverlightField, value) != true)) {
                    this.UIPluginControlSilverlightField = value;
                    this.RaisePropertyChanged("UIPluginControlSilverlight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UIPluginControlWeb {
            get {
                return this.UIPluginControlWebField;
            }
            set {
                if ((object.ReferenceEquals(this.UIPluginControlWebField, value) != true)) {
                    this.UIPluginControlWebField = value;
                    this.RaisePropertyChanged("UIPluginControlWeb");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ColumnInformationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ColumnInformationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SortColumnContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SortColumnContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SortOrderEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SortOrderEnum {
            get {
                return this.SortOrderEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SortOrderEnumField, value) != true)) {
                    this.SortOrderEnumField = value;
                    this.RaisePropertyChanged("SortOrderEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskSearchConditionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskSearchConditionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComparisonEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskSearchConditionItemContract LeftTaskSearchConditionItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelationEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskSearchConditionItemContract RightTaskSearchConditionItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComparisonEnum {
            get {
                return this.ComparisonEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ComparisonEnumField, value) != true)) {
                    this.ComparisonEnumField = value;
                    this.RaisePropertyChanged("ComparisonEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskSearchConditionItemContract LeftTaskSearchConditionItem {
            get {
                return this.LeftTaskSearchConditionItemField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftTaskSearchConditionItemField, value) != true)) {
                    this.LeftTaskSearchConditionItemField = value;
                    this.RaisePropertyChanged("LeftTaskSearchConditionItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelationEnum {
            get {
                return this.RelationEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationEnumField, value) != true)) {
                    this.RelationEnumField = value;
                    this.RaisePropertyChanged("RelationEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskSearchConditionItemContract RightTaskSearchConditionItem {
            get {
                return this.RightTaskSearchConditionItemField;
            }
            set {
                if ((object.ReferenceEquals(this.RightTaskSearchConditionItemField, value) != true)) {
                    this.RightTaskSearchConditionItemField = value;
                    this.RaisePropertyChanged("RightTaskSearchConditionItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskSearchConditionItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskSearchConditionItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyKey {
            get {
                return this.CustomPropertyKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyKeyField, value) != true)) {
                    this.CustomPropertyKeyField = value;
                    this.RaisePropertyChanged("CustomPropertyKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationExecutionInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ApplicationExecutionInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationId {
            get {
                return this.ApplicationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationIdField, value) != true)) {
                    this.ApplicationIdField = value;
                    this.RaisePropertyChanged("ApplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyFillerRoleContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyFillerRoleContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyId {
            get {
                return this.PropertyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyIdField, value) != true)) {
                    this.PropertyIdField = value;
                    this.RaisePropertyChanged("PropertyId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanEditDefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceholderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VisibleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanEditDefaultValue {
            get {
                return this.CanEditDefaultValueField;
            }
            set {
                if ((this.CanEditDefaultValueField.Equals(value) != true)) {
                    this.CanEditDefaultValueField = value;
                    this.RaisePropertyChanged("CanEditDefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Placeholder {
            get {
                return this.PlaceholderField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceholderField, value) != true)) {
                    this.PlaceholderField = value;
                    this.RaisePropertyChanged("Placeholder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Required {
            get {
                return this.RequiredField;
            }
            set {
                if ((this.RequiredField.Equals(value) != true)) {
                    this.RequiredField = value;
                    this.RaisePropertyChanged("Required");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Visible {
            get {
                return this.VisibleField;
            }
            set {
                if ((this.VisibleField.Equals(value) != true)) {
                    this.VisibleField = value;
                    this.RaisePropertyChanged("Visible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyTypeConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PropertyTypeConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTimeFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberMaximumDecimalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberMaximumDecimalsInternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberMaximumDigitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberMaximumDigitsInternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StringAllowPhoneticSearchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StringCaseSensitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringForbiddenCharsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StringMaximumLengthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTimeFormat {
            get {
                return this.DateTimeFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTimeFormatField, value) != true)) {
                    this.DateTimeFormatField = value;
                    this.RaisePropertyChanged("DateTimeFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberMaximumDecimals {
            get {
                return this.NumberMaximumDecimalsField;
            }
            set {
                if ((this.NumberMaximumDecimalsField.Equals(value) != true)) {
                    this.NumberMaximumDecimalsField = value;
                    this.RaisePropertyChanged("NumberMaximumDecimals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberMaximumDecimalsInternal {
            get {
                return this.NumberMaximumDecimalsInternalField;
            }
            set {
                if ((this.NumberMaximumDecimalsInternalField.Equals(value) != true)) {
                    this.NumberMaximumDecimalsInternalField = value;
                    this.RaisePropertyChanged("NumberMaximumDecimalsInternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberMaximumDigits {
            get {
                return this.NumberMaximumDigitsField;
            }
            set {
                if ((this.NumberMaximumDigitsField.Equals(value) != true)) {
                    this.NumberMaximumDigitsField = value;
                    this.RaisePropertyChanged("NumberMaximumDigits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberMaximumDigitsInternal {
            get {
                return this.NumberMaximumDigitsInternalField;
            }
            set {
                if ((this.NumberMaximumDigitsInternalField.Equals(value) != true)) {
                    this.NumberMaximumDigitsInternalField = value;
                    this.RaisePropertyChanged("NumberMaximumDigitsInternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StringAllowPhoneticSearch {
            get {
                return this.StringAllowPhoneticSearchField;
            }
            set {
                if ((this.StringAllowPhoneticSearchField.Equals(value) != true)) {
                    this.StringAllowPhoneticSearchField = value;
                    this.RaisePropertyChanged("StringAllowPhoneticSearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StringCaseSensitive {
            get {
                return this.StringCaseSensitiveField;
            }
            set {
                if ((this.StringCaseSensitiveField.Equals(value) != true)) {
                    this.StringCaseSensitiveField = value;
                    this.RaisePropertyChanged("StringCaseSensitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringForbiddenChars {
            get {
                return this.StringForbiddenCharsField;
            }
            set {
                if ((object.ReferenceEquals(this.StringForbiddenCharsField, value) != true)) {
                    this.StringForbiddenCharsField = value;
                    this.RaisePropertyChanged("StringForbiddenChars");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StringMaximumLength {
            get {
                return this.StringMaximumLengthField;
            }
            set {
                if ((this.StringMaximumLengthField.Equals(value) != true)) {
                    this.StringMaximumLengthField = value;
                    this.RaisePropertyChanged("StringMaximumLength");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserStoreContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class UserStoreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.GroupContract[] GroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.UserContract[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.GroupContract[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnUserId {
            get {
                return this.OwnUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnUserIdField, value) != true)) {
                    this.OwnUserIdField = value;
                    this.RaisePropertyChanged("OwnUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.UserContract[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class GroupContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserIds {
            get {
                return this.UserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdsField, value) != true)) {
                    this.UserIdsField = value;
                    this.RaisePropertyChanged("UserIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class UserContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApplicationUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeOptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanExecuteDefaultSearchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasEmailNotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoginWithCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoginWithInternalPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoginWithWindowsUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoginWithoutPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NamedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ObsoleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ApplicationUser {
            get {
                return this.ApplicationUserField;
            }
            set {
                if ((this.ApplicationUserField.Equals(value) != true)) {
                    this.ApplicationUserField = value;
                    this.RaisePropertyChanged("ApplicationUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeLanguage {
            get {
                return this.CanChangeLanguageField;
            }
            set {
                if ((this.CanChangeLanguageField.Equals(value) != true)) {
                    this.CanChangeLanguageField = value;
                    this.RaisePropertyChanged("CanChangeLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChangeOptions {
            get {
                return this.CanChangeOptionsField;
            }
            set {
                if ((this.CanChangeOptionsField.Equals(value) != true)) {
                    this.CanChangeOptionsField = value;
                    this.RaisePropertyChanged("CanChangeOptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanExecuteDefaultSearch {
            get {
                return this.CanExecuteDefaultSearchField;
            }
            set {
                if ((this.CanExecuteDefaultSearchField.Equals(value) != true)) {
                    this.CanExecuteDefaultSearchField = value;
                    this.RaisePropertyChanged("CanExecuteDefaultSearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasEmailNotification {
            get {
                return this.HasEmailNotificationField;
            }
            set {
                if ((this.HasEmailNotificationField.Equals(value) != true)) {
                    this.HasEmailNotificationField = value;
                    this.RaisePropertyChanged("HasEmailNotification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageField, value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginName {
            get {
                return this.LoginNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginNameField, value) != true)) {
                    this.LoginNameField = value;
                    this.RaisePropertyChanged("LoginName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoginWithCertificate {
            get {
                return this.LoginWithCertificateField;
            }
            set {
                if ((this.LoginWithCertificateField.Equals(value) != true)) {
                    this.LoginWithCertificateField = value;
                    this.RaisePropertyChanged("LoginWithCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoginWithInternalPassword {
            get {
                return this.LoginWithInternalPasswordField;
            }
            set {
                if ((this.LoginWithInternalPasswordField.Equals(value) != true)) {
                    this.LoginWithInternalPasswordField = value;
                    this.RaisePropertyChanged("LoginWithInternalPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoginWithWindowsUser {
            get {
                return this.LoginWithWindowsUserField;
            }
            set {
                if ((this.LoginWithWindowsUserField.Equals(value) != true)) {
                    this.LoginWithWindowsUserField = value;
                    this.RaisePropertyChanged("LoginWithWindowsUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoginWithoutPassword {
            get {
                return this.LoginWithoutPasswordField;
            }
            set {
                if ((this.LoginWithoutPasswordField.Equals(value) != true)) {
                    this.LoginWithoutPasswordField = value;
                    this.RaisePropertyChanged("LoginWithoutPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NamedUser {
            get {
                return this.NamedUserField;
            }
            set {
                if ((this.NamedUserField.Equals(value) != true)) {
                    this.NamedUserField = value;
                    this.RaisePropertyChanged("NamedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Obsolete {
            get {
                return this.ObsoleteField;
            }
            set {
                if ((this.ObsoleteField.Equals(value) != true)) {
                    this.ObsoleteField = value;
                    this.RaisePropertyChanged("Obsolete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityStoreContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityStoreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.AccessOperationCategoryContract[] AccessOperationCategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.AccessOperationContract[] AccessOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PasswordConfigurationContract PasswordConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ProtectionDomainContract[] ProtectionDomainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.RoleContract[] RolesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.AccessOperationCategoryContract[] AccessOperationCategories {
            get {
                return this.AccessOperationCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessOperationCategoriesField, value) != true)) {
                    this.AccessOperationCategoriesField = value;
                    this.RaisePropertyChanged("AccessOperationCategories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.AccessOperationContract[] AccessOperations {
            get {
                return this.AccessOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessOperationsField, value) != true)) {
                    this.AccessOperationsField = value;
                    this.RaisePropertyChanged("AccessOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PasswordConfigurationContract PasswordConfiguration {
            get {
                return this.PasswordConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordConfigurationField, value) != true)) {
                    this.PasswordConfigurationField = value;
                    this.RaisePropertyChanged("PasswordConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ProtectionDomainContract[] ProtectionDomains {
            get {
                return this.ProtectionDomainsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainsField, value) != true)) {
                    this.ProtectionDomainsField = value;
                    this.RaisePropertyChanged("ProtectionDomains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.RoleContract[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PasswordConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HistoryCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaximumAgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimumLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MustHaveNormalCharactersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MustHaveNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MustHaveSpecialCharactersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MustHaveUpperAndLowerCaseField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HistoryCount {
            get {
                return this.HistoryCountField;
            }
            set {
                if ((this.HistoryCountField.Equals(value) != true)) {
                    this.HistoryCountField = value;
                    this.RaisePropertyChanged("HistoryCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaximumAge {
            get {
                return this.MaximumAgeField;
            }
            set {
                if ((this.MaximumAgeField.Equals(value) != true)) {
                    this.MaximumAgeField = value;
                    this.RaisePropertyChanged("MaximumAge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumLength {
            get {
                return this.MinimumLengthField;
            }
            set {
                if ((this.MinimumLengthField.Equals(value) != true)) {
                    this.MinimumLengthField = value;
                    this.RaisePropertyChanged("MinimumLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MustHaveNormalCharacters {
            get {
                return this.MustHaveNormalCharactersField;
            }
            set {
                if ((this.MustHaveNormalCharactersField.Equals(value) != true)) {
                    this.MustHaveNormalCharactersField = value;
                    this.RaisePropertyChanged("MustHaveNormalCharacters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MustHaveNumber {
            get {
                return this.MustHaveNumberField;
            }
            set {
                if ((this.MustHaveNumberField.Equals(value) != true)) {
                    this.MustHaveNumberField = value;
                    this.RaisePropertyChanged("MustHaveNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MustHaveSpecialCharacters {
            get {
                return this.MustHaveSpecialCharactersField;
            }
            set {
                if ((this.MustHaveSpecialCharactersField.Equals(value) != true)) {
                    this.MustHaveSpecialCharactersField = value;
                    this.RaisePropertyChanged("MustHaveSpecialCharacters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MustHaveUpperAndLowerCase {
            get {
                return this.MustHaveUpperAndLowerCaseField;
            }
            set {
                if ((this.MustHaveUpperAndLowerCaseField.Equals(value) != true)) {
                    this.MustHaveUpperAndLowerCaseField = value;
                    this.RaisePropertyChanged("MustHaveUpperAndLowerCase");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessOperationCategoryContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AccessOperationCategoryContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessOperationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AccessOperationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PreconditionIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryIdField, value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PreconditionIds {
            get {
                return this.PreconditionIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.PreconditionIdsField, value) != true)) {
                    this.PreconditionIdsField = value;
                    this.RaisePropertyChanged("PreconditionIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProtectionDomainContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProtectionDomainContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RoleIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RoleIds {
            get {
                return this.RoleIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleIdsField, value) != true)) {
                    this.RoleIdsField = value;
                    this.RaisePropertyChanged("RoleIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RoleContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AllowedActionIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] GroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AllowedActionIds {
            get {
                return this.AllowedActionIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedActionIdsField, value) != true)) {
                    this.AllowedActionIdsField = value;
                    this.RaisePropertyChanged("AllowedActionIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] GroupIds {
            get {
                return this.GroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdsField, value) != true)) {
                    this.GroupIdsField = value;
                    this.RaisePropertyChanged("GroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserIds {
            get {
                return this.UserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdsField, value) != true)) {
                    this.UserIdsField = value;
                    this.RaisePropertyChanged("UserIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlobStoreProviderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class BlobStoreProviderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderSystemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FolderSystemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiddenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnum {
            get {
                return this.AccessRightsEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumField, value) != true)) {
                    this.AccessRightsEnumField = value;
                    this.RaisePropertyChanged("AccessRightsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hidden {
            get {
                return this.HiddenField;
            }
            set {
                if ((this.HiddenField.Equals(value) != true)) {
                    this.HiddenField = value;
                    this.RaisePropertyChanged("Hidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Private {
            get {
                return this.PrivateField;
            }
            set {
                if ((this.PrivateField.Equals(value) != true)) {
                    this.PrivateField = value;
                    this.RaisePropertyChanged("Private");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMTPSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SMTPSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SendTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderMailAdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SendTimes {
            get {
                return this.SendTimesField;
            }
            set {
                if ((object.ReferenceEquals(this.SendTimesField, value) != true)) {
                    this.SendTimesField = value;
                    this.RaisePropertyChanged("SendTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderMailAdress {
            get {
                return this.SenderMailAdressField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderMailAdressField, value) != true)) {
                    this.SenderMailAdressField = value;
                    this.RaisePropertyChanged("SenderMailAdress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendMailParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SendMailParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BodyIsHTMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.MailAttachmentParameterContract[] MailAttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecipientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SmtpPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SmtpServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SmtpUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BodyIsHTML {
            get {
                return this.BodyIsHTMLField;
            }
            set {
                if ((this.BodyIsHTMLField.Equals(value) != true)) {
                    this.BodyIsHTMLField = value;
                    this.RaisePropertyChanged("BodyIsHTML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.MailAttachmentParameterContract[] MailAttachments {
            get {
                return this.MailAttachmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.MailAttachmentsField, value) != true)) {
                    this.MailAttachmentsField = value;
                    this.RaisePropertyChanged("MailAttachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Recipients {
            get {
                return this.RecipientsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientsField, value) != true)) {
                    this.RecipientsField = value;
                    this.RaisePropertyChanged("Recipients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderMail {
            get {
                return this.SenderMailField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderMailField, value) != true)) {
                    this.SenderMailField = value;
                    this.RaisePropertyChanged("SenderMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmtpPassword {
            get {
                return this.SmtpPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.SmtpPasswordField, value) != true)) {
                    this.SmtpPasswordField = value;
                    this.RaisePropertyChanged("SmtpPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmtpServer {
            get {
                return this.SmtpServerField;
            }
            set {
                if ((object.ReferenceEquals(this.SmtpServerField, value) != true)) {
                    this.SmtpServerField = value;
                    this.RaisePropertyChanged("SmtpServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmtpUser {
            get {
                return this.SmtpUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SmtpUserField, value) != true)) {
                    this.SmtpUserField = value;
                    this.RaisePropertyChanged("SmtpUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailAttachmentParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class MailAttachmentParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileId {
            get {
                return this.FileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FileIdField, value) != true)) {
                    this.FileIdField = value;
                    this.RaisePropertyChanged("FileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GlobalSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class GlobalSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CADIntegrationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CADIntegrationExtensionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CADIntegrationWebserviceURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataProviderForImportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataProviderForPropertyEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataProviderForSearchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataProviderTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataProviderURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DefaultImportTemplateChangeActionKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DocumentReminderIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailSendTimeModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxValueForProposalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountForStreamingUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaperBinProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProcessRespectProtectionDomainForUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract ProcessStoreSearchesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowTemplateChangeOptionsDialogKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract TemplateFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract TextModuleFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlPlaceholderDocIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlPlaceholderStoreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UsePasswordProtectionForZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CADIntegrationActive {
            get {
                return this.CADIntegrationActiveField;
            }
            set {
                if ((this.CADIntegrationActiveField.Equals(value) != true)) {
                    this.CADIntegrationActiveField = value;
                    this.RaisePropertyChanged("CADIntegrationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CADIntegrationExtensions {
            get {
                return this.CADIntegrationExtensionsField;
            }
            set {
                if ((object.ReferenceEquals(this.CADIntegrationExtensionsField, value) != true)) {
                    this.CADIntegrationExtensionsField = value;
                    this.RaisePropertyChanged("CADIntegrationExtensions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CADIntegrationWebserviceURL {
            get {
                return this.CADIntegrationWebserviceURLField;
            }
            set {
                if ((object.ReferenceEquals(this.CADIntegrationWebserviceURLField, value) != true)) {
                    this.CADIntegrationWebserviceURLField = value;
                    this.RaisePropertyChanged("CADIntegrationWebserviceURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataProviderForImport {
            get {
                return this.DataProviderForImportField;
            }
            set {
                if ((this.DataProviderForImportField.Equals(value) != true)) {
                    this.DataProviderForImportField = value;
                    this.RaisePropertyChanged("DataProviderForImport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataProviderForPropertyEdit {
            get {
                return this.DataProviderForPropertyEditField;
            }
            set {
                if ((this.DataProviderForPropertyEditField.Equals(value) != true)) {
                    this.DataProviderForPropertyEditField = value;
                    this.RaisePropertyChanged("DataProviderForPropertyEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataProviderForSearch {
            get {
                return this.DataProviderForSearchField;
            }
            set {
                if ((this.DataProviderForSearchField.Equals(value) != true)) {
                    this.DataProviderForSearchField = value;
                    this.RaisePropertyChanged("DataProviderForSearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataProviderTimeout {
            get {
                return this.DataProviderTimeoutField;
            }
            set {
                if ((this.DataProviderTimeoutField.Equals(value) != true)) {
                    this.DataProviderTimeoutField = value;
                    this.RaisePropertyChanged("DataProviderTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataProviderURL {
            get {
                return this.DataProviderURLField;
            }
            set {
                if ((object.ReferenceEquals(this.DataProviderURLField, value) != true)) {
                    this.DataProviderURLField = value;
                    this.RaisePropertyChanged("DataProviderURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DefaultImportTemplateChangeActionKey {
            get {
                return this.DefaultImportTemplateChangeActionKeyField;
            }
            set {
                if ((this.DefaultImportTemplateChangeActionKeyField.Equals(value) != true)) {
                    this.DefaultImportTemplateChangeActionKeyField = value;
                    this.RaisePropertyChanged("DefaultImportTemplateChangeActionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DocumentReminderInterval {
            get {
                return this.DocumentReminderIntervalField;
            }
            set {
                if ((this.DocumentReminderIntervalField.Equals(value) != true)) {
                    this.DocumentReminderIntervalField = value;
                    this.RaisePropertyChanged("DocumentReminderInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailSendTimeMode {
            get {
                return this.EmailSendTimeModeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailSendTimeModeField, value) != true)) {
                    this.EmailSendTimeModeField = value;
                    this.RaisePropertyChanged("EmailSendTimeMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxValueForProposal {
            get {
                return this.MaxValueForProposalField;
            }
            set {
                if ((this.MaxValueForProposalField.Equals(value) != true)) {
                    this.MaxValueForProposalField = value;
                    this.RaisePropertyChanged("MaxValueForProposal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCountForStreamingUsers {
            get {
                return this.PageCountForStreamingUsersField;
            }
            set {
                if ((this.PageCountForStreamingUsersField.Equals(value) != true)) {
                    this.PageCountForStreamingUsersField = value;
                    this.RaisePropertyChanged("PageCountForStreamingUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaperBinProtectionDomainId {
            get {
                return this.PaperBinProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PaperBinProtectionDomainIdField, value) != true)) {
                    this.PaperBinProtectionDomainIdField = value;
                    this.RaisePropertyChanged("PaperBinProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProcessRespectProtectionDomainForUsers {
            get {
                return this.ProcessRespectProtectionDomainForUsersField;
            }
            set {
                if ((this.ProcessRespectProtectionDomainForUsersField.Equals(value) != true)) {
                    this.ProcessRespectProtectionDomainForUsersField = value;
                    this.RaisePropertyChanged("ProcessRespectProtectionDomainForUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract ProcessStoreSearches {
            get {
                return this.ProcessStoreSearchesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessStoreSearchesField, value) != true)) {
                    this.ProcessStoreSearchesField = value;
                    this.RaisePropertyChanged("ProcessStoreSearches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowTemplateChangeOptionsDialogKey {
            get {
                return this.ShowTemplateChangeOptionsDialogKeyField;
            }
            set {
                if ((this.ShowTemplateChangeOptionsDialogKeyField.Equals(value) != true)) {
                    this.ShowTemplateChangeOptionsDialogKeyField = value;
                    this.RaisePropertyChanged("ShowTemplateChangeOptionsDialogKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract TemplateFolder {
            get {
                return this.TemplateFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateFolderField, value) != true)) {
                    this.TemplateFolderField = value;
                    this.RaisePropertyChanged("TemplateFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract TextModuleFolder {
            get {
                return this.TextModuleFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.TextModuleFolderField, value) != true)) {
                    this.TextModuleFolderField = value;
                    this.RaisePropertyChanged("TextModuleFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlLink {
            get {
                return this.UrlLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlLinkField, value) != true)) {
                    this.UrlLinkField = value;
                    this.RaisePropertyChanged("UrlLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlPlaceholderDocId {
            get {
                return this.UrlPlaceholderDocIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlPlaceholderDocIdField, value) != true)) {
                    this.UrlPlaceholderDocIdField = value;
                    this.RaisePropertyChanged("UrlPlaceholderDocId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlPlaceholderStoreId {
            get {
                return this.UrlPlaceholderStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlPlaceholderStoreIdField, value) != true)) {
                    this.UrlPlaceholderStoreIdField = value;
                    this.RaisePropertyChanged("UrlPlaceholderStoreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UsePasswordProtectionForZip {
            get {
                return this.UsePasswordProtectionForZipField;
            }
            set {
                if ((this.UsePasswordProtectionForZipField.Equals(value) != true)) {
                    this.UsePasswordProtectionForZipField = value;
                    this.RaisePropertyChanged("UsePasswordProtectionForZip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderPathContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FolderPathContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderSystemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract PathGlobalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderSystemId {
            get {
                return this.FolderSystemIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderSystemIdField, value) != true)) {
                    this.FolderSystemIdField = value;
                    this.RaisePropertyChanged("FolderSystemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract PathGlobal {
            get {
                return this.PathGlobalField;
            }
            set {
                if ((object.ReferenceEquals(this.PathGlobalField, value) != true)) {
                    this.PathGlobalField = value;
                    this.RaisePropertyChanged("PathGlobal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFolderSystemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RemoteFolderSystemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiddenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnum {
            get {
                return this.AccessRightsEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumField, value) != true)) {
                    this.AccessRightsEnumField = value;
                    this.RaisePropertyChanged("AccessRightsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hidden {
            get {
                return this.HiddenField;
            }
            set {
                if ((this.HiddenField.Equals(value) != true)) {
                    this.HiddenField = value;
                    this.RaisePropertyChanged("Hidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLogEntryContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class UserLogEntryContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientComputerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogEntryTypeEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientComputerName {
            get {
                return this.ClientComputerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientComputerNameField, value) != true)) {
                    this.ClientComputerNameField = value;
                    this.RaisePropertyChanged("ClientComputerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientIP {
            get {
                return this.ClientIPField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIPField, value) != true)) {
                    this.ClientIPField = value;
                    this.RaisePropertyChanged("ClientIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogEntryTypeEnum {
            get {
                return this.LogEntryTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.LogEntryTypeEnumField, value) != true)) {
                    this.LogEntryTypeEnumField = value;
                    this.RaisePropertyChanged("LogEntryTypeEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class UserSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract LastSelectedFolderPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract LastSelectedFolderPath {
            get {
                return this.LastSelectedFolderPathField;
            }
            set {
                if ((object.ReferenceEquals(this.LastSelectedFolderPathField, value) != true)) {
                    this.LastSelectedFolderPathField = value;
                    this.RaisePropertyChanged("LastSelectedFolderPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CloudSchemaStoreContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CloudSchemaStoreContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.CloudDocumentTypeContract[] CloudDocumentTypesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.CloudDocumentTypeContract[] CloudDocumentTypes {
            get {
                return this.CloudDocumentTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.CloudDocumentTypesField, value) != true)) {
                    this.CloudDocumentTypesField = value;
                    this.RaisePropertyChanged("CloudDocumentTypes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CloudDocumentTypeContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CloudDocumentTypeContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeleteRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FriendlyNameContract[] FriendlyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReadRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract SearchFolderPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WriteRoleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminRoleId {
            get {
                return this.AdminRoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminRoleIdField, value) != true)) {
                    this.AdminRoleIdField = value;
                    this.RaisePropertyChanged("AdminRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeleteRoleId {
            get {
                return this.DeleteRoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeleteRoleIdField, value) != true)) {
                    this.DeleteRoleIdField = value;
                    this.RaisePropertyChanged("DeleteRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FriendlyNameContract[] FriendlyNames {
            get {
                return this.FriendlyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNamesField, value) != true)) {
                    this.FriendlyNamesField = value;
                    this.RaisePropertyChanged("FriendlyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReadRoleId {
            get {
                return this.ReadRoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadRoleIdField, value) != true)) {
                    this.ReadRoleIdField = value;
                    this.RaisePropertyChanged("ReadRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract SearchFolderPath {
            get {
                return this.SearchFolderPathField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchFolderPathField, value) != true)) {
                    this.SearchFolderPathField = value;
                    this.RaisePropertyChanged("SearchFolderPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WriteRoleId {
            get {
                return this.WriteRoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.WriteRoleIdField, value) != true)) {
                    this.WriteRoleIdField = value;
                    this.RaisePropertyChanged("WriteRoleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendlyNameContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FriendlyNameContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SAPConfigContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SAPConfigContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExtensionMustExistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SAPIndexDownloadContract[] IndexDownloadConfigsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MimeTypeMappingMustExistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.MimeTypeMappingEntryContract[] MimeTypeMappingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SAPBarcodePropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SAPBarcodeSyncPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SAPDocumentPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SAPRepositoryPropertyIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExtensionMustExist {
            get {
                return this.ExtensionMustExistField;
            }
            set {
                if ((this.ExtensionMustExistField.Equals(value) != true)) {
                    this.ExtensionMustExistField = value;
                    this.RaisePropertyChanged("ExtensionMustExist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SAPIndexDownloadContract[] IndexDownloadConfigs {
            get {
                return this.IndexDownloadConfigsField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexDownloadConfigsField, value) != true)) {
                    this.IndexDownloadConfigsField = value;
                    this.RaisePropertyChanged("IndexDownloadConfigs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MimeTypeMappingMustExist {
            get {
                return this.MimeTypeMappingMustExistField;
            }
            set {
                if ((this.MimeTypeMappingMustExistField.Equals(value) != true)) {
                    this.MimeTypeMappingMustExistField = value;
                    this.RaisePropertyChanged("MimeTypeMappingMustExist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.MimeTypeMappingEntryContract[] MimeTypeMappings {
            get {
                return this.MimeTypeMappingsField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeMappingsField, value) != true)) {
                    this.MimeTypeMappingsField = value;
                    this.RaisePropertyChanged("MimeTypeMappings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SAPBarcodePropertyId {
            get {
                return this.SAPBarcodePropertyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SAPBarcodePropertyIdField, value) != true)) {
                    this.SAPBarcodePropertyIdField = value;
                    this.RaisePropertyChanged("SAPBarcodePropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SAPBarcodeSyncPropertyId {
            get {
                return this.SAPBarcodeSyncPropertyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SAPBarcodeSyncPropertyIdField, value) != true)) {
                    this.SAPBarcodeSyncPropertyIdField = value;
                    this.RaisePropertyChanged("SAPBarcodeSyncPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SAPDocumentPropertyId {
            get {
                return this.SAPDocumentPropertyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SAPDocumentPropertyIdField, value) != true)) {
                    this.SAPDocumentPropertyIdField = value;
                    this.RaisePropertyChanged("SAPDocumentPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SAPRepositoryPropertyId {
            get {
                return this.SAPRepositoryPropertyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SAPRepositoryPropertyIdField, value) != true)) {
                    this.SAPRepositoryPropertyIdField = value;
                    this.RaisePropertyChanged("SAPRepositoryPropertyId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SAPIndexDownloadContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SAPIndexDownloadContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableIndexDownloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndexDownloadPluginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SAPPropertyMappingContract[] PropertyMappingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableIndexDownload {
            get {
                return this.EnableIndexDownloadField;
            }
            set {
                if ((this.EnableIndexDownloadField.Equals(value) != true)) {
                    this.EnableIndexDownloadField = value;
                    this.RaisePropertyChanged("EnableIndexDownload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndexDownloadPlugin {
            get {
                return this.IndexDownloadPluginField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexDownloadPluginField, value) != true)) {
                    this.IndexDownloadPluginField = value;
                    this.RaisePropertyChanged("IndexDownloadPlugin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SAPPropertyMappingContract[] PropertyMappings {
            get {
                return this.PropertyMappingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyMappingsField, value) != true)) {
                    this.PropertyMappingsField = value;
                    this.RaisePropertyChanged("PropertyMappings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepositoryName {
            get {
                return this.RepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryNameField, value) != true)) {
                    this.RepositoryNameField = value;
                    this.RaisePropertyChanged("RepositoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MimeTypeMappingEntryContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class MimeTypeMappingEntryContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileExtension {
            get {
                return this.FileExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionField, value) != true)) {
                    this.FileExtensionField = value;
                    this.RaisePropertyChanged("FileExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SAPPropertyMappingContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SAPPropertyMappingContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteLeadingSpacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteLeadingZerosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteTerminatingSpacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoSharePropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SAPPropertyNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteLeadingSpaces {
            get {
                return this.DeleteLeadingSpacesField;
            }
            set {
                if ((this.DeleteLeadingSpacesField.Equals(value) != true)) {
                    this.DeleteLeadingSpacesField = value;
                    this.RaisePropertyChanged("DeleteLeadingSpaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteLeadingZeros {
            get {
                return this.DeleteLeadingZerosField;
            }
            set {
                if ((this.DeleteLeadingZerosField.Equals(value) != true)) {
                    this.DeleteLeadingZerosField = value;
                    this.RaisePropertyChanged("DeleteLeadingZeros");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteTerminatingSpaces {
            get {
                return this.DeleteTerminatingSpacesField;
            }
            set {
                if ((this.DeleteTerminatingSpacesField.Equals(value) != true)) {
                    this.DeleteTerminatingSpacesField = value;
                    this.RaisePropertyChanged("DeleteTerminatingSpaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoSharePropertyName {
            get {
                return this.InfoSharePropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoSharePropertyNameField, value) != true)) {
                    this.InfoSharePropertyNameField = value;
                    this.RaisePropertyChanged("InfoSharePropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SAPPropertyName {
            get {
                return this.SAPPropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SAPPropertyNameField, value) != true)) {
                    this.SAPPropertyNameField = value;
                    this.RaisePropertyChanged("SAPPropertyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityConfigDefinitionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityConfigDefinitionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SecurityHandlerConfigContract[] SecurityHandlersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SecurityHandlerConfigContract[] SecurityHandlers {
            get {
                return this.SecurityHandlersField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityHandlersField, value) != true)) {
                    this.SecurityHandlersField = value;
                    this.RaisePropertyChanged("SecurityHandlers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectIdField, value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityHandlerConfigContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityHandlerConfigContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AllowedAccessOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DeniedAccessOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SecurityHandlerObjectContract[] HandledObjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RespectProtectionDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AllowedAccessOperations {
            get {
                return this.AllowedAccessOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedAccessOperationsField, value) != true)) {
                    this.AllowedAccessOperationsField = value;
                    this.RaisePropertyChanged("AllowedAccessOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DeniedAccessOperations {
            get {
                return this.DeniedAccessOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.DeniedAccessOperationsField, value) != true)) {
                    this.DeniedAccessOperationsField = value;
                    this.RaisePropertyChanged("DeniedAccessOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EndDateField, value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SecurityHandlerObjectContract[] HandledObjects {
            get {
                return this.HandledObjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.HandledObjectsField, value) != true)) {
                    this.HandledObjectsField = value;
                    this.RaisePropertyChanged("HandledObjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RespectProtectionDomain {
            get {
                return this.RespectProtectionDomainField;
            }
            set {
                if ((this.RespectProtectionDomainField.Equals(value) != true)) {
                    this.RespectProtectionDomainField = value;
                    this.RaisePropertyChanged("RespectProtectionDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((object.ReferenceEquals(this.StartDateField, value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityHandlerObjectContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityHandlerObjectContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeId {
            get {
                return this.ObjectTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeIdField, value) != true)) {
                    this.ObjectTypeIdField = value;
                    this.RaisePropertyChanged("ObjectTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoreId {
            get {
                return this.StoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreIdField, value) != true)) {
                    this.StoreIdField = value;
                    this.RaisePropertyChanged("StoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnotationSettingsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AnnotationSettingsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreaColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoveringAreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StampTemplateContract[] TemplatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaColor {
            get {
                return this.AreaColorField;
            }
            set {
                if ((this.AreaColorField.Equals(value) != true)) {
                    this.AreaColorField = value;
                    this.RaisePropertyChanged("AreaColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoveringArea {
            get {
                return this.CoveringAreaField;
            }
            set {
                if ((this.CoveringAreaField.Equals(value) != true)) {
                    this.CoveringAreaField = value;
                    this.RaisePropertyChanged("CoveringArea");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StampTemplateContract[] Templates {
            get {
                return this.TemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplatesField, value) != true)) {
                    this.TemplatesField = value;
                    this.RaisePropertyChanged("Templates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StampTemplateContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StampTemplateContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColorBackgroundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FontBoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FontItalicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FontUnderlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColorBackground {
            get {
                return this.ColorBackgroundField;
            }
            set {
                if ((this.ColorBackgroundField.Equals(value) != true)) {
                    this.ColorBackgroundField = value;
                    this.RaisePropertyChanged("ColorBackground");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColorText {
            get {
                return this.ColorTextField;
            }
            set {
                if ((this.ColorTextField.Equals(value) != true)) {
                    this.ColorTextField = value;
                    this.RaisePropertyChanged("ColorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FontBold {
            get {
                return this.FontBoldField;
            }
            set {
                if ((this.FontBoldField.Equals(value) != true)) {
                    this.FontBoldField = value;
                    this.RaisePropertyChanged("FontBold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FontItalic {
            get {
                return this.FontItalicField;
            }
            set {
                if ((this.FontItalicField.Equals(value) != true)) {
                    this.FontItalicField = value;
                    this.RaisePropertyChanged("FontItalic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontName {
            get {
                return this.FontNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FontNameField, value) != true)) {
                    this.FontNameField = value;
                    this.RaisePropertyChanged("FontName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FontSize {
            get {
                return this.FontSizeField;
            }
            set {
                if ((this.FontSizeField.Equals(value) != true)) {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FontUnderline {
            get {
                return this.FontUnderlineField;
            }
            set {
                if ((this.FontUnderlineField.Equals(value) != true)) {
                    this.FontUnderlineField = value;
                    this.RaisePropertyChanged("FontUnderline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rotation {
            get {
                return this.RotationField;
            }
            set {
                if ((this.RotationField.Equals(value) != true)) {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateText {
            get {
                return this.TemplateTextField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateTextField, value) != true)) {
                    this.TemplateTextField = value;
                    this.RaisePropertyChanged("TemplateText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ImportParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultInfoStoreNameSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultInfoStoreNameTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GlobalSettingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultInfoStoreNameSource {
            get {
                return this.DefaultInfoStoreNameSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultInfoStoreNameSourceField, value) != true)) {
                    this.DefaultInfoStoreNameSourceField = value;
                    this.RaisePropertyChanged("DefaultInfoStoreNameSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultInfoStoreNameTarget {
            get {
                return this.DefaultInfoStoreNameTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultInfoStoreNameTargetField, value) != true)) {
                    this.DefaultInfoStoreNameTargetField = value;
                    this.RaisePropertyChanged("DefaultInfoStoreNameTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GlobalSettings {
            get {
                return this.GlobalSettingsField;
            }
            set {
                if ((this.GlobalSettingsField.Equals(value) != true)) {
                    this.GlobalSettingsField = value;
                    this.RaisePropertyChanged("GlobalSettings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticCounterConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StatisticCounterConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserScopeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterInterval {
            get {
                return this.CounterIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterIntervalField, value) != true)) {
                    this.CounterIntervalField = value;
                    this.RaisePropertyChanged("CounterInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterName {
            get {
                return this.CounterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNameField, value) != true)) {
                    this.CounterNameField = value;
                    this.RaisePropertyChanged("CounterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataScope {
            get {
                return this.DataScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataScopeField, value) != true)) {
                    this.DataScopeField = value;
                    this.RaisePropertyChanged("DataScope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserScope {
            get {
                return this.UserScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserScopeField, value) != true)) {
                    this.UserScopeField = value;
                    this.RaisePropertyChanged("UserScope");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticCounterFilterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StatisticCounterFilterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterInterval {
            get {
                return this.CounterIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterIntervalField, value) != true)) {
                    this.CounterIntervalField = value;
                    this.RaisePropertyChanged("CounterInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterName {
            get {
                return this.CounterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNameField, value) != true)) {
                    this.CounterNameField = value;
                    this.RaisePropertyChanged("CounterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((object.ReferenceEquals(this.FromDateField, value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToDate {
            get {
                return this.ToDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ToDateField, value) != true)) {
                    this.ToDateField = value;
                    this.RaisePropertyChanged("ToDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticCounterItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StatisticCounterItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterDate {
            get {
                return this.CounterDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterDateField, value) != true)) {
                    this.CounterDateField = value;
                    this.RaisePropertyChanged("CounterDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterInterval {
            get {
                return this.CounterIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterIntervalField, value) != true)) {
                    this.CounterIntervalField = value;
                    this.RaisePropertyChanged("CounterInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterName {
            get {
                return this.CounterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNameField, value) != true)) {
                    this.CounterNameField = value;
                    this.RaisePropertyChanged("CounterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataScope {
            get {
                return this.DataScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataScopeField, value) != true)) {
                    this.DataScopeField = value;
                    this.RaisePropertyChanged("DataScope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserScope {
            get {
                return this.UserScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserScopeField, value) != true)) {
                    this.UserScopeField = value;
                    this.RaisePropertyChanged("UserScope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticCounterDescriptionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StatisticCounterDescriptionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanHandleDataScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanHandleUserScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DisplayNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanHandleDataScope {
            get {
                return this.CanHandleDataScopeField;
            }
            set {
                if ((this.CanHandleDataScopeField.Equals(value) != true)) {
                    this.CanHandleDataScopeField = value;
                    this.RaisePropertyChanged("CanHandleDataScope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanHandleUserScope {
            get {
                return this.CanHandleUserScopeField;
            }
            set {
                if ((this.CanHandleUserScopeField.Equals(value) != true)) {
                    this.CanHandleUserScopeField = value;
                    this.RaisePropertyChanged("CanHandleUserScope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterName {
            get {
                return this.CounterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNameField, value) != true)) {
                    this.CounterNameField = value;
                    this.RaisePropertyChanged("CounterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AuditConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LogAdministrativeChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogAdministrativeChangesActivationDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LogAuthenticationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogAuthenticationActivationDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LogDocumentOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogDocumentOperationsActivationDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProtectFromDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectFromDeleteActivationDateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LogAdministrativeChanges {
            get {
                return this.LogAdministrativeChangesField;
            }
            set {
                if ((this.LogAdministrativeChangesField.Equals(value) != true)) {
                    this.LogAdministrativeChangesField = value;
                    this.RaisePropertyChanged("LogAdministrativeChanges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogAdministrativeChangesActivationDateTime {
            get {
                return this.LogAdministrativeChangesActivationDateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LogAdministrativeChangesActivationDateTimeField, value) != true)) {
                    this.LogAdministrativeChangesActivationDateTimeField = value;
                    this.RaisePropertyChanged("LogAdministrativeChangesActivationDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LogAuthentication {
            get {
                return this.LogAuthenticationField;
            }
            set {
                if ((this.LogAuthenticationField.Equals(value) != true)) {
                    this.LogAuthenticationField = value;
                    this.RaisePropertyChanged("LogAuthentication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogAuthenticationActivationDateTime {
            get {
                return this.LogAuthenticationActivationDateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LogAuthenticationActivationDateTimeField, value) != true)) {
                    this.LogAuthenticationActivationDateTimeField = value;
                    this.RaisePropertyChanged("LogAuthenticationActivationDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LogDocumentOperations {
            get {
                return this.LogDocumentOperationsField;
            }
            set {
                if ((this.LogDocumentOperationsField.Equals(value) != true)) {
                    this.LogDocumentOperationsField = value;
                    this.RaisePropertyChanged("LogDocumentOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogDocumentOperationsActivationDateTime {
            get {
                return this.LogDocumentOperationsActivationDateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LogDocumentOperationsActivationDateTimeField, value) != true)) {
                    this.LogDocumentOperationsActivationDateTimeField = value;
                    this.RaisePropertyChanged("LogDocumentOperationsActivationDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProtectFromDelete {
            get {
                return this.ProtectFromDeleteField;
            }
            set {
                if ((this.ProtectFromDeleteField.Equals(value) != true)) {
                    this.ProtectFromDeleteField = value;
                    this.RaisePropertyChanged("ProtectFromDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectFromDeleteActivationDateTime {
            get {
                return this.ProtectFromDeleteActivationDateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectFromDeleteActivationDateTimeField, value) != true)) {
                    this.ProtectFromDeleteActivationDateTimeField = value;
                    this.RaisePropertyChanged("ProtectFromDeleteActivationDateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.AbonnementContract[] AbonnementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.AnnotationManagerContract AnnotationManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.BlogContract[] BlogsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckOutStateEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckOutUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.DocumentDataContract[] DocumentDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasOverlayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoStoreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LifeCycleManagerContract LifeCycleManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MainFileLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ReminderContract[] RemindersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SigningProfileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.AbonnementContract[] Abonnements {
            get {
                return this.AbonnementsField;
            }
            set {
                if ((object.ReferenceEquals(this.AbonnementsField, value) != true)) {
                    this.AbonnementsField = value;
                    this.RaisePropertyChanged("Abonnements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnumList {
            get {
                return this.AccessRightsEnumListField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumListField, value) != true)) {
                    this.AccessRightsEnumListField = value;
                    this.RaisePropertyChanged("AccessRightsEnumList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.AnnotationManagerContract AnnotationManager {
            get {
                return this.AnnotationManagerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnnotationManagerField, value) != true)) {
                    this.AnnotationManagerField = value;
                    this.RaisePropertyChanged("AnnotationManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.BlogContract[] Blogs {
            get {
                return this.BlogsField;
            }
            set {
                if ((object.ReferenceEquals(this.BlogsField, value) != true)) {
                    this.BlogsField = value;
                    this.RaisePropertyChanged("Blogs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckOutStateEnum {
            get {
                return this.CheckOutStateEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckOutStateEnumField, value) != true)) {
                    this.CheckOutStateEnumField = value;
                    this.RaisePropertyChanged("CheckOutStateEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckOutUserId {
            get {
                return this.CheckOutUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckOutUserIdField, value) != true)) {
                    this.CheckOutUserIdField = value;
                    this.RaisePropertyChanged("CheckOutUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.DocumentDataContract[] DocumentData {
            get {
                return this.DocumentDataField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentDataField, value) != true)) {
                    this.DocumentDataField = value;
                    this.RaisePropertyChanged("DocumentData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasOverlay {
            get {
                return this.HasOverlayField;
            }
            set {
                if ((this.HasOverlayField.Equals(value) != true)) {
                    this.HasOverlayField = value;
                    this.RaisePropertyChanged("HasOverlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoStoreId {
            get {
                return this.InfoStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoStoreIdField, value) != true)) {
                    this.InfoStoreIdField = value;
                    this.RaisePropertyChanged("InfoStoreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LifeCycleManagerContract LifeCycleManager {
            get {
                return this.LifeCycleManagerField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleManagerField, value) != true)) {
                    this.LifeCycleManagerField = value;
                    this.RaisePropertyChanged("LifeCycleManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MainFileLength {
            get {
                return this.MainFileLengthField;
            }
            set {
                if ((this.MainFileLengthField.Equals(value) != true)) {
                    this.MainFileLengthField = value;
                    this.RaisePropertyChanged("MainFileLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ReminderContract[] Reminders {
            get {
                return this.RemindersField;
            }
            set {
                if ((object.ReferenceEquals(this.RemindersField, value) != true)) {
                    this.RemindersField = value;
                    this.RaisePropertyChanged("Reminders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SigningProfileId {
            get {
                return this.SigningProfileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SigningProfileIdField, value) != true)) {
                    this.SigningProfileIdField = value;
                    this.RaisePropertyChanged("SigningProfileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionId {
            get {
                return this.VersionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionIdField, value) != true)) {
                    this.VersionIdField = value;
                    this.RaisePropertyChanged("VersionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnotationManagerContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AnnotationManagerContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PostItAnnotationContract[] PostItAnnotationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.RectangleAnnotationContract[] RectangleAnnotationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StampAnnotationContract[] StampAnnotationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TextAnnotationContract[] TextAnnotationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PostItAnnotationContract[] PostItAnnotations {
            get {
                return this.PostItAnnotationsField;
            }
            set {
                if ((object.ReferenceEquals(this.PostItAnnotationsField, value) != true)) {
                    this.PostItAnnotationsField = value;
                    this.RaisePropertyChanged("PostItAnnotations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.RectangleAnnotationContract[] RectangleAnnotations {
            get {
                return this.RectangleAnnotationsField;
            }
            set {
                if ((object.ReferenceEquals(this.RectangleAnnotationsField, value) != true)) {
                    this.RectangleAnnotationsField = value;
                    this.RaisePropertyChanged("RectangleAnnotations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StampAnnotationContract[] StampAnnotations {
            get {
                return this.StampAnnotationsField;
            }
            set {
                if ((object.ReferenceEquals(this.StampAnnotationsField, value) != true)) {
                    this.StampAnnotationsField = value;
                    this.RaisePropertyChanged("StampAnnotations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TextAnnotationContract[] TextAnnotations {
            get {
                return this.TextAnnotationsField;
            }
            set {
                if ((object.ReferenceEquals(this.TextAnnotationsField, value) != true)) {
                    this.TextAnnotationsField = value;
                    this.RaisePropertyChanged("TextAnnotations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LifeCycleManagerContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LifeCycleManagerContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckOutLifeCycleStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LifeCycleEndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LifeCycleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LifeCycleStateProtectionContract[] LifeCycleProtectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LifeCycleStartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LifeCycleStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextAutomaticLifeCycleStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] NextLifeCycleStatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckOutLifeCycleStateId {
            get {
                return this.CheckOutLifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckOutLifeCycleStateIdField, value) != true)) {
                    this.CheckOutLifeCycleStateIdField = value;
                    this.RaisePropertyChanged("CheckOutLifeCycleStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LifeCycleEndDate {
            get {
                return this.LifeCycleEndDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleEndDateField, value) != true)) {
                    this.LifeCycleEndDateField = value;
                    this.RaisePropertyChanged("LifeCycleEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LifeCycleId {
            get {
                return this.LifeCycleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleIdField, value) != true)) {
                    this.LifeCycleIdField = value;
                    this.RaisePropertyChanged("LifeCycleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LifeCycleStateProtectionContract[] LifeCycleProtections {
            get {
                return this.LifeCycleProtectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleProtectionsField, value) != true)) {
                    this.LifeCycleProtectionsField = value;
                    this.RaisePropertyChanged("LifeCycleProtections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LifeCycleStartDate {
            get {
                return this.LifeCycleStartDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleStartDateField, value) != true)) {
                    this.LifeCycleStartDateField = value;
                    this.RaisePropertyChanged("LifeCycleStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LifeCycleStateId {
            get {
                return this.LifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LifeCycleStateIdField, value) != true)) {
                    this.LifeCycleStateIdField = value;
                    this.RaisePropertyChanged("LifeCycleStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextAutomaticLifeCycleStateId {
            get {
                return this.NextAutomaticLifeCycleStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NextAutomaticLifeCycleStateIdField, value) != true)) {
                    this.NextAutomaticLifeCycleStateIdField = value;
                    this.RaisePropertyChanged("NextAutomaticLifeCycleStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] NextLifeCycleStates {
            get {
                return this.NextLifeCycleStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.NextLifeCycleStatesField, value) != true)) {
                    this.NextLifeCycleStatesField = value;
                    this.RaisePropertyChanged("NextLifeCycleStates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbonnementContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AbonnementContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnContentChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnMetadataChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnContentChange {
            get {
                return this.OnContentChangeField;
            }
            set {
                if ((this.OnContentChangeField.Equals(value) != true)) {
                    this.OnContentChangeField = value;
                    this.RaisePropertyChanged("OnContentChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnDelete {
            get {
                return this.OnDeleteField;
            }
            set {
                if ((this.OnDeleteField.Equals(value) != true)) {
                    this.OnDeleteField = value;
                    this.RaisePropertyChanged("OnDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnMetadataChange {
            get {
                return this.OnMetadataChangeField;
            }
            set {
                if ((this.OnMetadataChangeField.Equals(value) != true)) {
                    this.OnMetadataChangeField = value;
                    this.RaisePropertyChanged("OnMetadataChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlogContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class BlogContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentDataContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.RenditionContract[] RenditionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.RenditionContract[] Renditions {
            get {
                return this.RenditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RenditionsField, value) != true)) {
                    this.RenditionsField = value;
                    this.RaisePropertyChanged("Renditions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReminderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ReminderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReminderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReminderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SubjectIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseUserFromProcessTemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessTemplateId {
            get {
                return this.ProcessTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTemplateIdField, value) != true)) {
                    this.ProcessTemplateIdField = value;
                    this.RaisePropertyChanged("ProcessTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReminderDate {
            get {
                return this.ReminderDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ReminderDateField, value) != true)) {
                    this.ReminderDateField = value;
                    this.RaisePropertyChanged("ReminderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReminderId {
            get {
                return this.ReminderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReminderIdField, value) != true)) {
                    this.ReminderIdField = value;
                    this.RaisePropertyChanged("ReminderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SubjectIds {
            get {
                return this.SubjectIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectIdsField, value) != true)) {
                    this.SubjectIdsField = value;
                    this.RaisePropertyChanged("SubjectIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseUserFromProcessTemplate {
            get {
                return this.UseUserFromProcessTemplateField;
            }
            set {
                if ((this.UseUserFromProcessTemplateField.Equals(value) != true)) {
                    this.UseUserFromProcessTemplateField = value;
                    this.RaisePropertyChanged("UseUserFromProcessTemplate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostItAnnotationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class PostItAnnotationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FontInfoContract FontInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityLevelEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FontInfoContract FontInfo {
            get {
                return this.FontInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.FontInfoField, value) != true)) {
                    this.FontInfoField = value;
                    this.RaisePropertyChanged("FontInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityLevelEnum {
            get {
                return this.SecurityLevelEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityLevelEnumField, value) != true)) {
                    this.SecurityLevelEnumField = value;
                    this.RaisePropertyChanged("SecurityLevelEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selectable {
            get {
                return this.SelectableField;
            }
            set {
                if ((this.SelectableField.Equals(value) != true)) {
                    this.SelectableField = value;
                    this.RaisePropertyChanged("Selectable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RectangleAnnotationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RectangleAnnotationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityLevelEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TransparentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityLevelEnum {
            get {
                return this.SecurityLevelEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityLevelEnumField, value) != true)) {
                    this.SecurityLevelEnumField = value;
                    this.RaisePropertyChanged("SecurityLevelEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selectable {
            get {
                return this.SelectableField;
            }
            set {
                if ((this.SelectableField.Equals(value) != true)) {
                    this.SelectableField = value;
                    this.RaisePropertyChanged("Selectable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Transparent {
            get {
                return this.TransparentField;
            }
            set {
                if ((this.TransparentField.Equals(value) != true)) {
                    this.TransparentField = value;
                    this.RaisePropertyChanged("Transparent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StampAnnotationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class StampAnnotationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BackgroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FontInfoContract FontInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ForegroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityLevelEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TransparentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BackgroundColor {
            get {
                return this.BackgroundColorField;
            }
            set {
                if ((this.BackgroundColorField.Equals(value) != true)) {
                    this.BackgroundColorField = value;
                    this.RaisePropertyChanged("BackgroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FontInfoContract FontInfo {
            get {
                return this.FontInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.FontInfoField, value) != true)) {
                    this.FontInfoField = value;
                    this.RaisePropertyChanged("FontInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ForegroundColor {
            get {
                return this.ForegroundColorField;
            }
            set {
                if ((this.ForegroundColorField.Equals(value) != true)) {
                    this.ForegroundColorField = value;
                    this.RaisePropertyChanged("ForegroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rotation {
            get {
                return this.RotationField;
            }
            set {
                if ((this.RotationField.Equals(value) != true)) {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityLevelEnum {
            get {
                return this.SecurityLevelEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityLevelEnumField, value) != true)) {
                    this.SecurityLevelEnumField = value;
                    this.RaisePropertyChanged("SecurityLevelEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selectable {
            get {
                return this.SelectableField;
            }
            set {
                if ((this.SelectableField.Equals(value) != true)) {
                    this.SelectableField = value;
                    this.RaisePropertyChanged("Selectable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Transparent {
            get {
                return this.TransparentField;
            }
            set {
                if ((this.TransparentField.Equals(value) != true)) {
                    this.TransparentField = value;
                    this.RaisePropertyChanged("Transparent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextAnnotationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TextAnnotationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BackgroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FontInfoContract FontInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ForegroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityLevelEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TransparentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BackgroundColor {
            get {
                return this.BackgroundColorField;
            }
            set {
                if ((this.BackgroundColorField.Equals(value) != true)) {
                    this.BackgroundColorField = value;
                    this.RaisePropertyChanged("BackgroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FontInfoContract FontInfo {
            get {
                return this.FontInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.FontInfoField, value) != true)) {
                    this.FontInfoField = value;
                    this.RaisePropertyChanged("FontInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ForegroundColor {
            get {
                return this.ForegroundColorField;
            }
            set {
                if ((this.ForegroundColorField.Equals(value) != true)) {
                    this.ForegroundColorField = value;
                    this.RaisePropertyChanged("ForegroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rotation {
            get {
                return this.RotationField;
            }
            set {
                if ((this.RotationField.Equals(value) != true)) {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityLevelEnum {
            get {
                return this.SecurityLevelEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityLevelEnumField, value) != true)) {
                    this.SecurityLevelEnumField = value;
                    this.RaisePropertyChanged("SecurityLevelEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selectable {
            get {
                return this.SelectableField;
            }
            set {
                if ((this.SelectableField.Equals(value) != true)) {
                    this.SelectableField = value;
                    this.RaisePropertyChanged("Selectable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Transparent {
            get {
                return this.TransparentField;
            }
            set {
                if ((this.TransparentField.Equals(value) != true)) {
                    this.TransparentField = value;
                    this.RaisePropertyChanged("Transparent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FontInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FontInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsItalicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStrikeOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnderlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsItalic {
            get {
                return this.IsItalicField;
            }
            set {
                if ((this.IsItalicField.Equals(value) != true)) {
                    this.IsItalicField = value;
                    this.RaisePropertyChanged("IsItalic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStrikeOut {
            get {
                return this.IsStrikeOutField;
            }
            set {
                if ((this.IsStrikeOutField.Equals(value) != true)) {
                    this.IsStrikeOutField = value;
                    this.RaisePropertyChanged("IsStrikeOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnderline {
            get {
                return this.IsUnderlineField;
            }
            set {
                if ((this.IsUnderlineField.Equals(value) != true)) {
                    this.IsUnderlineField = value;
                    this.RaisePropertyChanged("IsUnderline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Pitch {
            get {
                return this.PitchField;
            }
            set {
                if ((this.PitchField.Equals(value) != true)) {
                    this.PitchField = value;
                    this.RaisePropertyChanged("Pitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenditionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RenditionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ContentProtectionContract[] ContentProtectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.BlobContract[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] HashValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ContentProtectionContract[] ContentProtections {
            get {
                return this.ContentProtectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentProtectionsField, value) != true)) {
                    this.ContentProtectionsField = value;
                    this.RaisePropertyChanged("ContentProtections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.BlobContract[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] HashValue {
            get {
                return this.HashValueField;
            }
            set {
                if ((object.ReferenceEquals(this.HashValueField, value) != true)) {
                    this.HashValueField = value;
                    this.RaisePropertyChanged("HashValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentProtectionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ContentProtectionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.BlobContract[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.BlobContract[] ReportFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SigningInfoContract[] SigningInfosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.BlobContract[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.BlobContract[] ReportFiles {
            get {
                return this.ReportFilesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportFilesField, value) != true)) {
                    this.ReportFilesField = value;
                    this.RaisePropertyChanged("ReportFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportName {
            get {
                return this.ReportNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportNameField, value) != true)) {
                    this.ReportNameField = value;
                    this.RaisePropertyChanged("ReportName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SigningInfoContract[] SigningInfos {
            get {
                return this.SigningInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.SigningInfosField, value) != true)) {
                    this.SigningInfosField = value;
                    this.RaisePropertyChanged("SigningInfos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlobContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class BlobContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlobPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlobStoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlobPath {
            get {
                return this.BlobPathField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobPathField, value) != true)) {
                    this.BlobPathField = value;
                    this.RaisePropertyChanged("BlobPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlobStoreId {
            get {
                return this.BlobStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobStoreIdField, value) != true)) {
                    this.BlobStoreIdField = value;
                    this.RaisePropertyChanged("BlobStoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SigningInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SigningInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CertificateVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssuerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureAlgorithmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidFromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidToDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CertificateVersion {
            get {
                return this.CertificateVersionField;
            }
            set {
                if ((this.CertificateVersionField.Equals(value) != true)) {
                    this.CertificateVersionField = value;
                    this.RaisePropertyChanged("CertificateVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssuerName {
            get {
                return this.IssuerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerNameField, value) != true)) {
                    this.IssuerNameField = value;
                    this.RaisePropertyChanged("IssuerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignDate {
            get {
                return this.SignDateField;
            }
            set {
                if ((object.ReferenceEquals(this.SignDateField, value) != true)) {
                    this.SignDateField = value;
                    this.RaisePropertyChanged("SignDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignatureAlgorithm {
            get {
                return this.SignatureAlgorithmField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureAlgorithmField, value) != true)) {
                    this.SignatureAlgorithmField = value;
                    this.RaisePropertyChanged("SignatureAlgorithm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectName {
            get {
                return this.SubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectNameField, value) != true)) {
                    this.SubjectNameField = value;
                    this.RaisePropertyChanged("SubjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidFromDate {
            get {
                return this.ValidFromDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidFromDateField, value) != true)) {
                    this.ValidFromDateField = value;
                    this.RaisePropertyChanged("ValidFromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidToDate {
            get {
                return this.ValidToDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidToDateField, value) != true)) {
                    this.ValidToDateField = value;
                    this.RaisePropertyChanged("ValidToDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentFileParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentFileParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.DocumentDataParameterContract[] DocumentDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.DocumentDataParameterContract[] DocumentData {
            get {
                return this.DocumentDataField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentDataField, value) != true)) {
                    this.DocumentDataField = value;
                    this.RaisePropertyChanged("DocumentData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentDataParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentDataParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FileParameterContract[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateActionEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FileParameterContract[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateActionEnum {
            get {
                return this.UpdateActionEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateActionEnumField, value) != true)) {
                    this.UpdateActionEnumField = value;
                    this.RaisePropertyChanged("UpdateActionEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FileParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentProtectionFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentProtectionFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentProtectionReportFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentProtectionReportFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FileReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] HashValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RenditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract SignatureProfileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateActionEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateId {
            get {
                return this.CertificateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateIdField, value) != true)) {
                    this.CertificateIdField = value;
                    this.RaisePropertyChanged("CertificateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentProtectionFileId {
            get {
                return this.ContentProtectionFileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentProtectionFileIdField, value) != true)) {
                    this.ContentProtectionFileIdField = value;
                    this.RaisePropertyChanged("ContentProtectionFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentProtectionFileName {
            get {
                return this.ContentProtectionFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentProtectionFileNameField, value) != true)) {
                    this.ContentProtectionFileNameField = value;
                    this.RaisePropertyChanged("ContentProtectionFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentProtectionReportFileId {
            get {
                return this.ContentProtectionReportFileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentProtectionReportFileIdField, value) != true)) {
                    this.ContentProtectionReportFileIdField = value;
                    this.RaisePropertyChanged("ContentProtectionReportFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentProtectionReportFileName {
            get {
                return this.ContentProtectionReportFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentProtectionReportFileNameField, value) != true)) {
                    this.ContentProtectionReportFileNameField = value;
                    this.RaisePropertyChanged("ContentProtectionReportFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileId {
            get {
                return this.FileIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FileIdField, value) != true)) {
                    this.FileIdField = value;
                    this.RaisePropertyChanged("FileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FileReference {
            get {
                return this.FileReferenceField;
            }
            set {
                if ((this.FileReferenceField.Equals(value) != true)) {
                    this.FileReferenceField = value;
                    this.RaisePropertyChanged("FileReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] HashValue {
            get {
                return this.HashValueField;
            }
            set {
                if ((object.ReferenceEquals(this.HashValueField, value) != true)) {
                    this.HashValueField = value;
                    this.RaisePropertyChanged("HashValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RenditionId {
            get {
                return this.RenditionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RenditionIdField, value) != true)) {
                    this.RenditionIdField = value;
                    this.RaisePropertyChanged("RenditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract SignatureProfileName {
            get {
                return this.SignatureProfileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureProfileNameField, value) != true)) {
                    this.SignatureProfileNameField = value;
                    this.RaisePropertyChanged("SignatureProfileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignatureTypeEnum {
            get {
                return this.SignatureTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureTypeEnumField, value) != true)) {
                    this.SignatureTypeEnumField = value;
                    this.RaisePropertyChanged("SignatureTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateActionEnum {
            get {
                return this.UpdateActionEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateActionEnumField, value) != true)) {
                    this.UpdateActionEnumField = value;
                    this.RaisePropertyChanged("UpdateActionEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateDocumentOptionsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CreateDocumentOptionsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CreateAsSAPDocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MergePropertiesIntoDocumentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreateAsSAPDocument {
            get {
                return this.CreateAsSAPDocumentField;
            }
            set {
                if ((this.CreateAsSAPDocumentField.Equals(value) != true)) {
                    this.CreateAsSAPDocumentField = value;
                    this.RaisePropertyChanged("CreateAsSAPDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MergePropertiesIntoDocument {
            get {
                return this.MergePropertiesIntoDocumentField;
            }
            set {
                if ((this.MergePropertiesIntoDocumentField.Equals(value) != true)) {
                    this.MergePropertiesIntoDocumentField = value;
                    this.RaisePropertyChanged("MergePropertiesIntoDocument");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessLogItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AccessLogItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModificationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessTypeEnum {
            get {
                return this.AccessTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessTypeEnumField, value) != true)) {
                    this.AccessTypeEnumField = value;
                    this.RaisePropertyChanged("AccessTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModificationCount {
            get {
                return this.ModificationCountField;
            }
            set {
                if ((this.ModificationCountField.Equals(value) != true)) {
                    this.ModificationCountField = value;
                    this.RaisePropertyChanged("ModificationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangeLogItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ChangeLogItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModificationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionModificationTypeEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModificationCount {
            get {
                return this.ModificationCountField;
            }
            set {
                if ((this.ModificationCountField.Equals(value) != true)) {
                    this.ModificationCountField = value;
                    this.RaisePropertyChanged("ModificationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionModificationTypeEnum {
            get {
                return this.VersionModificationTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionModificationTypeEnumField, value) != true)) {
                    this.VersionModificationTypeEnumField = value;
                    this.RaisePropertyChanged("VersionModificationTypeEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class VersionItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModificationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionModificationTypeEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalName {
            get {
                return this.InternalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalNameField, value) != true)) {
                    this.InternalNameField = value;
                    this.RaisePropertyChanged("InternalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModificationCount {
            get {
                return this.ModificationCountField;
            }
            set {
                if ((this.ModificationCountField.Equals(value) != true)) {
                    this.ModificationCountField = value;
                    this.RaisePropertyChanged("ModificationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionModificationTypeEnum {
            get {
                return this.VersionModificationTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionModificationTypeEnumField, value) != true)) {
                    this.VersionModificationTypeEnumField = value;
                    this.RaisePropertyChanged("VersionModificationTypeEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckInParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CheckInParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MergePropertiesIntoDocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OverwriteVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReleaseReservationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UpdateToSAPDocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MergePropertiesIntoDocument {
            get {
                return this.MergePropertiesIntoDocumentField;
            }
            set {
                if ((this.MergePropertiesIntoDocumentField.Equals(value) != true)) {
                    this.MergePropertiesIntoDocumentField = value;
                    this.RaisePropertyChanged("MergePropertiesIntoDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OverwriteVersion {
            get {
                return this.OverwriteVersionField;
            }
            set {
                if ((this.OverwriteVersionField.Equals(value) != true)) {
                    this.OverwriteVersionField = value;
                    this.RaisePropertyChanged("OverwriteVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReleaseReservation {
            get {
                return this.ReleaseReservationField;
            }
            set {
                if ((this.ReleaseReservationField.Equals(value) != true)) {
                    this.ReleaseReservationField = value;
                    this.RaisePropertyChanged("ReleaseReservation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UpdateToSAPDocument {
            get {
                return this.UpdateToSAPDocumentField;
            }
            set {
                if ((this.UpdateToSAPDocumentField.Equals(value) != true)) {
                    this.UpdateToSAPDocumentField = value;
                    this.RaisePropertyChanged("UpdateToSAPDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LinkInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsParentLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkTargetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsParentLink {
            get {
                return this.IsParentLinkField;
            }
            set {
                if ((this.IsParentLinkField.Equals(value) != true)) {
                    this.IsParentLinkField = value;
                    this.RaisePropertyChanged("IsParentLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LinkTargetId {
            get {
                return this.LinkTargetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkTargetIdField, value) != true)) {
                    this.LinkTargetIdField = value;
                    this.RaisePropertyChanged("LinkTargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeEnum {
            get {
                return this.ObjectTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeEnumField, value) != true)) {
                    this.ObjectTypeEnumField = value;
                    this.RaisePropertyChanged("ObjectTypeEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentShareContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DocumentShareContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SecurityHandlerDocumentContract[] SecurityHandlerDocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempAccessDefinitionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SecurityHandlerDocumentContract[] SecurityHandlerDocuments {
            get {
                return this.SecurityHandlerDocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityHandlerDocumentsField, value) != true)) {
                    this.SecurityHandlerDocumentsField = value;
                    this.RaisePropertyChanged("SecurityHandlerDocuments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectIdField, value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempAccessDefinitionName {
            get {
                return this.TempAccessDefinitionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TempAccessDefinitionNameField, value) != true)) {
                    this.TempAccessDefinitionNameField = value;
                    this.RaisePropertyChanged("TempAccessDefinitionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityHandlerDocumentContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityHandlerDocumentContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AllowedAccessOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastChangeUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SearchableObjectIdContract[] SearchableObjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AllowedAccessOperations {
            get {
                return this.AllowedAccessOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedAccessOperationsField, value) != true)) {
                    this.AllowedAccessOperationsField = value;
                    this.RaisePropertyChanged("AllowedAccessOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateDateField, value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorUser {
            get {
                return this.CreatorUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorUserField, value) != true)) {
                    this.CreatorUserField = value;
                    this.RaisePropertyChanged("CreatorUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EndDateField, value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastChangeDate {
            get {
                return this.LastChangeDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastChangeDateField, value) != true)) {
                    this.LastChangeDateField = value;
                    this.RaisePropertyChanged("LastChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastChangeUser {
            get {
                return this.LastChangeUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LastChangeUserField, value) != true)) {
                    this.LastChangeUserField = value;
                    this.RaisePropertyChanged("LastChangeUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SearchableObjectIdContract[] SearchableObjects {
            get {
                return this.SearchableObjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchableObjectsField, value) != true)) {
                    this.SearchableObjectsField = value;
                    this.RaisePropertyChanged("SearchableObjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((object.ReferenceEquals(this.StartDateField, value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchableObjectIdContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchableObjectIdContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeId {
            get {
                return this.ObjectTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeIdField, value) != true)) {
                    this.ObjectTypeIdField = value;
                    this.RaisePropertyChanged("ObjectTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoreId {
            get {
                return this.StoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreIdField, value) != true)) {
                    this.StoreIdField = value;
                    this.RaisePropertyChanged("StoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConvertingOptionsContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ConvertingOptionsContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddAnnotatinsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AddOverlayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PreferImageRenderingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetFormatField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddAnnotatins {
            get {
                return this.AddAnnotatinsField;
            }
            set {
                if ((this.AddAnnotatinsField.Equals(value) != true)) {
                    this.AddAnnotatinsField = value;
                    this.RaisePropertyChanged("AddAnnotatins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AddOverlay {
            get {
                return this.AddOverlayField;
            }
            set {
                if ((this.AddOverlayField.Equals(value) != true)) {
                    this.AddOverlayField = value;
                    this.RaisePropertyChanged("AddOverlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndPage {
            get {
                return this.EndPageField;
            }
            set {
                if ((this.EndPageField.Equals(value) != true)) {
                    this.EndPageField = value;
                    this.RaisePropertyChanged("EndPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreferImageRendering {
            get {
                return this.PreferImageRenderingField;
            }
            set {
                if ((this.PreferImageRenderingField.Equals(value) != true)) {
                    this.PreferImageRenderingField = value;
                    this.RaisePropertyChanged("PreferImageRendering");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartPage {
            get {
                return this.StartPageField;
            }
            set {
                if ((this.StartPageField.Equals(value) != true)) {
                    this.StartPageField = value;
                    this.RaisePropertyChanged("StartPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetFormat {
            get {
                return this.TargetFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetFormatField, value) != true)) {
                    this.TargetFormatField = value;
                    this.RaisePropertyChanged("TargetFormat");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProcessContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.CommentContract[] CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompletedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskContract[] CompletedTasksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TaskContract CurrentTaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.CustomPropertyContract[] CustomPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DocumentIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PluginStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusEnumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnumList {
            get {
                return this.AccessRightsEnumListField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumListField, value) != true)) {
                    this.AccessRightsEnumListField = value;
                    this.RaisePropertyChanged("AccessRightsEnumList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.CommentContract[] Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompletedDate {
            get {
                return this.CompletedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CompletedDateField, value) != true)) {
                    this.CompletedDateField = value;
                    this.RaisePropertyChanged("CompletedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskContract[] CompletedTasks {
            get {
                return this.CompletedTasksField;
            }
            set {
                if ((object.ReferenceEquals(this.CompletedTasksField, value) != true)) {
                    this.CompletedTasksField = value;
                    this.RaisePropertyChanged("CompletedTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TaskContract CurrentTask {
            get {
                return this.CurrentTaskField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentTaskField, value) != true)) {
                    this.CurrentTaskField = value;
                    this.RaisePropertyChanged("CurrentTask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.CustomPropertyContract[] CustomProperties {
            get {
                return this.CustomPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertiesField, value) != true)) {
                    this.CustomPropertiesField = value;
                    this.RaisePropertyChanged("CustomProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DocumentIds {
            get {
                return this.DocumentIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentIdsField, value) != true)) {
                    this.DocumentIdsField = value;
                    this.RaisePropertyChanged("DocumentIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.DueDateField, value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PluginStream {
            get {
                return this.PluginStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.PluginStreamField, value) != true)) {
                    this.PluginStreamField = value;
                    this.RaisePropertyChanged("PluginStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityEnum {
            get {
                return this.PriorityEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityEnumField, value) != true)) {
                    this.PriorityEnumField = value;
                    this.RaisePropertyChanged("PriorityEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessTemplateId {
            get {
                return this.ProcessTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessTemplateIdField, value) != true)) {
                    this.ProcessTemplateIdField = value;
                    this.RaisePropertyChanged("ProcessTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusEnum {
            get {
                return this.StatusEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusEnumField, value) != true)) {
                    this.StatusEnumField = value;
                    this.RaisePropertyChanged("StatusEnum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TaskContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssignedUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.CommentContract[] CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompletedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] CompletedUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReminderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiresAllRecipientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowCloseTaskDialogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskTemplateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssignedUserIds {
            get {
                return this.AssignedUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedUserIdsField, value) != true)) {
                    this.AssignedUserIdsField = value;
                    this.RaisePropertyChanged("AssignedUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.CommentContract[] Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompletedDate {
            get {
                return this.CompletedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CompletedDateField, value) != true)) {
                    this.CompletedDateField = value;
                    this.RaisePropertyChanged("CompletedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] CompletedUserIds {
            get {
                return this.CompletedUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.CompletedUserIdsField, value) != true)) {
                    this.CompletedUserIdsField = value;
                    this.RaisePropertyChanged("CompletedUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorIdField, value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.DueDateField, value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReminderDate {
            get {
                return this.ReminderDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ReminderDateField, value) != true)) {
                    this.ReminderDateField = value;
                    this.RaisePropertyChanged("ReminderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiresAllRecipients {
            get {
                return this.RequiresAllRecipientsField;
            }
            set {
                if ((this.RequiresAllRecipientsField.Equals(value) != true)) {
                    this.RequiresAllRecipientsField = value;
                    this.RaisePropertyChanged("RequiresAllRecipients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowCloseTaskDialog {
            get {
                return this.ShowCloseTaskDialogField;
            }
            set {
                if ((this.ShowCloseTaskDialogField.Equals(value) != true)) {
                    this.ShowCloseTaskDialogField = value;
                    this.RaisePropertyChanged("ShowCloseTaskDialog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusEnum {
            get {
                return this.StatusEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusEnumField, value) != true)) {
                    this.StatusEnumField = value;
                    this.RaisePropertyChanged("StatusEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTemplateId {
            get {
                return this.TaskTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTemplateIdField, value) != true)) {
                    this.TaskTemplateIdField = value;
                    this.RaisePropertyChanged("TaskTemplateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommentContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class CommentContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessUserTaskParameterContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ProcessUserTaskParameterContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AreOnlyUserGroupsFromAvailableUserGroupsAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssignedGroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssignedUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AvailableGroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AvailableUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EscalateGroupIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EscalateUserIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsChangeOfUsersAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessDueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskDueDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AreOnlyUserGroupsFromAvailableUserGroupsAllowed {
            get {
                return this.AreOnlyUserGroupsFromAvailableUserGroupsAllowedField;
            }
            set {
                if ((this.AreOnlyUserGroupsFromAvailableUserGroupsAllowedField.Equals(value) != true)) {
                    this.AreOnlyUserGroupsFromAvailableUserGroupsAllowedField = value;
                    this.RaisePropertyChanged("AreOnlyUserGroupsFromAvailableUserGroupsAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssignedGroupIds {
            get {
                return this.AssignedGroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedGroupIdsField, value) != true)) {
                    this.AssignedGroupIdsField = value;
                    this.RaisePropertyChanged("AssignedGroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssignedUserIds {
            get {
                return this.AssignedUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedUserIdsField, value) != true)) {
                    this.AssignedUserIdsField = value;
                    this.RaisePropertyChanged("AssignedUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AvailableGroupIds {
            get {
                return this.AvailableGroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableGroupIdsField, value) != true)) {
                    this.AvailableGroupIdsField = value;
                    this.RaisePropertyChanged("AvailableGroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AvailableUserIds {
            get {
                return this.AvailableUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableUserIdsField, value) != true)) {
                    this.AvailableUserIdsField = value;
                    this.RaisePropertyChanged("AvailableUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EscalateGroupIds {
            get {
                return this.EscalateGroupIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalateGroupIdsField, value) != true)) {
                    this.EscalateGroupIdsField = value;
                    this.RaisePropertyChanged("EscalateGroupIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EscalateUserIds {
            get {
                return this.EscalateUserIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.EscalateUserIdsField, value) != true)) {
                    this.EscalateUserIdsField = value;
                    this.RaisePropertyChanged("EscalateUserIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsChangeOfUsersAllowed {
            get {
                return this.IsChangeOfUsersAllowedField;
            }
            set {
                if ((this.IsChangeOfUsersAllowedField.Equals(value) != true)) {
                    this.IsChangeOfUsersAllowedField = value;
                    this.RaisePropertyChanged("IsChangeOfUsersAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessDueDate {
            get {
                return this.ProcessDueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDueDateField, value) != true)) {
                    this.ProcessDueDateField = value;
                    this.RaisePropertyChanged("ProcessDueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestType {
            get {
                return this.RequestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTypeField, value) != true)) {
                    this.RequestTypeField = value;
                    this.RaisePropertyChanged("RequestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskDueDate {
            get {
                return this.TaskDueDateField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskDueDateField, value) != true)) {
                    this.TaskDueDateField = value;
                    this.RaisePropertyChanged("TaskDueDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FolderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationResolvedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.DocumentSimpleContract[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ProcessSimpleContract[] ProcessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SubFolderContract[] SearchFoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SubFolderContract[] SubFoldersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnum {
            get {
                return this.AccessRightsEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumField, value) != true)) {
                    this.AccessRightsEnumField = value;
                    this.RaisePropertyChanged("AccessRightsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfiguration {
            get {
                return this.ColumnConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationField, value) != true)) {
                    this.ColumnConfigurationField = value;
                    this.RaisePropertyChanged("ColumnConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationResolved {
            get {
                return this.ColumnConfigurationResolvedField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationResolvedField, value) != true)) {
                    this.ColumnConfigurationResolvedField = value;
                    this.RaisePropertyChanged("ColumnConfigurationResolved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.DocumentSimpleContract[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ProcessSimpleContract[] Processes {
            get {
                return this.ProcessesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessesField, value) != true)) {
                    this.ProcessesField = value;
                    this.RaisePropertyChanged("Processes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SubFolderContract[] SearchFolders {
            get {
                return this.SearchFoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchFoldersField, value) != true)) {
                    this.SearchFoldersField = value;
                    this.RaisePropertyChanged("SearchFolders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SubFolderContract[] SubFolders {
            get {
                return this.SubFoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFoldersField, value) != true)) {
                    this.SubFoldersField = value;
                    this.RaisePropertyChanged("SubFolders");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubFolderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SubFolderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract PathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeEnum {
            get {
                return this.ObjectTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeEnumField, value) != true)) {
                    this.ObjectTypeEnumField = value;
                    this.RaisePropertyChanged("ObjectTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchFolderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchFolderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationResolvedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FulltextSearchVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSimpleSearchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.FolderPathContract PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SearchConditionConfigurationContract[] SearchConditionConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SearchDefinitionContract SearchDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StoreSelectionVisibleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnum {
            get {
                return this.AccessRightsEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumField, value) != true)) {
                    this.AccessRightsEnumField = value;
                    this.RaisePropertyChanged("AccessRightsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfiguration {
            get {
                return this.ColumnConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationField, value) != true)) {
                    this.ColumnConfigurationField = value;
                    this.RaisePropertyChanged("ColumnConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationResolved {
            get {
                return this.ColumnConfigurationResolvedField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationResolvedField, value) != true)) {
                    this.ColumnConfigurationResolvedField = value;
                    this.RaisePropertyChanged("ColumnConfigurationResolved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FulltextSearchVisible {
            get {
                return this.FulltextSearchVisibleField;
            }
            set {
                if ((this.FulltextSearchVisibleField.Equals(value) != true)) {
                    this.FulltextSearchVisibleField = value;
                    this.RaisePropertyChanged("FulltextSearchVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSimpleSearch {
            get {
                return this.IsSimpleSearchField;
            }
            set {
                if ((this.IsSimpleSearchField.Equals(value) != true)) {
                    this.IsSimpleSearchField = value;
                    this.RaisePropertyChanged("IsSimpleSearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.FolderPathContract Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SearchConditionConfigurationContract[] SearchConditionConfiguration {
            get {
                return this.SearchConditionConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchConditionConfigurationField, value) != true)) {
                    this.SearchConditionConfigurationField = value;
                    this.RaisePropertyChanged("SearchConditionConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SearchDefinitionContract SearchDefinition {
            get {
                return this.SearchDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchDefinitionField, value) != true)) {
                    this.SearchDefinitionField = value;
                    this.RaisePropertyChanged("SearchDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StoreSelectionVisible {
            get {
                return this.StoreSelectionVisibleField;
            }
            set {
                if ((this.StoreSelectionVisibleField.Equals(value) != true)) {
                    this.StoreSelectionVisibleField = value;
                    this.RaisePropertyChanged("StoreSelectionVisible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchConditionConfigurationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SearchConditionConfigurationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.StringGlobalContract DisplayTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceHolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VisibleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.StringGlobalContract DisplayText {
            get {
                return this.DisplayTextField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayTextField, value) != true)) {
                    this.DisplayTextField = value;
                    this.RaisePropertyChanged("DisplayText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Editable {
            get {
                return this.EditableField;
            }
            set {
                if ((this.EditableField.Equals(value) != true)) {
                    this.EditableField = value;
                    this.RaisePropertyChanged("Editable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaceHolder {
            get {
                return this.PlaceHolderField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceHolderField, value) != true)) {
                    this.PlaceHolderField = value;
                    this.RaisePropertyChanged("PlaceHolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyTypeId {
            get {
                return this.PropertyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyTypeIdField, value) != true)) {
                    this.PropertyTypeIdField = value;
                    this.RaisePropertyChanged("PropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Visible {
            get {
                return this.VisibleField;
            }
            set {
                if ((this.VisibleField.Equals(value) != true)) {
                    this.VisibleField = value;
                    this.RaisePropertyChanged("Visible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderSearchOptionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class FolderSearchOptionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderToSearchInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IgnoreFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IgnoreQueriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchStringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderToSearchIn {
            get {
                return this.FolderToSearchInField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderToSearchInField, value) != true)) {
                    this.FolderToSearchInField = value;
                    this.RaisePropertyChanged("FolderToSearchIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IgnoreFolder {
            get {
                return this.IgnoreFolderField;
            }
            set {
                if ((this.IgnoreFolderField.Equals(value) != true)) {
                    this.IgnoreFolderField = value;
                    this.RaisePropertyChanged("IgnoreFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IgnoreQueries {
            get {
                return this.IgnoreQueriesField;
            }
            set {
                if ((this.IgnoreQueriesField.Equals(value) != true)) {
                    this.IgnoreQueriesField = value;
                    this.RaisePropertyChanged("IgnoreQueries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchLanguage {
            get {
                return this.SearchLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchLanguageField, value) != true)) {
                    this.SearchLanguageField = value;
                    this.RaisePropertyChanged("SearchLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchString {
            get {
                return this.SearchStringField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchStringField, value) != true)) {
                    this.SearchStringField = value;
                    this.RaisePropertyChanged("SearchString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFolderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RemoteFolderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AccessRightsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ColumnConfigurationContract ColumnConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.DocumentSimpleContract[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.PropertyContract[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtectionDomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.RemoteSubFolderContract[] SubFoldersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AccessRightsEnum {
            get {
                return this.AccessRightsEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessRightsEnumField, value) != true)) {
                    this.AccessRightsEnumField = value;
                    this.RaisePropertyChanged("AccessRightsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ColumnConfigurationContract ColumnConfiguration {
            get {
                return this.ColumnConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnConfigurationField, value) != true)) {
                    this.ColumnConfigurationField = value;
                    this.RaisePropertyChanged("ColumnConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.DocumentSimpleContract[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportTemplateId {
            get {
                return this.ImportTemplateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportTemplateIdField, value) != true)) {
                    this.ImportTemplateIdField = value;
                    this.RaisePropertyChanged("ImportTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.PropertyContract[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionDomainId {
            get {
                return this.ProtectionDomainIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionDomainIdField, value) != true)) {
                    this.ProtectionDomainIdField = value;
                    this.RaisePropertyChanged("ProtectionDomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.RemoteSubFolderContract[] SubFolders {
            get {
                return this.SubFoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFoldersField, value) != true)) {
                    this.SubFoldersField = value;
                    this.RaisePropertyChanged("SubFolders");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSubFolderContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RemoteSubFolderContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteConnectionContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class RemoteConnectionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastActionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenantNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateDateField, value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastActionDate {
            get {
                return this.LastActionDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastActionDateField, value) != true)) {
                    this.LastActionDateField = value;
                    this.RaisePropertyChanged("LastActionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TenantName {
            get {
                return this.TenantNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TenantNameField, value) != true)) {
                    this.TenantNameField = value;
                    this.RaisePropertyChanged("TenantName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ServerInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AvailableSystemMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FrameworkVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InstalledMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Is64BitProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Is64BitSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatingSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessorCoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.SecurityPluginInfoContract SecuritPluginInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.AssemblyInfoContract[] StatisticPluginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.TenantInfoContract[] TenantInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeZoneDisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeZoneUtcOffsetMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UICultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UsedMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.WCFEndpointContract[] WCFEndpointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationUser {
            get {
                return this.ApplicationUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationUserField, value) != true)) {
                    this.ApplicationUserField = value;
                    this.RaisePropertyChanged("ApplicationUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AvailableSystemMemory {
            get {
                return this.AvailableSystemMemoryField;
            }
            set {
                if ((this.AvailableSystemMemoryField.Equals(value) != true)) {
                    this.AvailableSystemMemoryField = value;
                    this.RaisePropertyChanged("AvailableSystemMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FrameworkVersion {
            get {
                return this.FrameworkVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.FrameworkVersionField, value) != true)) {
                    this.FrameworkVersionField = value;
                    this.RaisePropertyChanged("FrameworkVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InstalledMemory {
            get {
                return this.InstalledMemoryField;
            }
            set {
                if ((this.InstalledMemoryField.Equals(value) != true)) {
                    this.InstalledMemoryField = value;
                    this.RaisePropertyChanged("InstalledMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is64BitProcess {
            get {
                return this.Is64BitProcessField;
            }
            set {
                if ((this.Is64BitProcessField.Equals(value) != true)) {
                    this.Is64BitProcessField = value;
                    this.RaisePropertyChanged("Is64BitProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is64BitSystem {
            get {
                return this.Is64BitSystemField;
            }
            set {
                if ((this.Is64BitSystemField.Equals(value) != true)) {
                    this.Is64BitSystemField = value;
                    this.RaisePropertyChanged("Is64BitSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem {
            get {
                return this.OperatingSystemField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatingSystemField, value) != true)) {
                    this.OperatingSystemField = value;
                    this.RaisePropertyChanged("OperatingSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessorCores {
            get {
                return this.ProcessorCoresField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessorCoresField, value) != true)) {
                    this.ProcessorCoresField = value;
                    this.RaisePropertyChanged("ProcessorCores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessorName {
            get {
                return this.ProcessorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessorNameField, value) != true)) {
                    this.ProcessorNameField = value;
                    this.RaisePropertyChanged("ProcessorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.SecurityPluginInfoContract SecuritPluginInfo {
            get {
                return this.SecuritPluginInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.SecuritPluginInfoField, value) != true)) {
                    this.SecuritPluginInfoField = value;
                    this.RaisePropertyChanged("SecuritPluginInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerDate {
            get {
                return this.ServerDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerDateField, value) != true)) {
                    this.ServerDateField = value;
                    this.RaisePropertyChanged("ServerDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerDomain {
            get {
                return this.ServerDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerDomainField, value) != true)) {
                    this.ServerDomainField = value;
                    this.RaisePropertyChanged("ServerDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.AssemblyInfoContract[] StatisticPlugins {
            get {
                return this.StatisticPluginsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticPluginsField, value) != true)) {
                    this.StatisticPluginsField = value;
                    this.RaisePropertyChanged("StatisticPlugins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.TenantInfoContract[] TenantInfos {
            get {
                return this.TenantInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.TenantInfosField, value) != true)) {
                    this.TenantInfosField = value;
                    this.RaisePropertyChanged("TenantInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZoneDisplayName {
            get {
                return this.TimeZoneDisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneDisplayNameField, value) != true)) {
                    this.TimeZoneDisplayNameField = value;
                    this.RaisePropertyChanged("TimeZoneDisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeZoneUtcOffsetMinutes {
            get {
                return this.TimeZoneUtcOffsetMinutesField;
            }
            set {
                if ((this.TimeZoneUtcOffsetMinutesField.Equals(value) != true)) {
                    this.TimeZoneUtcOffsetMinutesField = value;
                    this.RaisePropertyChanged("TimeZoneUtcOffsetMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UICulture {
            get {
                return this.UICultureField;
            }
            set {
                if ((object.ReferenceEquals(this.UICultureField, value) != true)) {
                    this.UICultureField = value;
                    this.RaisePropertyChanged("UICulture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UsedMemory {
            get {
                return this.UsedMemoryField;
            }
            set {
                if ((this.UsedMemoryField.Equals(value) != true)) {
                    this.UsedMemoryField = value;
                    this.RaisePropertyChanged("UsedMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.WCFEndpointContract[] WCFEndpoints {
            get {
                return this.WCFEndpointsField;
            }
            set {
                if ((object.ReferenceEquals(this.WCFEndpointsField, value) != true)) {
                    this.WCFEndpointsField = value;
                    this.RaisePropertyChanged("WCFEndpoints");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityPluginInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class SecurityPluginInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssemblyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultPluginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DefaultPlugin {
            get {
                return this.DefaultPluginField;
            }
            set {
                if ((this.DefaultPluginField.Equals(value) != true)) {
                    this.DefaultPluginField = value;
                    this.RaisePropertyChanged("DefaultPlugin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssemblyInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AssemblyInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TenantInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class TenantInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServerPortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServerPort {
            get {
                return this.ServerPortField;
            }
            set {
                if ((this.ServerPortField.Equals(value) != true)) {
                    this.ServerPortField = value;
                    this.RaisePropertyChanged("ServerPort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFEndpointContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class WCFEndpointContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RestServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WindowsAuthenticationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RestService {
            get {
                return this.RestServiceField;
            }
            set {
                if ((this.RestServiceField.Equals(value) != true)) {
                    this.RestServiceField = value;
                    this.RaisePropertyChanged("RestService");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WindowsAuthentication {
            get {
                return this.WindowsAuthenticationField;
            }
            set {
                if ((this.WindowsAuthenticationField.Equals(value) != true)) {
                    this.WindowsAuthenticationField = value;
                    this.RaisePropertyChanged("WindowsAuthentication");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenceInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LicenceInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApplicationLicencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComputerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConcurrentLicencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LicenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.LicenceFeatureContract[] LicencedFeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NamedLicencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZIPField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplicationLicences {
            get {
                return this.ApplicationLicencesField;
            }
            set {
                if ((this.ApplicationLicencesField.Equals(value) != true)) {
                    this.ApplicationLicencesField = value;
                    this.RaisePropertyChanged("ApplicationLicences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComputerName {
            get {
                return this.ComputerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ComputerNameField, value) != true)) {
                    this.ComputerNameField = value;
                    this.RaisePropertyChanged("ComputerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConcurrentLicences {
            get {
                return this.ConcurrentLicencesField;
            }
            set {
                if ((this.ConcurrentLicencesField.Equals(value) != true)) {
                    this.ConcurrentLicencesField = value;
                    this.RaisePropertyChanged("ConcurrentLicences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationDateField, value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpirationDateField, value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LicenceId {
            get {
                return this.LicenceIdField;
            }
            set {
                if ((this.LicenceIdField.Equals(value) != true)) {
                    this.LicenceIdField = value;
                    this.RaisePropertyChanged("LicenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.LicenceFeatureContract[] LicencedFeatures {
            get {
                return this.LicencedFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.LicencedFeaturesField, value) != true)) {
                    this.LicencedFeaturesField = value;
                    this.RaisePropertyChanged("LicencedFeatures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseTypeEnum {
            get {
                return this.LicenseTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseTypeEnumField, value) != true)) {
                    this.LicenseTypeEnumField = value;
                    this.RaisePropertyChanged("LicenseTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NamedLicences {
            get {
                return this.NamedLicencesField;
            }
            set {
                if ((this.NamedLicencesField.Equals(value) != true)) {
                    this.NamedLicencesField = value;
                    this.RaisePropertyChanged("NamedLicences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZIP {
            get {
                return this.ZIPField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPField, value) != true)) {
                    this.ZIPField = value;
                    this.RaisePropertyChanged("ZIP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenceFeatureContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LicenceFeatureContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConcurrentUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NamedUsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConcurrentUsers {
            get {
                return this.ConcurrentUsersField;
            }
            set {
                if ((this.ConcurrentUsersField.Equals(value) != true)) {
                    this.ConcurrentUsersField = value;
                    this.RaisePropertyChanged("ConcurrentUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NamedUsers {
            get {
                return this.NamedUsersField;
            }
            set {
                if ((this.NamedUsersField.Equals(value) != true)) {
                    this.NamedUsersField = value;
                    this.RaisePropertyChanged("NamedUsers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenceContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LicenceContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private docreminder.InfoShareService.ClientLicenceInfoContract[] ClientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public docreminder.InfoShareService.ClientLicenceInfoContract[] Clients {
            get {
                return this.ClientsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientsField, value) != true)) {
                    this.ClientsField = value;
                    this.RaisePropertyChanged("Clients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientLicenceInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ClientLicenceInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindowsUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WindowsUser {
            get {
                return this.WindowsUserField;
            }
            set {
                if ((object.ReferenceEquals(this.WindowsUserField, value) != true)) {
                    this.WindowsUserField = value;
                    this.RaisePropertyChanged("WindowsUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoStoreDocumentCountContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class InfoStoreDocumentCountContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DocumentCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DocumentVersionCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoStoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DocumentCount {
            get {
                return this.DocumentCountField;
            }
            set {
                if ((this.DocumentCountField.Equals(value) != true)) {
                    this.DocumentCountField = value;
                    this.RaisePropertyChanged("DocumentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DocumentVersionCount {
            get {
                return this.DocumentVersionCountField;
            }
            set {
                if ((this.DocumentVersionCountField.Equals(value) != true)) {
                    this.DocumentVersionCountField = value;
                    this.RaisePropertyChanged("DocumentVersionCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoStoreId {
            get {
                return this.InfoStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoStoreIdField, value) != true)) {
                    this.InfoStoreIdField = value;
                    this.RaisePropertyChanged("InfoStoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalyzerDocumentCountContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AnalyzerDocumentCountContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoStoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentCount {
            get {
                return this.DocumentCountField;
            }
            set {
                if ((this.DocumentCountField.Equals(value) != true)) {
                    this.DocumentCountField = value;
                    this.RaisePropertyChanged("DocumentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoStoreId {
            get {
                return this.InfoStoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoStoreIdField, value) != true)) {
                    this.InfoStoreIdField = value;
                    this.RaisePropertyChanged("InfoStoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogFileInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LogFileInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastWriteTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogFileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastWriteTime {
            get {
                return this.LastWriteTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LastWriteTimeField, value) != true)) {
                    this.LastWriteTimeField = value;
                    this.RaisePropertyChanged("LastWriteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogFileName {
            get {
                return this.LogFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogFileNameField, value) != true)) {
                    this.LogFileNameField = value;
                    this.RaisePropertyChanged("LogFileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseInfoContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class DatabaseInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastBackupDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LogSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionUser {
            get {
                return this.ConnectionUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionUserField, value) != true)) {
                    this.ConnectionUserField = value;
                    this.RaisePropertyChanged("ConnectionUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Edition {
            get {
                return this.EditionField;
            }
            set {
                if ((object.ReferenceEquals(this.EditionField, value) != true)) {
                    this.EditionField = value;
                    this.RaisePropertyChanged("Edition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastBackupDate {
            get {
                return this.LastBackupDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastBackupDateField, value) != true)) {
                    this.LastBackupDateField = value;
                    this.RaisePropertyChanged("LastBackupDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LogSize {
            get {
                return this.LogSizeField;
            }
            set {
                if ((this.LogSizeField.Equals(value) != true)) {
                    this.LogSizeField = value;
                    this.RaisePropertyChanged("LogSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderType {
            get {
                return this.ProviderTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderTypeField, value) != true)) {
                    this.ProviderTypeField = value;
                    this.RaisePropertyChanged("ProviderType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalSize {
            get {
                return this.TotalSizeField;
            }
            set {
                if ((this.TotalSizeField.Equals(value) != true)) {
                    this.TotalSizeField = value;
                    this.RaisePropertyChanged("TotalSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogEntryContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class LogEntryContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogEventTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectTypeEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationComputerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StoreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenantField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventDate {
            get {
                return this.EventDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EventDateField, value) != true)) {
                    this.EventDateField = value;
                    this.RaisePropertyChanged("EventDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventMessage {
            get {
                return this.EventMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.EventMessageField, value) != true)) {
                    this.EventMessageField = value;
                    this.RaisePropertyChanged("EventMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventNumber {
            get {
                return this.EventNumberField;
            }
            set {
                if ((this.EventNumberField.Equals(value) != true)) {
                    this.EventNumberField = value;
                    this.RaisePropertyChanged("EventNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventText {
            get {
                return this.EventTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTextField, value) != true)) {
                    this.EventTextField = value;
                    this.RaisePropertyChanged("EventText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogEventTypeEnum {
            get {
                return this.LogEventTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.LogEventTypeEnumField, value) != true)) {
                    this.LogEventTypeEnumField = value;
                    this.RaisePropertyChanged("LogEventTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectTypeEnum {
            get {
                return this.ObjectTypeEnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectTypeEnumField, value) != true)) {
                    this.ObjectTypeEnumField = value;
                    this.RaisePropertyChanged("ObjectTypeEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationComputer {
            get {
                return this.OperationComputerField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationComputerField, value) != true)) {
                    this.OperationComputerField = value;
                    this.RaisePropertyChanged("OperationComputer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationUserId {
            get {
                return this.OperationUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationUserIdField, value) != true)) {
                    this.OperationUserIdField = value;
                    this.RaisePropertyChanged("OperationUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationUserName {
            get {
                return this.OperationUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationUserNameField, value) != true)) {
                    this.OperationUserNameField = value;
                    this.RaisePropertyChanged("OperationUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoreId {
            get {
                return this.StoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreIdField, value) != true)) {
                    this.StoreIdField = value;
                    this.RaisePropertyChanged("StoreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubSystem {
            get {
                return this.SubSystemField;
            }
            set {
                if ((object.ReferenceEquals(this.SubSystemField, value) != true)) {
                    this.SubSystemField = value;
                    this.RaisePropertyChanged("SubSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tenant {
            get {
                return this.TenantField;
            }
            set {
                if ((object.ReferenceEquals(this.TenantField, value) != true)) {
                    this.TenantField = value;
                    this.RaisePropertyChanged("Tenant");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditLogonContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AuditLogonContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LogDateField, value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditAdministrationContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class AuditAdministrationContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataContractTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewJsonObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OldJsonObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataContractTypeName {
            get {
                return this.DataContractTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataContractTypeNameField, value) != true)) {
                    this.DataContractTypeNameField = value;
                    this.RaisePropertyChanged("DataContractTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LogDateField, value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MethodName {
            get {
                return this.MethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodNameField, value) != true)) {
                    this.MethodNameField = value;
                    this.RaisePropertyChanged("MethodName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewJsonObject {
            get {
                return this.NewJsonObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.NewJsonObjectField, value) != true)) {
                    this.NewJsonObjectField = value;
                    this.RaisePropertyChanged("NewJsonObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OldJsonObject {
            get {
                return this.OldJsonObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OldJsonObjectField, value) != true)) {
                    this.OldJsonObjectField = value;
                    this.RaisePropertyChanged("OldJsonObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListItemContract", Namespace="http://www.kendox.com/InfoShare")]
    [System.SerializableAttribute()]
    public partial class ListItemContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Authentication")]
    public interface Authentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/Logon", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/LogonServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogonResultContract Logon(string tenantName, string userName, string passwordHashed, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/Logon", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonAsync(string tenantName, string userName, string passwordHashed, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithNewPassword", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithNewPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/LogonWithNewPasswordServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogonResultContract LogonWithNewPassword(string tenantName, string userName, string passwordHashed, string newPassword, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithNewPassword", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithNewPasswordResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithNewPasswordAsync(string tenantName, string userName, string passwordHashed, string newPassword, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithSingleSignOn", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithSingleSignOnResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/LogonWithSingleSignOnServiceExcept" +
            "ionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogonResultContract LogonWithSingleSignOn(string tenantName, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithSingleSignOn", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithSingleSignOnResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithSingleSignOnAsync(string tenantName, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/Logoff", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogoffResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/LogoffServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void Logoff(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/Logoff", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogoffResponse")]
        System.Threading.Tasks.Task LogoffAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/KeepAlive", ReplyAction="http://www.kendox.com/InfoShare/Authentication/KeepAliveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/KeepAliveServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        bool KeepAlive(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/KeepAlive", ReplyAction="http://www.kendox.com/InfoShare/Authentication/KeepAliveResponse")]
        System.Threading.Tasks.Task<bool> KeepAliveAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithToken", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Authentication/LogonWithTokenServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogonResultContract LogonWithToken(string tenantName, string token, string tokenType, string clientId, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Authentication/LogonWithToken", ReplyAction="http://www.kendox.com/InfoShare/Authentication/LogonWithTokenResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithTokenAsync(string tenantName, string token, string tokenType, string clientId, int timeZoneOffsetMinutes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AuthenticationChannel : docreminder.InfoShareService.Authentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Authentication>, docreminder.InfoShareService.Authentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.LogonResultContract Logon(string tenantName, string userName, string passwordHashed, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.Logon(tenantName, userName, passwordHashed, clientId, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonAsync(string tenantName, string userName, string passwordHashed, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonAsync(tenantName, userName, passwordHashed, clientId, timeZoneOffsetMinutes);
        }
        
        public docreminder.InfoShareService.LogonResultContract LogonWithNewPassword(string tenantName, string userName, string passwordHashed, string newPassword, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithNewPassword(tenantName, userName, passwordHashed, newPassword, clientId, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithNewPasswordAsync(string tenantName, string userName, string passwordHashed, string newPassword, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithNewPasswordAsync(tenantName, userName, passwordHashed, newPassword, clientId, timeZoneOffsetMinutes);
        }
        
        public docreminder.InfoShareService.LogonResultContract LogonWithSingleSignOn(string tenantName, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithSingleSignOn(tenantName, clientId, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithSingleSignOnAsync(string tenantName, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithSingleSignOnAsync(tenantName, clientId, timeZoneOffsetMinutes);
        }
        
        public void Logoff(string connectionId) {
            base.Channel.Logoff(connectionId);
        }
        
        public System.Threading.Tasks.Task LogoffAsync(string connectionId) {
            return base.Channel.LogoffAsync(connectionId);
        }
        
        public bool KeepAlive(string connectionId) {
            return base.Channel.KeepAlive(connectionId);
        }
        
        public System.Threading.Tasks.Task<bool> KeepAliveAsync(string connectionId) {
            return base.Channel.KeepAliveAsync(connectionId);
        }
        
        public docreminder.InfoShareService.LogonResultContract LogonWithToken(string tenantName, string token, string tokenType, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithToken(tenantName, token, tokenType, clientId, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogonResultContract> LogonWithTokenAsync(string tenantName, string token, string tokenType, string clientId, int timeZoneOffsetMinutes) {
            return base.Channel.LogonWithTokenAsync(tenantName, token, tokenType, clientId, timeZoneOffsetMinutes);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Search")]
    public interface Search {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/Search", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Search/SearchServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchResultContract Search(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string[] resultProperties, string resumePoint, string customSecurityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/Search", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchResultContract> SearchAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string[] resultProperties, string resumePoint, string customSecurityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchIds", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Search/SearchIdsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchResultIdsContract SearchIds(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string resumePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchIds", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchIdsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchResultIdsContract> SearchIdsAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string resumePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchAutoSuggest", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchAutoSuggestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Search/SearchAutoSuggestServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] SearchAutoSuggest(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string inputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchAutoSuggest", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchAutoSuggestResponse")]
        System.Threading.Tasks.Task<string[]> SearchAutoSuggestAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string inputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchCount", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Search/SearchCountServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        long SearchCount(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Search/SearchCount", ReplyAction="http://www.kendox.com/InfoShare/Search/SearchCountResponse")]
        System.Threading.Tasks.Task<long> SearchCountAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SearchChannel : docreminder.InfoShareService.Search, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Search>, docreminder.InfoShareService.Search {
        
        public SearchClient() {
        }
        
        public SearchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.SearchResultContract Search(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string[] resultProperties, string resumePoint, string customSecurityToken) {
            return base.Channel.Search(connectionId, searchDefinition, resultProperties, resumePoint, customSecurityToken);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchResultContract> SearchAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string[] resultProperties, string resumePoint, string customSecurityToken) {
            return base.Channel.SearchAsync(connectionId, searchDefinition, resultProperties, resumePoint, customSecurityToken);
        }
        
        public docreminder.InfoShareService.SearchResultIdsContract SearchIds(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string resumePoint) {
            return base.Channel.SearchIds(connectionId, searchDefinition, resumePoint);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchResultIdsContract> SearchIdsAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string resumePoint) {
            return base.Channel.SearchIdsAsync(connectionId, searchDefinition, resumePoint);
        }
        
        public string[] SearchAutoSuggest(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string inputValue) {
            return base.Channel.SearchAutoSuggest(connectionId, searchDefinition, inputValue);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchAutoSuggestAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition, string inputValue) {
            return base.Channel.SearchAutoSuggestAsync(connectionId, searchDefinition, inputValue);
        }
        
        public long SearchCount(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition) {
            return base.Channel.SearchCount(connectionId, searchDefinition);
        }
        
        public System.Threading.Tasks.Task<long> SearchCountAsync(string connectionId, docreminder.InfoShareService.SearchDefinitionContract searchDefinition) {
            return base.Channel.SearchCountAsync(connectionId, searchDefinition);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Common")]
    public interface Common {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetInfoStores", ReplyAction="http://www.kendox.com/InfoShare/Common/GetInfoStoresResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetInfoStoresServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.InfoStoreContract[] GetInfoStores(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetInfoStores", ReplyAction="http://www.kendox.com/InfoShare/Common/GetInfoStoresResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.InfoStoreContract[]> GetInfoStoresAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSchemaStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetSchemaStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SchemaStoreContract GetSchemaStore(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSchemaStoreResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SchemaStoreContract> GetSchemaStoreAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.UserStoreContract GetUserStore(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserStoreResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.UserStoreContract> GetUserStoreAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSecurityStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSecurityStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetSecurityStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SecurityStoreContract GetSecurityStore(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSecurityStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSecurityStoreResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SecurityStoreContract> GetSecurityStoreAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetBlobStoreProviders", ReplyAction="http://www.kendox.com/InfoShare/Common/GetBlobStoreProvidersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetBlobStoreProvidersServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.BlobStoreProviderContract[] GetBlobStoreProviders(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetBlobStoreProviders", ReplyAction="http://www.kendox.com/InfoShare/Common/GetBlobStoreProvidersResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.BlobStoreProviderContract[]> GetBlobStoreProvidersAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateUser", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateUserServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateUser(string connectionId, docreminder.InfoShareService.UserContract user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateUser", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateUserResponse")]
        System.Threading.Tasks.Task<string> CreateUserAsync(string connectionId, docreminder.InfoShareService.UserContract user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateUser", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateUserServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateUser(string connectionId, docreminder.InfoShareService.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateUser", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(string connectionId, docreminder.InfoShareService.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateGroupServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateGroup(string connectionId, docreminder.InfoShareService.GroupContract group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateGroupResponse")]
        System.Threading.Tasks.Task<string> CreateGroupAsync(string connectionId, docreminder.InfoShareService.GroupContract group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateGroupServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateGroup(string connectionId, docreminder.InfoShareService.GroupContract group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGroupResponse")]
        System.Threading.Tasks.Task UpdateGroupAsync(string connectionId, docreminder.InfoShareService.GroupContract group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteGroupServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteGroup(string connectionId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteGroup", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(string connectionId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePasswordConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePasswordConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdatePasswordConfigurationServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdatePasswordConfiguration(string connectionId, docreminder.InfoShareService.PasswordConfigurationContract passwordConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePasswordConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePasswordConfigurationResponse")]
        System.Threading.Tasks.Task UpdatePasswordConfigurationAsync(string connectionId, docreminder.InfoShareService.PasswordConfigurationContract passwordConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserPassword", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetUserPasswordServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetUserPassword(string connectionId, string userId, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserPassword", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserPasswordResponse")]
        System.Threading.Tasks.Task SetUserPasswordAsync(string connectionId, string userId, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetPassword", ReplyAction="http://www.kendox.com/InfoShare/Common/SetPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetPasswordServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetPassword(string connectionId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetPassword", ReplyAction="http://www.kendox.com/InfoShare/Common/SetPasswordResponse")]
        System.Threading.Tasks.Task SetPasswordAsync(string connectionId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateProtectionDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateProtectionDomainServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateProtectionDomain(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateProtectionDomainResponse")]
        System.Threading.Tasks.Task<string> CreateProtectionDomainAsync(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteProtectionDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteProtectionDomainServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteProtectionDomain(string connectionId, string protectionDomainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteProtectionDomainResponse")]
        System.Threading.Tasks.Task DeleteProtectionDomainAsync(string connectionId, string protectionDomainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProtectionDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateProtectionDomainServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateProtectionDomain(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProtectionDomain", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProtectionDomainResponse")]
        System.Threading.Tasks.Task UpdateProtectionDomainAsync(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateRole", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateRoleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateRoleServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateRole(string connectionId, docreminder.InfoShareService.RoleContract role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateRole", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateRoleResponse")]
        System.Threading.Tasks.Task<string> CreateRoleAsync(string connectionId, docreminder.InfoShareService.RoleContract role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateRole", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateRoleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateRoleServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateRole(string connectionId, docreminder.InfoShareService.RoleContract role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateRole", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateRoleResponse")]
        System.Threading.Tasks.Task UpdateRoleAsync(string connectionId, docreminder.InfoShareService.RoleContract role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateInfoStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateInfoStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateInfoStore(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateInfoStoreResponse")]
        System.Threading.Tasks.Task<string> CreateInfoStoreAsync(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteInfoStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteInfoStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteInfoStore(string connectionId, string infoStoreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteInfoStoreResponse")]
        System.Threading.Tasks.Task DeleteInfoStoreAsync(string connectionId, string infoStoreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateInfoStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateInfoStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateInfoStore(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore, bool doNotAttachBlobStoreProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateInfoStore", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateInfoStoreResponse")]
        System.Threading.Tasks.Task UpdateInfoStoreAsync(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore, bool doNotAttachBlobStoreProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeCategoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeCategoryServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreatePropertyTypeCategory(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeCategoryResponse")]
        System.Threading.Tasks.Task<string> CreatePropertyTypeCategoryAsync(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyTypeCategoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeletePropertyTypeCategoryServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeletePropertyTypeCategory(string connectionId, string propertyTypeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyTypeCategoryResponse")]
        System.Threading.Tasks.Task DeletePropertyTypeCategoryAsync(string connectionId, string propertyTypeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeCategoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeCategoryServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdatePropertyTypeCategory(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeCategory", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeCategoryResponse")]
        System.Threading.Tasks.Task UpdatePropertyTypeCategoryAsync(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyType", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreatePropertyType(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyType", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyTypeResponse")]
        System.Threading.Tasks.Task<string> CreatePropertyTypeAsync(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyType", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdatePropertyType(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyType", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyTypeResponse")]
        System.Threading.Tasks.Task UpdatePropertyTypeAsync(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyPageTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreatePropertyPageTemplateServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreatePropertyPageTemplate(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyPageTemplateResponse")]
        System.Threading.Tasks.Task<string> CreatePropertyPageTemplateAsync(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyPageTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeletePropertyPageTemplateServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeletePropertyPageTemplate(string connectionId, string propertyPageTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyPageTemplateResponse")]
        System.Threading.Tasks.Task DeletePropertyPageTemplateAsync(string connectionId, string propertyPageTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyPageTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyPageTemplateServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdatePropertyPageTemplate(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyPageTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyPageTemplateResponse")]
        System.Threading.Tasks.Task UpdatePropertyPageTemplateAsync(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateImportTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateImportTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateImportTemplate(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateImportTemplateResponse")]
        System.Threading.Tasks.Task<string> CreateImportTemplateAsync(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteImportTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteImportTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteImportTemplate(string connectionId, string importTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteImportTemplateResponse")]
        System.Threading.Tasks.Task DeleteImportTemplateAsync(string connectionId, string importTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateImportTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateImportTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateImportTemplate(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateImportTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateImportTemplateResponse")]
        System.Threading.Tasks.Task UpdateImportTemplateAsync(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateSigningProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateSigningProfileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateSigningProfile(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateSigningProfileResponse")]
        System.Threading.Tasks.Task<string> CreateSigningProfileAsync(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteSigningProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteSigningProfileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteSigningProfile(string connectionId, string signingProfileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteSigningProfileResponse")]
        System.Threading.Tasks.Task DeleteSigningProfileAsync(string connectionId, string signingProfileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSigningProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateSigningProfileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateSigningProfile(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSigningProfile", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSigningProfileResponse")]
        System.Threading.Tasks.Task UpdateSigningProfileAsync(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLanguageCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateLanguageCodeServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateLanguageCode(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLanguageCodeResponse")]
        System.Threading.Tasks.Task<string> CreateLanguageCodeAsync(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLanguageCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateLanguageCodeServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateLanguageCode(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLanguageCodeResponse")]
        System.Threading.Tasks.Task UpdateLanguageCodeAsync(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLanguageCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteLanguageCodeServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteLanguageCode(string connectionId, string languageCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLanguageCode", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLanguageCodeResponse")]
        System.Threading.Tasks.Task DeleteLanguageCodeAsync(string connectionId, string languageCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateLifeCycleState(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStateResponse")]
        System.Threading.Tasks.Task<string> CreateLifeCycleStateAsync(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateLifeCycleState(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStateResponse")]
        System.Threading.Tasks.Task UpdateLifeCycleStateAsync(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteLifeCycleState(string connectionId, string lifeCycleStateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleState", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStateResponse")]
        System.Threading.Tasks.Task DeleteLifeCycleStateAsync(string connectionId, string lifeCycleStateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStartServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateLifeCycleStart(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateLifeCycleStartResponse")]
        System.Threading.Tasks.Task<string> CreateLifeCycleStartAsync(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStartServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateLifeCycleStart(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateLifeCycleStartResponse")]
        System.Threading.Tasks.Task UpdateLifeCycleStartAsync(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStartServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteLifeCycleStart(string connectionId, string lifeCycleStartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStart", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteLifeCycleStartResponse")]
        System.Threading.Tasks.Task DeleteLifeCycleStartAsync(string connectionId, string lifeCycleStartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetFolderSystems", ReplyAction="http://www.kendox.com/InfoShare/Common/GetFolderSystemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetFolderSystemsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderSystemContract[] GetFolderSystems(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetFolderSystems", ReplyAction="http://www.kendox.com/InfoShare/Common/GetFolderSystemsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderSystemContract[]> GetFolderSystemsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateFolderSystemServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateFolderSystem(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateFolderSystemResponse")]
        System.Threading.Tasks.Task<string> CreateFolderSystemAsync(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateFolderSystemServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateFolderSystem(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateFolderSystemResponse")]
        System.Threading.Tasks.Task UpdateFolderSystemAsync(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteFolderSystemServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteFolderSystem(string connectionId, string folderSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteFolderSystemResponse")]
        System.Threading.Tasks.Task DeleteFolderSystemAsync(string connectionId, string folderSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSMTPSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSMTPSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetSMTPSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SMTPSettingsContract GetSMTPSettings(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSMTPSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSMTPSettingsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SMTPSettingsContract> GetSMTPSettingsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSMTPSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSMTPSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateSMTPSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateSMTPSettings(string connectionId, docreminder.InfoShareService.SMTPSettingsContract smtpSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSMTPSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSMTPSettingsResponse")]
        System.Threading.Tasks.Task UpdateSMTPSettingsAsync(string connectionId, docreminder.InfoShareService.SMTPSettingsContract smtpSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateMailTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateMailTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateMailTemplate(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateMailTemplateResponse")]
        System.Threading.Tasks.Task<string> CreateMailTemplateAsync(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteMailTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteMailTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteMailTemplate(string connectionId, string mailTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteMailTemplateResponse")]
        System.Threading.Tasks.Task DeleteMailTemplateAsync(string connectionId, string mailTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateMailTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateMailTemplateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateMailTemplate(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateMailTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateMailTemplateResponse")]
        System.Threading.Tasks.Task UpdateMailTemplateAsync(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SendMail", ReplyAction="http://www.kendox.com/InfoShare/Common/SendMailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SendMailServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SendMail(string connectionId, docreminder.InfoShareService.SendMailParameterContract sendMailParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SendMail", ReplyAction="http://www.kendox.com/InfoShare/Common/SendMailResponse")]
        System.Threading.Tasks.Task SendMailAsync(string connectionId, docreminder.InfoShareService.SendMailParameterContract sendMailParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateAbonnementMailTemplateId", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateAbonnementMailTemplateIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateAbonnementMailTemplateIdServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateAbonnementMailTemplateId(string connectionId, string mailTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateAbonnementMailTemplateId", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateAbonnementMailTemplateIdResponse")]
        System.Threading.Tasks.Task UpdateAbonnementMailTemplateIdAsync(string connectionId, string mailTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProcessSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProcessSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateProcessSettingsServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateProcessSettings(string connectionId, docreminder.InfoShareService.ProcessSettingsContract processSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProcessSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProcessSettingsResponse")]
        System.Threading.Tasks.Task UpdateProcessSettingsAsync(string connectionId, docreminder.InfoShareService.ProcessSettingsContract processSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalImportSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGlobalImportSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalImportSettingsServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateGlobalImportSettings(string connectionId, docreminder.InfoShareService.GlobalImportSettingsContract globalImportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalImportSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGlobalImportSettingsResponse")]
        System.Threading.Tasks.Task UpdateGlobalImportSettingsAsync(string connectionId, docreminder.InfoShareService.GlobalImportSettingsContract globalImportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetGlobalSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetGlobalSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetGlobalSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.GlobalSettingsContract GetGlobalSettings(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetGlobalSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetGlobalSettingsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.GlobalSettingsContract> GetGlobalSettingsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGlobalSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateGlobalSettings(string connectionId, docreminder.InfoShareService.GlobalSettingsContract globalSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateGlobalSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateGlobalSettingsResponse")]
        System.Threading.Tasks.Task UpdateGlobalSettingsAsync(string connectionId, docreminder.InfoShareService.GlobalSettingsContract globalSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSearchSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSearchSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateSearchSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateSearchSettings(string connectionId, docreminder.InfoShareService.SearchSettingsContract searchSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSearchSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSearchSettingsResponse")]
        System.Threading.Tasks.Task UpdateSearchSettingsAsync(string connectionId, docreminder.InfoShareService.SearchSettingsContract searchSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetRemoteFolderSystems", ReplyAction="http://www.kendox.com/InfoShare/Common/GetRemoteFolderSystemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetRemoteFolderSystemsServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.RemoteFolderSystemContract[] GetRemoteFolderSystems(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetRemoteFolderSystems", ReplyAction="http://www.kendox.com/InfoShare/Common/GetRemoteFolderSystemsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderSystemContract[]> GetRemoteFolderSystemsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateRemoteFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateRemoteFolderSystemServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateRemoteFolderSystem(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateRemoteFolderSystemResponse")]
        System.Threading.Tasks.Task<string> CreateRemoteFolderSystemAsync(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateRemoteFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateRemoteFolderSystemServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateRemoteFolderSystem(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateRemoteFolderSystemResponse")]
        System.Threading.Tasks.Task UpdateRemoteFolderSystemAsync(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteRemoteFolderSystemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteRemoteFolderSystemServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteRemoteFolderSystem(string connectionId, string remoteFolderSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteRemoteFolderSystem", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteRemoteFolderSystemResponse")]
        System.Threading.Tasks.Task DeleteRemoteFolderSystemAsync(string connectionId, string remoteFolderSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyFillerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreatePropertyFillerServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreatePropertyFiller(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreatePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/CreatePropertyFillerResponse")]
        System.Threading.Tasks.Task<string> CreatePropertyFillerAsync(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyFillerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyFillerServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdatePropertyFiller(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdatePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdatePropertyFillerResponse")]
        System.Threading.Tasks.Task UpdatePropertyFillerAsync(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyFillerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeletePropertyFillerServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeletePropertyFiller(string connectionId, string propertyFillerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeletePropertyFiller", ReplyAction="http://www.kendox.com/InfoShare/Common/DeletePropertyFillerResponse")]
        System.Threading.Tasks.Task DeletePropertyFillerAsync(string connectionId, string propertyFillerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteProcessTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteProcessTemplateServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteProcessTemplate(string connectionId, string processTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteProcessTemplateResponse")]
        System.Threading.Tasks.Task DeleteProcessTemplateAsync(string connectionId, string processTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateProcessTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateProcessTemplateServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateProcessTemplate(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateProcessTemplateResponse")]
        System.Threading.Tasks.Task<string> CreateProcessTemplateAsync(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProcessTemplateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateProcessTemplateServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateProcessTemplate(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateProcessTemplate", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateProcessTemplateResponse")]
        System.Threading.Tasks.Task UpdateProcessTemplateAsync(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserLogItemsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserLogItemsCountServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetUserLogItemsCount(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserLogItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetUserLogItemsCountAsync(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserLogEntries", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserLogEntriesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserLogEntriesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.UserLogEntryContract[] GetUserLogEntries(string connectionId, string userId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserLogEntries", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserLogEntriesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.UserLogEntryContract[]> GetUserLogEntriesAsync(string connectionId, string userId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.UserSettingsContract GetUserSettings(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserSettingsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.UserSettingsContract> GetUserSettingsAsync(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateUserSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateUserSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateUserSettingsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateUserSettings(string connectionId, string userId, docreminder.InfoShareService.UserSettingsContract newUserSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateUserSettings", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateUserSettingsResponse")]
        System.Threading.Tasks.Task UpdateUserSettingsAsync(string connectionId, string userId, docreminder.InfoShareService.UserSettingsContract newUserSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserAdminAccessRights", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserAdminAccessRightsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserAdminAccessRightsServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetUserAdminAccessRights(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserAdminAccessRights", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserAdminAccessRightsResponse")]
        System.Threading.Tasks.Task<string[]> GetUserAdminAccessRightsAsync(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetCloudSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetCloudSchemaStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetCloudSchemaStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.CloudSchemaStoreContract GetCloudSchemaStore(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetCloudSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetCloudSchemaStoreResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.CloudSchemaStoreContract> GetCloudSchemaStoreAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteCloudDocumentTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteCloudDocumentTypeServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteCloudDocumentType(string connectionId, string cloudDocumentTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteCloudDocumentTypeResponse")]
        System.Threading.Tasks.Task DeleteCloudDocumentTypeAsync(string connectionId, string cloudDocumentTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateCloudDocumentTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateCloudDocumentTypeServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateCloudDocumentType(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateCloudDocumentTypeResponse")]
        System.Threading.Tasks.Task UpdateCloudDocumentTypeAsync(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateCloudDocumentTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateCloudDocumentTypeServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateCloudDocumentType(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateCloudDocumentType", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateCloudDocumentTypeResponse")]
        System.Threading.Tasks.Task<string> CreateCloudDocumentTypeAsync(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAllTenantNames", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAllTenantNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetAllTenantNamesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetAllTenantNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAllTenantNames", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAllTenantNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllTenantNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserConfigData", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserConfigDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetUserConfigDataServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string GetUserConfigData(string connectionId, string configId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetUserConfigData", ReplyAction="http://www.kendox.com/InfoShare/Common/GetUserConfigDataResponse")]
        System.Threading.Tasks.Task<string> GetUserConfigDataAsync(string connectionId, string configId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserConfigData", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserConfigDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetUserConfigDataServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetUserConfigData(string connectionId, string configId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserConfigData", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserConfigDataResponse")]
        System.Threading.Tasks.Task SetUserConfigDataAsync(string connectionId, string configId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSAPSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSAPSchemaStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetSAPSchemaStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SAPConfigContract GetSAPSchemaStore(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSAPSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSAPSchemaStoreResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SAPConfigContract> GetSAPSchemaStoreAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSAPSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSAPSchemaStoreResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateSAPSchemaStoreServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateSAPSchemaStore(string connectionId, docreminder.InfoShareService.SAPConfigContract sapSchemaStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSAPSchemaStore", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSAPSchemaStoreResponse")]
        System.Threading.Tasks.Task UpdateSAPSchemaStoreAsync(string connectionId, docreminder.InfoShareService.SAPConfigContract sapSchemaStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetPasswordHash", ReplyAction="http://www.kendox.com/InfoShare/Common/SetPasswordHashResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetPasswordHashServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetPasswordHash(string connectionId, string oldPasswordHashed, string newPasswordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetPasswordHash", ReplyAction="http://www.kendox.com/InfoShare/Common/SetPasswordHashResponse")]
        System.Threading.Tasks.Task SetPasswordHashAsync(string connectionId, string oldPasswordHashed, string newPasswordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserPasswordHashed", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserPasswordHashedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetUserPasswordHashedServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetUserPasswordHashed(string connectionId, string userId, string newPasswordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetUserPasswordHashed", ReplyAction="http://www.kendox.com/InfoShare/Common/SetUserPasswordHashedResponse")]
        System.Threading.Tasks.Task SetUserPasswordHashedAsync(string connectionId, string userId, string newPasswordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetPropertyTypeProposal", ReplyAction="http://www.kendox.com/InfoShare/Common/GetPropertyTypeProposalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetPropertyTypeProposalServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetPropertyTypeProposal(string connectionId, string propertyTypeId, string inputValue, int maxCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetPropertyTypeProposal", ReplyAction="http://www.kendox.com/InfoShare/Common/GetPropertyTypeProposalResponse")]
        System.Threading.Tasks.Task<string[]> GetPropertyTypeProposalAsync(string connectionId, string propertyTypeId, string inputValue, int maxCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSecurityConfigDefinitions", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSecurityConfigDefinitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetSecurityConfigDefinitionsServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SecurityConfigDefinitionContract[] GetSecurityConfigDefinitions(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetSecurityConfigDefinitions", ReplyAction="http://www.kendox.com/InfoShare/Common/GetSecurityConfigDefinitionsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SecurityConfigDefinitionContract[]> GetSecurityConfigDefinitionsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateSecurityConfigDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/CreateSecurityConfigDefinitionServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string CreateSecurityConfigDefinition(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/CreateSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/CreateSecurityConfigDefinitionResponse")]
        System.Threading.Tasks.Task<string> CreateSecurityConfigDefinitionAsync(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSecurityConfigDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateSecurityConfigDefinitionServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateSecurityConfigDefinition(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateSecurityConfigDefinitionResponse")]
        System.Threading.Tasks.Task UpdateSecurityConfigDefinitionAsync(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteSecurityConfigDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteSecurityConfigDefinitionServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteSecurityConfigDefinition(string connectionId, string securityConfigDefinitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteSecurityConfigDefinition", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteSecurityConfigDefinitionResponse")]
        System.Threading.Tasks.Task DeleteSecurityConfigDefinitionAsync(string connectionId, string securityConfigDefinitionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsGlobal", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsGlobalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsGlobalServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AnnotationSettingsContract GetAnnotationSettingsGlobal(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsGlobal", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsGlobalResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AnnotationSettingsContract> GetAnnotationSettingsGlobalAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsGlobal", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsGlobalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsGlobalServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetAnnotationSettingsGlobal(string connectionId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsGlobal", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsGlobalResponse")]
        System.Threading.Tasks.Task SetAnnotationSettingsGlobalAsync(string connectionId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsForUser", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsForUserServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AnnotationSettingsContract GetAnnotationSettingsForUser(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsForUser", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAnnotationSettingsForUserResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AnnotationSettingsContract> GetAnnotationSettingsForUserAsync(string connectionId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsForUser", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsForUserServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetAnnotationSettingsForUser(string connectionId, string userId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsForUser", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAnnotationSettingsForUserResponse")]
        System.Threading.Tasks.Task SetAnnotationSettingsForUserAsync(string connectionId, string userId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteRole", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteRoleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteRoleServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteRole(string connectionId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteRole", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteRoleResponse")]
        System.Threading.Tasks.Task DeleteRoleAsync(string connectionId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/ExportConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/ExportConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/ExportConfigurationServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] ExportConfiguration(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/ExportConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/ExportConfigurationResponse")]
        System.Threading.Tasks.Task<byte[]> ExportConfigurationAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/ImportConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/ImportConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/ImportConfigurationServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ImportConfiguration(string connectionId, byte[] zipFile, docreminder.InfoShareService.ImportParameterContract importParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/ImportConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/ImportConfigurationResponse")]
        System.Threading.Tasks.Task ImportConfigurationAsync(string connectionId, byte[] zipFile, docreminder.InfoShareService.ImportParameterContract importParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterConfigurationServiceExc" +
            "eptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.StatisticCounterConfigurationContract[] GetStatisticCounterConfiguration(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterConfigurationResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterConfigurationContract[]> GetStatisticCounterConfigurationAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateStatisticCounterConfigurationRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/UpdateStatisticCounterConfigurationService" +
            "ExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateStatisticCounterConfiguration(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/UpdateStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/UpdateStatisticCounterConfigurationRespons" +
            "e")]
        System.Threading.Tasks.Task UpdateStatisticCounterConfigurationAsync(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterConfigurationRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterConfigurationService" +
            "ExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteStatisticCounterConfiguration(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterConfigurationRespons" +
            "e")]
        System.Threading.Tasks.Task DeleteStatisticCounterConfigurationAsync(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounter", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.StatisticCounterItemContract[] GetStatisticCounter(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounter", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterItemContract[]> GetStatisticCounterAsync(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterItems", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterItemsServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteStatisticCounterItems(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterItems", ReplyAction="http://www.kendox.com/InfoShare/Common/DeleteStatisticCounterItemsResponse")]
        System.Threading.Tasks.Task DeleteStatisticCounterItemsAsync(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterDescription", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterDescriptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterDescriptionServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.StatisticCounterDescriptionContract[] GetStatisticCounterDescription(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetStatisticCounterDescription", ReplyAction="http://www.kendox.com/InfoShare/Common/GetStatisticCounterDescriptionResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterDescriptionContract[]> GetStatisticCounterDescriptionAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAuditConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAuditConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/GetAuditConfigurationServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AuditConfigurationContract GetAuditConfiguration(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/GetAuditConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/GetAuditConfigurationResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AuditConfigurationContract> GetAuditConfigurationAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAuditConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAuditConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Common/SetAuditConfigurationServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetAuditConfiguration(string connectionId, docreminder.InfoShareService.AuditConfigurationContract auditConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Common/SetAuditConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Common/SetAuditConfigurationResponse")]
        System.Threading.Tasks.Task SetAuditConfigurationAsync(string connectionId, docreminder.InfoShareService.AuditConfigurationContract auditConfiguration);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CommonChannel : docreminder.InfoShareService.Common, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Common>, docreminder.InfoShareService.Common {
        
        public CommonClient() {
        }
        
        public CommonClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.InfoStoreContract[] GetInfoStores(string connectionId) {
            return base.Channel.GetInfoStores(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.InfoStoreContract[]> GetInfoStoresAsync(string connectionId) {
            return base.Channel.GetInfoStoresAsync(connectionId);
        }
        
        public docreminder.InfoShareService.SchemaStoreContract GetSchemaStore(string connectionId) {
            return base.Channel.GetSchemaStore(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SchemaStoreContract> GetSchemaStoreAsync(string connectionId) {
            return base.Channel.GetSchemaStoreAsync(connectionId);
        }
        
        public docreminder.InfoShareService.UserStoreContract GetUserStore(string connectionId) {
            return base.Channel.GetUserStore(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.UserStoreContract> GetUserStoreAsync(string connectionId) {
            return base.Channel.GetUserStoreAsync(connectionId);
        }
        
        public docreminder.InfoShareService.SecurityStoreContract GetSecurityStore(string connectionId) {
            return base.Channel.GetSecurityStore(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SecurityStoreContract> GetSecurityStoreAsync(string connectionId) {
            return base.Channel.GetSecurityStoreAsync(connectionId);
        }
        
        public docreminder.InfoShareService.BlobStoreProviderContract[] GetBlobStoreProviders(string connectionId) {
            return base.Channel.GetBlobStoreProviders(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.BlobStoreProviderContract[]> GetBlobStoreProvidersAsync(string connectionId) {
            return base.Channel.GetBlobStoreProvidersAsync(connectionId);
        }
        
        public string CreateUser(string connectionId, docreminder.InfoShareService.UserContract user, string password) {
            return base.Channel.CreateUser(connectionId, user, password);
        }
        
        public System.Threading.Tasks.Task<string> CreateUserAsync(string connectionId, docreminder.InfoShareService.UserContract user, string password) {
            return base.Channel.CreateUserAsync(connectionId, user, password);
        }
        
        public void UpdateUser(string connectionId, docreminder.InfoShareService.UserContract user) {
            base.Channel.UpdateUser(connectionId, user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(string connectionId, docreminder.InfoShareService.UserContract user) {
            return base.Channel.UpdateUserAsync(connectionId, user);
        }
        
        public string CreateGroup(string connectionId, docreminder.InfoShareService.GroupContract group) {
            return base.Channel.CreateGroup(connectionId, group);
        }
        
        public System.Threading.Tasks.Task<string> CreateGroupAsync(string connectionId, docreminder.InfoShareService.GroupContract group) {
            return base.Channel.CreateGroupAsync(connectionId, group);
        }
        
        public void UpdateGroup(string connectionId, docreminder.InfoShareService.GroupContract group) {
            base.Channel.UpdateGroup(connectionId, group);
        }
        
        public System.Threading.Tasks.Task UpdateGroupAsync(string connectionId, docreminder.InfoShareService.GroupContract group) {
            return base.Channel.UpdateGroupAsync(connectionId, group);
        }
        
        public void DeleteGroup(string connectionId, string groupId) {
            base.Channel.DeleteGroup(connectionId, groupId);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(string connectionId, string groupId) {
            return base.Channel.DeleteGroupAsync(connectionId, groupId);
        }
        
        public void UpdatePasswordConfiguration(string connectionId, docreminder.InfoShareService.PasswordConfigurationContract passwordConfiguration) {
            base.Channel.UpdatePasswordConfiguration(connectionId, passwordConfiguration);
        }
        
        public System.Threading.Tasks.Task UpdatePasswordConfigurationAsync(string connectionId, docreminder.InfoShareService.PasswordConfigurationContract passwordConfiguration) {
            return base.Channel.UpdatePasswordConfigurationAsync(connectionId, passwordConfiguration);
        }
        
        public void SetUserPassword(string connectionId, string userId, string newPassword) {
            base.Channel.SetUserPassword(connectionId, userId, newPassword);
        }
        
        public System.Threading.Tasks.Task SetUserPasswordAsync(string connectionId, string userId, string newPassword) {
            return base.Channel.SetUserPasswordAsync(connectionId, userId, newPassword);
        }
        
        public void SetPassword(string connectionId, string oldPassword, string newPassword) {
            base.Channel.SetPassword(connectionId, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task SetPasswordAsync(string connectionId, string oldPassword, string newPassword) {
            return base.Channel.SetPasswordAsync(connectionId, oldPassword, newPassword);
        }
        
        public string CreateProtectionDomain(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain) {
            return base.Channel.CreateProtectionDomain(connectionId, protectionDomain);
        }
        
        public System.Threading.Tasks.Task<string> CreateProtectionDomainAsync(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain) {
            return base.Channel.CreateProtectionDomainAsync(connectionId, protectionDomain);
        }
        
        public void DeleteProtectionDomain(string connectionId, string protectionDomainId) {
            base.Channel.DeleteProtectionDomain(connectionId, protectionDomainId);
        }
        
        public System.Threading.Tasks.Task DeleteProtectionDomainAsync(string connectionId, string protectionDomainId) {
            return base.Channel.DeleteProtectionDomainAsync(connectionId, protectionDomainId);
        }
        
        public void UpdateProtectionDomain(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain) {
            base.Channel.UpdateProtectionDomain(connectionId, protectionDomain);
        }
        
        public System.Threading.Tasks.Task UpdateProtectionDomainAsync(string connectionId, docreminder.InfoShareService.ProtectionDomainContract protectionDomain) {
            return base.Channel.UpdateProtectionDomainAsync(connectionId, protectionDomain);
        }
        
        public string CreateRole(string connectionId, docreminder.InfoShareService.RoleContract role) {
            return base.Channel.CreateRole(connectionId, role);
        }
        
        public System.Threading.Tasks.Task<string> CreateRoleAsync(string connectionId, docreminder.InfoShareService.RoleContract role) {
            return base.Channel.CreateRoleAsync(connectionId, role);
        }
        
        public void UpdateRole(string connectionId, docreminder.InfoShareService.RoleContract role) {
            base.Channel.UpdateRole(connectionId, role);
        }
        
        public System.Threading.Tasks.Task UpdateRoleAsync(string connectionId, docreminder.InfoShareService.RoleContract role) {
            return base.Channel.UpdateRoleAsync(connectionId, role);
        }
        
        public string CreateInfoStore(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore) {
            return base.Channel.CreateInfoStore(connectionId, infoStore);
        }
        
        public System.Threading.Tasks.Task<string> CreateInfoStoreAsync(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore) {
            return base.Channel.CreateInfoStoreAsync(connectionId, infoStore);
        }
        
        public void DeleteInfoStore(string connectionId, string infoStoreId) {
            base.Channel.DeleteInfoStore(connectionId, infoStoreId);
        }
        
        public System.Threading.Tasks.Task DeleteInfoStoreAsync(string connectionId, string infoStoreId) {
            return base.Channel.DeleteInfoStoreAsync(connectionId, infoStoreId);
        }
        
        public void UpdateInfoStore(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore, bool doNotAttachBlobStoreProvider) {
            base.Channel.UpdateInfoStore(connectionId, infoStore, doNotAttachBlobStoreProvider);
        }
        
        public System.Threading.Tasks.Task UpdateInfoStoreAsync(string connectionId, docreminder.InfoShareService.InfoStoreContract infoStore, bool doNotAttachBlobStoreProvider) {
            return base.Channel.UpdateInfoStoreAsync(connectionId, infoStore, doNotAttachBlobStoreProvider);
        }
        
        public string CreatePropertyTypeCategory(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory) {
            return base.Channel.CreatePropertyTypeCategory(connectionId, propertyTypeCategory);
        }
        
        public System.Threading.Tasks.Task<string> CreatePropertyTypeCategoryAsync(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory) {
            return base.Channel.CreatePropertyTypeCategoryAsync(connectionId, propertyTypeCategory);
        }
        
        public void DeletePropertyTypeCategory(string connectionId, string propertyTypeCategoryId) {
            base.Channel.DeletePropertyTypeCategory(connectionId, propertyTypeCategoryId);
        }
        
        public System.Threading.Tasks.Task DeletePropertyTypeCategoryAsync(string connectionId, string propertyTypeCategoryId) {
            return base.Channel.DeletePropertyTypeCategoryAsync(connectionId, propertyTypeCategoryId);
        }
        
        public void UpdatePropertyTypeCategory(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory) {
            base.Channel.UpdatePropertyTypeCategory(connectionId, propertyTypeCategory);
        }
        
        public System.Threading.Tasks.Task UpdatePropertyTypeCategoryAsync(string connectionId, docreminder.InfoShareService.PropertyTypeCategoryContract propertyTypeCategory) {
            return base.Channel.UpdatePropertyTypeCategoryAsync(connectionId, propertyTypeCategory);
        }
        
        public string CreatePropertyType(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType) {
            return base.Channel.CreatePropertyType(connectionId, propertyType);
        }
        
        public System.Threading.Tasks.Task<string> CreatePropertyTypeAsync(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType) {
            return base.Channel.CreatePropertyTypeAsync(connectionId, propertyType);
        }
        
        public void UpdatePropertyType(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType) {
            base.Channel.UpdatePropertyType(connectionId, propertyType);
        }
        
        public System.Threading.Tasks.Task UpdatePropertyTypeAsync(string connectionId, docreminder.InfoShareService.PropertyTypeContract propertyType) {
            return base.Channel.UpdatePropertyTypeAsync(connectionId, propertyType);
        }
        
        public string CreatePropertyPageTemplate(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate) {
            return base.Channel.CreatePropertyPageTemplate(connectionId, propertyPageTemplate);
        }
        
        public System.Threading.Tasks.Task<string> CreatePropertyPageTemplateAsync(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate) {
            return base.Channel.CreatePropertyPageTemplateAsync(connectionId, propertyPageTemplate);
        }
        
        public void DeletePropertyPageTemplate(string connectionId, string propertyPageTemplateId) {
            base.Channel.DeletePropertyPageTemplate(connectionId, propertyPageTemplateId);
        }
        
        public System.Threading.Tasks.Task DeletePropertyPageTemplateAsync(string connectionId, string propertyPageTemplateId) {
            return base.Channel.DeletePropertyPageTemplateAsync(connectionId, propertyPageTemplateId);
        }
        
        public void UpdatePropertyPageTemplate(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate) {
            base.Channel.UpdatePropertyPageTemplate(connectionId, propertyPageTemplate);
        }
        
        public System.Threading.Tasks.Task UpdatePropertyPageTemplateAsync(string connectionId, docreminder.InfoShareService.PropertyPageTemplateContract propertyPageTemplate) {
            return base.Channel.UpdatePropertyPageTemplateAsync(connectionId, propertyPageTemplate);
        }
        
        public string CreateImportTemplate(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate) {
            return base.Channel.CreateImportTemplate(connectionId, importTemplate);
        }
        
        public System.Threading.Tasks.Task<string> CreateImportTemplateAsync(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate) {
            return base.Channel.CreateImportTemplateAsync(connectionId, importTemplate);
        }
        
        public void DeleteImportTemplate(string connectionId, string importTemplateId) {
            base.Channel.DeleteImportTemplate(connectionId, importTemplateId);
        }
        
        public System.Threading.Tasks.Task DeleteImportTemplateAsync(string connectionId, string importTemplateId) {
            return base.Channel.DeleteImportTemplateAsync(connectionId, importTemplateId);
        }
        
        public void UpdateImportTemplate(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate) {
            base.Channel.UpdateImportTemplate(connectionId, importTemplate);
        }
        
        public System.Threading.Tasks.Task UpdateImportTemplateAsync(string connectionId, docreminder.InfoShareService.ImportTemplateContract importTemplate) {
            return base.Channel.UpdateImportTemplateAsync(connectionId, importTemplate);
        }
        
        public string CreateSigningProfile(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile) {
            return base.Channel.CreateSigningProfile(connectionId, signingProfile);
        }
        
        public System.Threading.Tasks.Task<string> CreateSigningProfileAsync(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile) {
            return base.Channel.CreateSigningProfileAsync(connectionId, signingProfile);
        }
        
        public void DeleteSigningProfile(string connectionId, string signingProfileId) {
            base.Channel.DeleteSigningProfile(connectionId, signingProfileId);
        }
        
        public System.Threading.Tasks.Task DeleteSigningProfileAsync(string connectionId, string signingProfileId) {
            return base.Channel.DeleteSigningProfileAsync(connectionId, signingProfileId);
        }
        
        public void UpdateSigningProfile(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile) {
            base.Channel.UpdateSigningProfile(connectionId, signingProfile);
        }
        
        public System.Threading.Tasks.Task UpdateSigningProfileAsync(string connectionId, docreminder.InfoShareService.SigningProfileContract signingProfile) {
            return base.Channel.UpdateSigningProfileAsync(connectionId, signingProfile);
        }
        
        public string CreateLanguageCode(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode) {
            return base.Channel.CreateLanguageCode(connectionId, languageCode);
        }
        
        public System.Threading.Tasks.Task<string> CreateLanguageCodeAsync(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode) {
            return base.Channel.CreateLanguageCodeAsync(connectionId, languageCode);
        }
        
        public void UpdateLanguageCode(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode) {
            base.Channel.UpdateLanguageCode(connectionId, languageCode);
        }
        
        public System.Threading.Tasks.Task UpdateLanguageCodeAsync(string connectionId, docreminder.InfoShareService.LanguageCodeContract languageCode) {
            return base.Channel.UpdateLanguageCodeAsync(connectionId, languageCode);
        }
        
        public void DeleteLanguageCode(string connectionId, string languageCodeId) {
            base.Channel.DeleteLanguageCode(connectionId, languageCodeId);
        }
        
        public System.Threading.Tasks.Task DeleteLanguageCodeAsync(string connectionId, string languageCodeId) {
            return base.Channel.DeleteLanguageCodeAsync(connectionId, languageCodeId);
        }
        
        public string CreateLifeCycleState(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState) {
            return base.Channel.CreateLifeCycleState(connectionId, lifeCycleState);
        }
        
        public System.Threading.Tasks.Task<string> CreateLifeCycleStateAsync(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState) {
            return base.Channel.CreateLifeCycleStateAsync(connectionId, lifeCycleState);
        }
        
        public void UpdateLifeCycleState(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState) {
            base.Channel.UpdateLifeCycleState(connectionId, lifeCycleState);
        }
        
        public System.Threading.Tasks.Task UpdateLifeCycleStateAsync(string connectionId, docreminder.InfoShareService.LifeCycleStateContract lifeCycleState) {
            return base.Channel.UpdateLifeCycleStateAsync(connectionId, lifeCycleState);
        }
        
        public void DeleteLifeCycleState(string connectionId, string lifeCycleStateId) {
            base.Channel.DeleteLifeCycleState(connectionId, lifeCycleStateId);
        }
        
        public System.Threading.Tasks.Task DeleteLifeCycleStateAsync(string connectionId, string lifeCycleStateId) {
            return base.Channel.DeleteLifeCycleStateAsync(connectionId, lifeCycleStateId);
        }
        
        public string CreateLifeCycleStart(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart) {
            return base.Channel.CreateLifeCycleStart(connectionId, lifeCycleStart);
        }
        
        public System.Threading.Tasks.Task<string> CreateLifeCycleStartAsync(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart) {
            return base.Channel.CreateLifeCycleStartAsync(connectionId, lifeCycleStart);
        }
        
        public void UpdateLifeCycleStart(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart) {
            base.Channel.UpdateLifeCycleStart(connectionId, lifeCycleStart);
        }
        
        public System.Threading.Tasks.Task UpdateLifeCycleStartAsync(string connectionId, docreminder.InfoShareService.LifeCycleStartContract lifeCycleStart) {
            return base.Channel.UpdateLifeCycleStartAsync(connectionId, lifeCycleStart);
        }
        
        public void DeleteLifeCycleStart(string connectionId, string lifeCycleStartId) {
            base.Channel.DeleteLifeCycleStart(connectionId, lifeCycleStartId);
        }
        
        public System.Threading.Tasks.Task DeleteLifeCycleStartAsync(string connectionId, string lifeCycleStartId) {
            return base.Channel.DeleteLifeCycleStartAsync(connectionId, lifeCycleStartId);
        }
        
        public docreminder.InfoShareService.FolderSystemContract[] GetFolderSystems(string connectionId) {
            return base.Channel.GetFolderSystems(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderSystemContract[]> GetFolderSystemsAsync(string connectionId) {
            return base.Channel.GetFolderSystemsAsync(connectionId);
        }
        
        public string CreateFolderSystem(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem) {
            return base.Channel.CreateFolderSystem(connectionId, folderSystem);
        }
        
        public System.Threading.Tasks.Task<string> CreateFolderSystemAsync(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem) {
            return base.Channel.CreateFolderSystemAsync(connectionId, folderSystem);
        }
        
        public void UpdateFolderSystem(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem) {
            base.Channel.UpdateFolderSystem(connectionId, folderSystem);
        }
        
        public System.Threading.Tasks.Task UpdateFolderSystemAsync(string connectionId, docreminder.InfoShareService.FolderSystemContract folderSystem) {
            return base.Channel.UpdateFolderSystemAsync(connectionId, folderSystem);
        }
        
        public void DeleteFolderSystem(string connectionId, string folderSystemId) {
            base.Channel.DeleteFolderSystem(connectionId, folderSystemId);
        }
        
        public System.Threading.Tasks.Task DeleteFolderSystemAsync(string connectionId, string folderSystemId) {
            return base.Channel.DeleteFolderSystemAsync(connectionId, folderSystemId);
        }
        
        public docreminder.InfoShareService.SMTPSettingsContract GetSMTPSettings(string connectionId) {
            return base.Channel.GetSMTPSettings(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SMTPSettingsContract> GetSMTPSettingsAsync(string connectionId) {
            return base.Channel.GetSMTPSettingsAsync(connectionId);
        }
        
        public void UpdateSMTPSettings(string connectionId, docreminder.InfoShareService.SMTPSettingsContract smtpSettings) {
            base.Channel.UpdateSMTPSettings(connectionId, smtpSettings);
        }
        
        public System.Threading.Tasks.Task UpdateSMTPSettingsAsync(string connectionId, docreminder.InfoShareService.SMTPSettingsContract smtpSettings) {
            return base.Channel.UpdateSMTPSettingsAsync(connectionId, smtpSettings);
        }
        
        public string CreateMailTemplate(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate) {
            return base.Channel.CreateMailTemplate(connectionId, mailTemplate);
        }
        
        public System.Threading.Tasks.Task<string> CreateMailTemplateAsync(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate) {
            return base.Channel.CreateMailTemplateAsync(connectionId, mailTemplate);
        }
        
        public void DeleteMailTemplate(string connectionId, string mailTemplateId) {
            base.Channel.DeleteMailTemplate(connectionId, mailTemplateId);
        }
        
        public System.Threading.Tasks.Task DeleteMailTemplateAsync(string connectionId, string mailTemplateId) {
            return base.Channel.DeleteMailTemplateAsync(connectionId, mailTemplateId);
        }
        
        public void UpdateMailTemplate(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate) {
            base.Channel.UpdateMailTemplate(connectionId, mailTemplate);
        }
        
        public System.Threading.Tasks.Task UpdateMailTemplateAsync(string connectionId, docreminder.InfoShareService.MailTemplateContract mailTemplate) {
            return base.Channel.UpdateMailTemplateAsync(connectionId, mailTemplate);
        }
        
        public void SendMail(string connectionId, docreminder.InfoShareService.SendMailParameterContract sendMailParameter) {
            base.Channel.SendMail(connectionId, sendMailParameter);
        }
        
        public System.Threading.Tasks.Task SendMailAsync(string connectionId, docreminder.InfoShareService.SendMailParameterContract sendMailParameter) {
            return base.Channel.SendMailAsync(connectionId, sendMailParameter);
        }
        
        public void UpdateAbonnementMailTemplateId(string connectionId, string mailTemplateId) {
            base.Channel.UpdateAbonnementMailTemplateId(connectionId, mailTemplateId);
        }
        
        public System.Threading.Tasks.Task UpdateAbonnementMailTemplateIdAsync(string connectionId, string mailTemplateId) {
            return base.Channel.UpdateAbonnementMailTemplateIdAsync(connectionId, mailTemplateId);
        }
        
        public void UpdateProcessSettings(string connectionId, docreminder.InfoShareService.ProcessSettingsContract processSettings) {
            base.Channel.UpdateProcessSettings(connectionId, processSettings);
        }
        
        public System.Threading.Tasks.Task UpdateProcessSettingsAsync(string connectionId, docreminder.InfoShareService.ProcessSettingsContract processSettings) {
            return base.Channel.UpdateProcessSettingsAsync(connectionId, processSettings);
        }
        
        public void UpdateGlobalImportSettings(string connectionId, docreminder.InfoShareService.GlobalImportSettingsContract globalImportSettings) {
            base.Channel.UpdateGlobalImportSettings(connectionId, globalImportSettings);
        }
        
        public System.Threading.Tasks.Task UpdateGlobalImportSettingsAsync(string connectionId, docreminder.InfoShareService.GlobalImportSettingsContract globalImportSettings) {
            return base.Channel.UpdateGlobalImportSettingsAsync(connectionId, globalImportSettings);
        }
        
        public docreminder.InfoShareService.GlobalSettingsContract GetGlobalSettings(string connectionId) {
            return base.Channel.GetGlobalSettings(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.GlobalSettingsContract> GetGlobalSettingsAsync(string connectionId) {
            return base.Channel.GetGlobalSettingsAsync(connectionId);
        }
        
        public void UpdateGlobalSettings(string connectionId, docreminder.InfoShareService.GlobalSettingsContract globalSettings) {
            base.Channel.UpdateGlobalSettings(connectionId, globalSettings);
        }
        
        public System.Threading.Tasks.Task UpdateGlobalSettingsAsync(string connectionId, docreminder.InfoShareService.GlobalSettingsContract globalSettings) {
            return base.Channel.UpdateGlobalSettingsAsync(connectionId, globalSettings);
        }
        
        public void UpdateSearchSettings(string connectionId, docreminder.InfoShareService.SearchSettingsContract searchSettings) {
            base.Channel.UpdateSearchSettings(connectionId, searchSettings);
        }
        
        public System.Threading.Tasks.Task UpdateSearchSettingsAsync(string connectionId, docreminder.InfoShareService.SearchSettingsContract searchSettings) {
            return base.Channel.UpdateSearchSettingsAsync(connectionId, searchSettings);
        }
        
        public docreminder.InfoShareService.RemoteFolderSystemContract[] GetRemoteFolderSystems(string connectionId) {
            return base.Channel.GetRemoteFolderSystems(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderSystemContract[]> GetRemoteFolderSystemsAsync(string connectionId) {
            return base.Channel.GetRemoteFolderSystemsAsync(connectionId);
        }
        
        public string CreateRemoteFolderSystem(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem) {
            return base.Channel.CreateRemoteFolderSystem(connectionId, remoteFolderSystem);
        }
        
        public System.Threading.Tasks.Task<string> CreateRemoteFolderSystemAsync(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem) {
            return base.Channel.CreateRemoteFolderSystemAsync(connectionId, remoteFolderSystem);
        }
        
        public void UpdateRemoteFolderSystem(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem) {
            base.Channel.UpdateRemoteFolderSystem(connectionId, remoteFolderSystem);
        }
        
        public System.Threading.Tasks.Task UpdateRemoteFolderSystemAsync(string connectionId, docreminder.InfoShareService.RemoteFolderSystemContract remoteFolderSystem) {
            return base.Channel.UpdateRemoteFolderSystemAsync(connectionId, remoteFolderSystem);
        }
        
        public void DeleteRemoteFolderSystem(string connectionId, string remoteFolderSystemId) {
            base.Channel.DeleteRemoteFolderSystem(connectionId, remoteFolderSystemId);
        }
        
        public System.Threading.Tasks.Task DeleteRemoteFolderSystemAsync(string connectionId, string remoteFolderSystemId) {
            return base.Channel.DeleteRemoteFolderSystemAsync(connectionId, remoteFolderSystemId);
        }
        
        public string CreatePropertyFiller(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller) {
            return base.Channel.CreatePropertyFiller(connectionId, propertyFiller);
        }
        
        public System.Threading.Tasks.Task<string> CreatePropertyFillerAsync(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller) {
            return base.Channel.CreatePropertyFillerAsync(connectionId, propertyFiller);
        }
        
        public void UpdatePropertyFiller(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller) {
            base.Channel.UpdatePropertyFiller(connectionId, propertyFiller);
        }
        
        public System.Threading.Tasks.Task UpdatePropertyFillerAsync(string connectionId, docreminder.InfoShareService.PropertyFillerContract propertyFiller) {
            return base.Channel.UpdatePropertyFillerAsync(connectionId, propertyFiller);
        }
        
        public void DeletePropertyFiller(string connectionId, string propertyFillerId) {
            base.Channel.DeletePropertyFiller(connectionId, propertyFillerId);
        }
        
        public System.Threading.Tasks.Task DeletePropertyFillerAsync(string connectionId, string propertyFillerId) {
            return base.Channel.DeletePropertyFillerAsync(connectionId, propertyFillerId);
        }
        
        public void DeleteProcessTemplate(string connectionId, string processTemplateId) {
            base.Channel.DeleteProcessTemplate(connectionId, processTemplateId);
        }
        
        public System.Threading.Tasks.Task DeleteProcessTemplateAsync(string connectionId, string processTemplateId) {
            return base.Channel.DeleteProcessTemplateAsync(connectionId, processTemplateId);
        }
        
        public string CreateProcessTemplate(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate) {
            return base.Channel.CreateProcessTemplate(connectionId, processTemplate);
        }
        
        public System.Threading.Tasks.Task<string> CreateProcessTemplateAsync(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate) {
            return base.Channel.CreateProcessTemplateAsync(connectionId, processTemplate);
        }
        
        public void UpdateProcessTemplate(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate) {
            base.Channel.UpdateProcessTemplate(connectionId, processTemplate);
        }
        
        public System.Threading.Tasks.Task UpdateProcessTemplateAsync(string connectionId, docreminder.InfoShareService.ProcessTemplateContract processTemplate) {
            return base.Channel.UpdateProcessTemplateAsync(connectionId, processTemplate);
        }
        
        public int GetUserLogItemsCount(string connectionId, string userId) {
            return base.Channel.GetUserLogItemsCount(connectionId, userId);
        }
        
        public System.Threading.Tasks.Task<int> GetUserLogItemsCountAsync(string connectionId, string userId) {
            return base.Channel.GetUserLogItemsCountAsync(connectionId, userId);
        }
        
        public docreminder.InfoShareService.UserLogEntryContract[] GetUserLogEntries(string connectionId, string userId, int startIndex, int endIndex) {
            return base.Channel.GetUserLogEntries(connectionId, userId, startIndex, endIndex);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.UserLogEntryContract[]> GetUserLogEntriesAsync(string connectionId, string userId, int startIndex, int endIndex) {
            return base.Channel.GetUserLogEntriesAsync(connectionId, userId, startIndex, endIndex);
        }
        
        public docreminder.InfoShareService.UserSettingsContract GetUserSettings(string connectionId, string userId) {
            return base.Channel.GetUserSettings(connectionId, userId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.UserSettingsContract> GetUserSettingsAsync(string connectionId, string userId) {
            return base.Channel.GetUserSettingsAsync(connectionId, userId);
        }
        
        public void UpdateUserSettings(string connectionId, string userId, docreminder.InfoShareService.UserSettingsContract newUserSettings) {
            base.Channel.UpdateUserSettings(connectionId, userId, newUserSettings);
        }
        
        public System.Threading.Tasks.Task UpdateUserSettingsAsync(string connectionId, string userId, docreminder.InfoShareService.UserSettingsContract newUserSettings) {
            return base.Channel.UpdateUserSettingsAsync(connectionId, userId, newUserSettings);
        }
        
        public string[] GetUserAdminAccessRights(string connectionId, string userId) {
            return base.Channel.GetUserAdminAccessRights(connectionId, userId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserAdminAccessRightsAsync(string connectionId, string userId) {
            return base.Channel.GetUserAdminAccessRightsAsync(connectionId, userId);
        }
        
        public docreminder.InfoShareService.CloudSchemaStoreContract GetCloudSchemaStore(string connectionId) {
            return base.Channel.GetCloudSchemaStore(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.CloudSchemaStoreContract> GetCloudSchemaStoreAsync(string connectionId) {
            return base.Channel.GetCloudSchemaStoreAsync(connectionId);
        }
        
        public void DeleteCloudDocumentType(string connectionId, string cloudDocumentTypeId) {
            base.Channel.DeleteCloudDocumentType(connectionId, cloudDocumentTypeId);
        }
        
        public System.Threading.Tasks.Task DeleteCloudDocumentTypeAsync(string connectionId, string cloudDocumentTypeId) {
            return base.Channel.DeleteCloudDocumentTypeAsync(connectionId, cloudDocumentTypeId);
        }
        
        public void UpdateCloudDocumentType(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType) {
            base.Channel.UpdateCloudDocumentType(connectionId, cloudDocumentType);
        }
        
        public System.Threading.Tasks.Task UpdateCloudDocumentTypeAsync(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType) {
            return base.Channel.UpdateCloudDocumentTypeAsync(connectionId, cloudDocumentType);
        }
        
        public string CreateCloudDocumentType(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType) {
            return base.Channel.CreateCloudDocumentType(connectionId, cloudDocumentType);
        }
        
        public System.Threading.Tasks.Task<string> CreateCloudDocumentTypeAsync(string connectionId, docreminder.InfoShareService.CloudDocumentTypeContract cloudDocumentType) {
            return base.Channel.CreateCloudDocumentTypeAsync(connectionId, cloudDocumentType);
        }
        
        public string[] GetAllTenantNames() {
            return base.Channel.GetAllTenantNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllTenantNamesAsync() {
            return base.Channel.GetAllTenantNamesAsync();
        }
        
        public string GetUserConfigData(string connectionId, string configId) {
            return base.Channel.GetUserConfigData(connectionId, configId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserConfigDataAsync(string connectionId, string configId) {
            return base.Channel.GetUserConfigDataAsync(connectionId, configId);
        }
        
        public void SetUserConfigData(string connectionId, string configId, string value) {
            base.Channel.SetUserConfigData(connectionId, configId, value);
        }
        
        public System.Threading.Tasks.Task SetUserConfigDataAsync(string connectionId, string configId, string value) {
            return base.Channel.SetUserConfigDataAsync(connectionId, configId, value);
        }
        
        public docreminder.InfoShareService.SAPConfigContract GetSAPSchemaStore(string connectionId) {
            return base.Channel.GetSAPSchemaStore(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SAPConfigContract> GetSAPSchemaStoreAsync(string connectionId) {
            return base.Channel.GetSAPSchemaStoreAsync(connectionId);
        }
        
        public void UpdateSAPSchemaStore(string connectionId, docreminder.InfoShareService.SAPConfigContract sapSchemaStore) {
            base.Channel.UpdateSAPSchemaStore(connectionId, sapSchemaStore);
        }
        
        public System.Threading.Tasks.Task UpdateSAPSchemaStoreAsync(string connectionId, docreminder.InfoShareService.SAPConfigContract sapSchemaStore) {
            return base.Channel.UpdateSAPSchemaStoreAsync(connectionId, sapSchemaStore);
        }
        
        public void SetPasswordHash(string connectionId, string oldPasswordHashed, string newPasswordHashed) {
            base.Channel.SetPasswordHash(connectionId, oldPasswordHashed, newPasswordHashed);
        }
        
        public System.Threading.Tasks.Task SetPasswordHashAsync(string connectionId, string oldPasswordHashed, string newPasswordHashed) {
            return base.Channel.SetPasswordHashAsync(connectionId, oldPasswordHashed, newPasswordHashed);
        }
        
        public void SetUserPasswordHashed(string connectionId, string userId, string newPasswordHashed) {
            base.Channel.SetUserPasswordHashed(connectionId, userId, newPasswordHashed);
        }
        
        public System.Threading.Tasks.Task SetUserPasswordHashedAsync(string connectionId, string userId, string newPasswordHashed) {
            return base.Channel.SetUserPasswordHashedAsync(connectionId, userId, newPasswordHashed);
        }
        
        public string[] GetPropertyTypeProposal(string connectionId, string propertyTypeId, string inputValue, int maxCount) {
            return base.Channel.GetPropertyTypeProposal(connectionId, propertyTypeId, inputValue, maxCount);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPropertyTypeProposalAsync(string connectionId, string propertyTypeId, string inputValue, int maxCount) {
            return base.Channel.GetPropertyTypeProposalAsync(connectionId, propertyTypeId, inputValue, maxCount);
        }
        
        public docreminder.InfoShareService.SecurityConfigDefinitionContract[] GetSecurityConfigDefinitions(string connectionId) {
            return base.Channel.GetSecurityConfigDefinitions(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SecurityConfigDefinitionContract[]> GetSecurityConfigDefinitionsAsync(string connectionId) {
            return base.Channel.GetSecurityConfigDefinitionsAsync(connectionId);
        }
        
        public string CreateSecurityConfigDefinition(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition) {
            return base.Channel.CreateSecurityConfigDefinition(connectionId, securityConfigDefinition);
        }
        
        public System.Threading.Tasks.Task<string> CreateSecurityConfigDefinitionAsync(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition) {
            return base.Channel.CreateSecurityConfigDefinitionAsync(connectionId, securityConfigDefinition);
        }
        
        public void UpdateSecurityConfigDefinition(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition) {
            base.Channel.UpdateSecurityConfigDefinition(connectionId, securityConfigDefinition);
        }
        
        public System.Threading.Tasks.Task UpdateSecurityConfigDefinitionAsync(string connectionId, docreminder.InfoShareService.SecurityConfigDefinitionContract securityConfigDefinition) {
            return base.Channel.UpdateSecurityConfigDefinitionAsync(connectionId, securityConfigDefinition);
        }
        
        public void DeleteSecurityConfigDefinition(string connectionId, string securityConfigDefinitionId) {
            base.Channel.DeleteSecurityConfigDefinition(connectionId, securityConfigDefinitionId);
        }
        
        public System.Threading.Tasks.Task DeleteSecurityConfigDefinitionAsync(string connectionId, string securityConfigDefinitionId) {
            return base.Channel.DeleteSecurityConfigDefinitionAsync(connectionId, securityConfigDefinitionId);
        }
        
        public docreminder.InfoShareService.AnnotationSettingsContract GetAnnotationSettingsGlobal(string connectionId) {
            return base.Channel.GetAnnotationSettingsGlobal(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AnnotationSettingsContract> GetAnnotationSettingsGlobalAsync(string connectionId) {
            return base.Channel.GetAnnotationSettingsGlobalAsync(connectionId);
        }
        
        public void SetAnnotationSettingsGlobal(string connectionId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings) {
            base.Channel.SetAnnotationSettingsGlobal(connectionId, annotationSettings);
        }
        
        public System.Threading.Tasks.Task SetAnnotationSettingsGlobalAsync(string connectionId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings) {
            return base.Channel.SetAnnotationSettingsGlobalAsync(connectionId, annotationSettings);
        }
        
        public docreminder.InfoShareService.AnnotationSettingsContract GetAnnotationSettingsForUser(string connectionId, string userId) {
            return base.Channel.GetAnnotationSettingsForUser(connectionId, userId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AnnotationSettingsContract> GetAnnotationSettingsForUserAsync(string connectionId, string userId) {
            return base.Channel.GetAnnotationSettingsForUserAsync(connectionId, userId);
        }
        
        public void SetAnnotationSettingsForUser(string connectionId, string userId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings) {
            base.Channel.SetAnnotationSettingsForUser(connectionId, userId, annotationSettings);
        }
        
        public System.Threading.Tasks.Task SetAnnotationSettingsForUserAsync(string connectionId, string userId, docreminder.InfoShareService.AnnotationSettingsContract annotationSettings) {
            return base.Channel.SetAnnotationSettingsForUserAsync(connectionId, userId, annotationSettings);
        }
        
        public void DeleteRole(string connectionId, string roleId) {
            base.Channel.DeleteRole(connectionId, roleId);
        }
        
        public System.Threading.Tasks.Task DeleteRoleAsync(string connectionId, string roleId) {
            return base.Channel.DeleteRoleAsync(connectionId, roleId);
        }
        
        public byte[] ExportConfiguration(string connectionId) {
            return base.Channel.ExportConfiguration(connectionId);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExportConfigurationAsync(string connectionId) {
            return base.Channel.ExportConfigurationAsync(connectionId);
        }
        
        public void ImportConfiguration(string connectionId, byte[] zipFile, docreminder.InfoShareService.ImportParameterContract importParameter) {
            base.Channel.ImportConfiguration(connectionId, zipFile, importParameter);
        }
        
        public System.Threading.Tasks.Task ImportConfigurationAsync(string connectionId, byte[] zipFile, docreminder.InfoShareService.ImportParameterContract importParameter) {
            return base.Channel.ImportConfigurationAsync(connectionId, zipFile, importParameter);
        }
        
        public docreminder.InfoShareService.StatisticCounterConfigurationContract[] GetStatisticCounterConfiguration(string connectionId) {
            return base.Channel.GetStatisticCounterConfiguration(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterConfigurationContract[]> GetStatisticCounterConfigurationAsync(string connectionId) {
            return base.Channel.GetStatisticCounterConfigurationAsync(connectionId);
        }
        
        public void UpdateStatisticCounterConfiguration(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration) {
            base.Channel.UpdateStatisticCounterConfiguration(connectionId, configuration);
        }
        
        public System.Threading.Tasks.Task UpdateStatisticCounterConfigurationAsync(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration) {
            return base.Channel.UpdateStatisticCounterConfigurationAsync(connectionId, configuration);
        }
        
        public void DeleteStatisticCounterConfiguration(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration) {
            base.Channel.DeleteStatisticCounterConfiguration(connectionId, configuration);
        }
        
        public System.Threading.Tasks.Task DeleteStatisticCounterConfigurationAsync(string connectionId, docreminder.InfoShareService.StatisticCounterConfigurationContract configuration) {
            return base.Channel.DeleteStatisticCounterConfigurationAsync(connectionId, configuration);
        }
        
        public docreminder.InfoShareService.StatisticCounterItemContract[] GetStatisticCounter(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter) {
            return base.Channel.GetStatisticCounter(connectionId, statisticCounterFilter);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterItemContract[]> GetStatisticCounterAsync(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter) {
            return base.Channel.GetStatisticCounterAsync(connectionId, statisticCounterFilter);
        }
        
        public void DeleteStatisticCounterItems(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter) {
            base.Channel.DeleteStatisticCounterItems(connectionId, statisticCounterFilter);
        }
        
        public System.Threading.Tasks.Task DeleteStatisticCounterItemsAsync(string connectionId, docreminder.InfoShareService.StatisticCounterFilterContract statisticCounterFilter) {
            return base.Channel.DeleteStatisticCounterItemsAsync(connectionId, statisticCounterFilter);
        }
        
        public docreminder.InfoShareService.StatisticCounterDescriptionContract[] GetStatisticCounterDescription(string connectionId) {
            return base.Channel.GetStatisticCounterDescription(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.StatisticCounterDescriptionContract[]> GetStatisticCounterDescriptionAsync(string connectionId) {
            return base.Channel.GetStatisticCounterDescriptionAsync(connectionId);
        }
        
        public docreminder.InfoShareService.AuditConfigurationContract GetAuditConfiguration(string connectionId) {
            return base.Channel.GetAuditConfiguration(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AuditConfigurationContract> GetAuditConfigurationAsync(string connectionId) {
            return base.Channel.GetAuditConfigurationAsync(connectionId);
        }
        
        public void SetAuditConfiguration(string connectionId, docreminder.InfoShareService.AuditConfigurationContract auditConfiguration) {
            base.Channel.SetAuditConfiguration(connectionId, auditConfiguration);
        }
        
        public System.Threading.Tasks.Task SetAuditConfigurationAsync(string connectionId, docreminder.InfoShareService.AuditConfigurationContract auditConfiguration) {
            return base.Channel.SetAuditConfigurationAsync(connectionId, auditConfiguration);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Document")]
    public interface Document {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract GetDocument(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> GetDocumentAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/DeleteDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteDocument(string connectionId, string documentId, bool ignoreRecycleBin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentResponse")]
        System.Threading.Tasks.Task DeleteDocumentAsync(string connectionId, string documentId, bool ignoreRecycleBin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocuments", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/DeleteDocumentsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] DeleteDocuments(string connectionId, string[] documentIds, bool ignoreRecycleBin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocuments", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentsResponse")]
        System.Threading.Tasks.Task<string[]> DeleteDocumentsAsync(string connectionId, string[] documentIds, bool ignoreRecycleBin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/MoveDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/MoveDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/MoveDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract MoveDocument(string connectionId, string documentId, string newInfoStoreId, bool doNotDeleteFiles, bool doNotMoveFilesPhysically);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/MoveDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/MoveDocumentResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> MoveDocumentAsync(string connectionId, string documentId, string newInfoStoreId, bool doNotDeleteFiles, bool doNotMoveFilesPhysically);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocumentComplex", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentComplexResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/CreateDocumentComplexServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract CreateDocumentComplex(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CreateDocumentOptionsContract options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocumentComplex", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentComplexResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> CreateDocumentComplexAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CreateDocumentOptionsContract options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsCountServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetAccessLogItemsCount(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetAccessLogItemsCountAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AccessLogItemContract[] GetAccessLogItems(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetAccessLogItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetAccessLogItemsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AccessLogItemContract[]> GetAccessLogItemsAsync(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddAccessLogEntry", ReplyAction="http://www.kendox.com/InfoShare/Document/AddAccessLogEntryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/AddAccessLogEntryServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void AddAccessLogEntry(string connectionId, string documentId, string accessTypeEnum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddAccessLogEntry", ReplyAction="http://www.kendox.com/InfoShare/Document/AddAccessLogEntryResponse")]
        System.Threading.Tasks.Task AddAccessLogEntryAsync(string connectionId, string documentId, string accessTypeEnum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsCountServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetChangeLogItemsCount(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetChangeLogItemsCountAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ChangeLogItemContract[] GetChangeLogItems(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetChangeLogItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetChangeLogItemsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ChangeLogItemContract[]> GetChangeLogItemsAsync(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetVersionListItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetVersionListItemsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetVersionListItemsCountServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetVersionListItemsCount(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetVersionListItemsCount", ReplyAction="http://www.kendox.com/InfoShare/Document/GetVersionListItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetVersionListItemsCountAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetVersionListItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetVersionListItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetVersionListItemsServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.VersionItemContract[] GetVersionListItems(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetVersionListItems", ReplyAction="http://www.kendox.com/InfoShare/Document/GetVersionListItemsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.VersionItemContract[]> GetVersionListItemsAsync(string connectionId, string documentId, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentVersion", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentVersionServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract GetDocumentVersion(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentVersion", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentVersionResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> GetDocumentVersionAsync(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentVersion", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentVersionServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveDocumentVersion(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentVersion", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentVersionResponse")]
        System.Threading.Tasks.Task RemoveDocumentVersionAsync(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentFulltext", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentFulltextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentFulltextServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string GetDocumentFulltext(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentFulltext", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentFulltextResponse")]
        System.Threading.Tasks.Task<string> GetDocumentFulltextAsync(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentComplex", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentComplexResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentComplexServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract UpdateDocumentComplex(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CheckInParameterContract checkInParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentComplex", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentComplexResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> UpdateDocumentComplexAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CheckInParameterContract checkInParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UndoCheckOutDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/UndoCheckOutDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/UndoCheckOutDocumentServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UndoCheckOutDocument(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UndoCheckOutDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/UndoCheckOutDocumentResponse")]
        System.Threading.Tasks.Task UndoCheckOutDocumentAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CheckOutDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/CheckOutDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/CheckOutDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void CheckOutDocument(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CheckOutDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/CheckOutDocumentResponse")]
        System.Threading.Tasks.Task CheckOutDocumentAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentLinks", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentLinksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentLinksServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LinkInfoContract[] GetDocumentLinks(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentLinks", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentLinksResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LinkInfoContract[]> GetDocumentLinksAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddLinkToDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/AddLinkToDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/AddLinkToDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void AddLinkToDocument(string connectionId, string documentId, string targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddLinkToDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/AddLinkToDocumentResponse")]
        System.Threading.Tasks.Task AddLinkToDocumentAsync(string connectionId, string documentId, string targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteLinkFromDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteLinkFromDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/DeleteLinkFromDocumentServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteLinkFromDocument(string connectionId, string documentId, string targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteLinkFromDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteLinkFromDocumentResponse")]
        System.Threading.Tasks.Task DeleteLinkFromDocumentAsync(string connectionId, string documentId, string targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/CreateDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract CreateDocument(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CreateDocumentOptionsContract options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> CreateDocumentAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CreateDocumentOptionsContract options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract UpdateDocument(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CheckInParameterContract checkInParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocument", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> UpdateDocumentAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CheckInParameterContract checkInParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocuments", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentContract[] GetDocuments(string connectionId, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocuments", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract[]> GetDocumentsAsync(string connectionId, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentFulltext", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentFulltextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentFulltextServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UpdateDocumentFulltext(string connectionId, string documentId, string fulltext, string[] autoSuggestWords, string[] fulltextPropertyWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentFulltext", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentFulltextResponse")]
        System.Threading.Tasks.Task UpdateDocumentFulltextAsync(string connectionId, string documentId, string fulltext, string[] autoSuggestWords, string[] fulltextPropertyWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentAnalyzerStatus", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentAnalyzerStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentAnalyzerStatusServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveDocumentAnalyzerStatus(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentAnalyzerStatus", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentAnalyzerStatusResponse")]
        System.Threading.Tasks.Task RemoveDocumentAnalyzerStatusAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetDocumentAnalyzerStatus", ReplyAction="http://www.kendox.com/InfoShare/Document/SetDocumentAnalyzerStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/SetDocumentAnalyzerStatusServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetDocumentAnalyzerStatus(string connectionId, string documentId, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetDocumentAnalyzerStatus", ReplyAction="http://www.kendox.com/InfoShare/Document/SetDocumentAnalyzerStatusResponse")]
        System.Threading.Tasks.Task SetDocumentAnalyzerStatusAsync(string connectionId, string documentId, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetDocumentPageCount", ReplyAction="http://www.kendox.com/InfoShare/Document/SetDocumentPageCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/SetDocumentPageCountServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetDocumentPageCount(string connectionId, string documentId, string renditionId, int pageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetDocumentPageCount", ReplyAction="http://www.kendox.com/InfoShare/Document/SetDocumentPageCountResponse")]
        System.Threading.Tasks.Task SetDocumentPageCountAsync(string connectionId, string documentId, string renditionId, int pageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveThumbnails", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveThumbnailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RemoveThumbnailsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveThumbnails(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveThumbnails", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveThumbnailsResponse")]
        System.Threading.Tasks.Task RemoveThumbnailsAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddThumbnails", ReplyAction="http://www.kendox.com/InfoShare/Document/AddThumbnailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/AddThumbnailsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void AddThumbnails(string connectionId, string documentId, string renditionId, string[] fileIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddThumbnails", ReplyAction="http://www.kendox.com/InfoShare/Document/AddThumbnailsResponse")]
        System.Threading.Tasks.Task AddThumbnailsAsync(string connectionId, string documentId, string renditionId, string[] fileIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/VerifyDocumentIntegrity", ReplyAction="http://www.kendox.com/InfoShare/Document/VerifyDocumentIntegrityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/VerifyDocumentIntegrityServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void VerifyDocumentIntegrity(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/VerifyDocumentIntegrity", ReplyAction="http://www.kendox.com/InfoShare/Document/VerifyDocumentIntegrityResponse")]
        System.Threading.Tasks.Task VerifyDocumentIntegrityAsync(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/ValidateDocumentSignature", ReplyAction="http://www.kendox.com/InfoShare/Document/ValidateDocumentSignatureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/ValidateDocumentSignatureServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        bool ValidateDocumentSignature(string connectionId, string documentId, string versionId, string documentDataId, string renditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/ValidateDocumentSignature", ReplyAction="http://www.kendox.com/InfoShare/Document/ValidateDocumentSignatureResponse")]
        System.Threading.Tasks.Task<bool> ValidateDocumentSignatureAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentContent", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentContentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentContentServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveDocumentContent(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveDocumentContent", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveDocumentContentResponse")]
        System.Threading.Tasks.Task RemoveDocumentContentAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentShareResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/CreateDocumentShareServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentShareContract CreateDocumentShare(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/CreateDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/CreateDocumentShareResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract> CreateDocumentShareAsync(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentShares", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentShareContract[] GetDocumentShares(string connectionId, string tempAccessDefinitionFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentShares", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesAsync(string connectionId, string tempAccessDefinitionFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesForCurrentUser", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesForCurrentUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesForCurrentUserServiceEx" +
            "ceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentShareContract[] GetDocumentSharesForCurrentUser(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesForCurrentUser", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesForCurrentUserResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesForCurrentUserAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentShareResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/DeleteDocumentShareServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteDocumentShare(string connectionId, string documentShareId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/DeleteDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/DeleteDocumentShareResponse")]
        System.Threading.Tasks.Task DeleteDocumentShareAsync(string connectionId, string documentShareId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesCreatedByCurrentUser", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesCreatedByCurrentUserRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesCreatedByCurrentUserSer" +
            "viceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentShareContract[] GetDocumentSharesCreatedByCurrentUser(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/GetDocumentSharesCreatedByCurrentUser", ReplyAction="http://www.kendox.com/InfoShare/Document/GetDocumentSharesCreatedByCurrentUserRes" +
            "ponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesCreatedByCurrentUserAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentShareResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentShareServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DocumentShareContract UpdateDocumentShare(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/UpdateDocumentShare", ReplyAction="http://www.kendox.com/InfoShare/Document/UpdateDocumentShareResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract> UpdateDocumentShareAsync(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RebuildDocumentIndex", ReplyAction="http://www.kendox.com/InfoShare/Document/RebuildDocumentIndexResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RebuildDocumentIndexServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RebuildDocumentIndex(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RebuildDocumentIndex", ReplyAction="http://www.kendox.com/InfoShare/Document/RebuildDocumentIndexResponse")]
        System.Threading.Tasks.Task RebuildDocumentIndexAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddReadingList", ReplyAction="http://www.kendox.com/InfoShare/Document/AddReadingListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/AddReadingListServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void AddReadingList(string connectionId, string documentId, string[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/AddReadingList", ReplyAction="http://www.kendox.com/InfoShare/Document/AddReadingListResponse")]
        System.Threading.Tasks.Task AddReadingListAsync(string connectionId, string documentId, string[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveReadingList", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveReadingListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/RemoveReadingListServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveReadingList(string connectionId, string documentId, string[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/RemoveReadingList", ReplyAction="http://www.kendox.com/InfoShare/Document/RemoveReadingListResponse")]
        System.Threading.Tasks.Task RemoveReadingListAsync(string connectionId, string documentId, string[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/ResetReceiptList", ReplyAction="http://www.kendox.com/InfoShare/Document/ResetReceiptListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/ResetReceiptListServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetReceiptList(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/ResetReceiptList", ReplyAction="http://www.kendox.com/InfoShare/Document/ResetReceiptListResponse")]
        System.Threading.Tasks.Task ResetReceiptListAsync(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetReadReceipt", ReplyAction="http://www.kendox.com/InfoShare/Document/SetReadReceiptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Document/SetReadReceiptServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetReadReceipt(string connectionId, string documentId, bool hasRead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Document/SetReadReceipt", ReplyAction="http://www.kendox.com/InfoShare/Document/SetReadReceiptResponse")]
        System.Threading.Tasks.Task SetReadReceiptAsync(string connectionId, string documentId, bool hasRead);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DocumentChannel : docreminder.InfoShareService.Document, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Document>, docreminder.InfoShareService.Document {
        
        public DocumentClient() {
        }
        
        public DocumentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.DocumentContract GetDocument(string connectionId, string documentId) {
            return base.Channel.GetDocument(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> GetDocumentAsync(string connectionId, string documentId) {
            return base.Channel.GetDocumentAsync(connectionId, documentId);
        }
        
        public void DeleteDocument(string connectionId, string documentId, bool ignoreRecycleBin) {
            base.Channel.DeleteDocument(connectionId, documentId, ignoreRecycleBin);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(string connectionId, string documentId, bool ignoreRecycleBin) {
            return base.Channel.DeleteDocumentAsync(connectionId, documentId, ignoreRecycleBin);
        }
        
        public string[] DeleteDocuments(string connectionId, string[] documentIds, bool ignoreRecycleBin) {
            return base.Channel.DeleteDocuments(connectionId, documentIds, ignoreRecycleBin);
        }
        
        public System.Threading.Tasks.Task<string[]> DeleteDocumentsAsync(string connectionId, string[] documentIds, bool ignoreRecycleBin) {
            return base.Channel.DeleteDocumentsAsync(connectionId, documentIds, ignoreRecycleBin);
        }
        
        public docreminder.InfoShareService.DocumentContract MoveDocument(string connectionId, string documentId, string newInfoStoreId, bool doNotDeleteFiles, bool doNotMoveFilesPhysically) {
            return base.Channel.MoveDocument(connectionId, documentId, newInfoStoreId, doNotDeleteFiles, doNotMoveFilesPhysically);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> MoveDocumentAsync(string connectionId, string documentId, string newInfoStoreId, bool doNotDeleteFiles, bool doNotMoveFilesPhysically) {
            return base.Channel.MoveDocumentAsync(connectionId, documentId, newInfoStoreId, doNotDeleteFiles, doNotMoveFilesPhysically);
        }
        
        public docreminder.InfoShareService.DocumentContract CreateDocumentComplex(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CreateDocumentOptionsContract options) {
            return base.Channel.CreateDocumentComplex(connectionId, document, documentFileParameter, options);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> CreateDocumentComplexAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CreateDocumentOptionsContract options) {
            return base.Channel.CreateDocumentComplexAsync(connectionId, document, documentFileParameter, options);
        }
        
        public int GetAccessLogItemsCount(string connectionId, string documentId) {
            return base.Channel.GetAccessLogItemsCount(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<int> GetAccessLogItemsCountAsync(string connectionId, string documentId) {
            return base.Channel.GetAccessLogItemsCountAsync(connectionId, documentId);
        }
        
        public docreminder.InfoShareService.AccessLogItemContract[] GetAccessLogItems(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetAccessLogItems(connectionId, documentId, startIndex, endIndex);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AccessLogItemContract[]> GetAccessLogItemsAsync(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetAccessLogItemsAsync(connectionId, documentId, startIndex, endIndex);
        }
        
        public void AddAccessLogEntry(string connectionId, string documentId, string accessTypeEnum) {
            base.Channel.AddAccessLogEntry(connectionId, documentId, accessTypeEnum);
        }
        
        public System.Threading.Tasks.Task AddAccessLogEntryAsync(string connectionId, string documentId, string accessTypeEnum) {
            return base.Channel.AddAccessLogEntryAsync(connectionId, documentId, accessTypeEnum);
        }
        
        public int GetChangeLogItemsCount(string connectionId, string documentId) {
            return base.Channel.GetChangeLogItemsCount(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<int> GetChangeLogItemsCountAsync(string connectionId, string documentId) {
            return base.Channel.GetChangeLogItemsCountAsync(connectionId, documentId);
        }
        
        public docreminder.InfoShareService.ChangeLogItemContract[] GetChangeLogItems(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetChangeLogItems(connectionId, documentId, startIndex, endIndex);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ChangeLogItemContract[]> GetChangeLogItemsAsync(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetChangeLogItemsAsync(connectionId, documentId, startIndex, endIndex);
        }
        
        public int GetVersionListItemsCount(string connectionId, string documentId) {
            return base.Channel.GetVersionListItemsCount(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<int> GetVersionListItemsCountAsync(string connectionId, string documentId) {
            return base.Channel.GetVersionListItemsCountAsync(connectionId, documentId);
        }
        
        public docreminder.InfoShareService.VersionItemContract[] GetVersionListItems(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetVersionListItems(connectionId, documentId, startIndex, endIndex);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.VersionItemContract[]> GetVersionListItemsAsync(string connectionId, string documentId, int startIndex, int endIndex) {
            return base.Channel.GetVersionListItemsAsync(connectionId, documentId, startIndex, endIndex);
        }
        
        public docreminder.InfoShareService.DocumentContract GetDocumentVersion(string connectionId, string documentId, string versionId) {
            return base.Channel.GetDocumentVersion(connectionId, documentId, versionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> GetDocumentVersionAsync(string connectionId, string documentId, string versionId) {
            return base.Channel.GetDocumentVersionAsync(connectionId, documentId, versionId);
        }
        
        public void RemoveDocumentVersion(string connectionId, string documentId, string versionId) {
            base.Channel.RemoveDocumentVersion(connectionId, documentId, versionId);
        }
        
        public System.Threading.Tasks.Task RemoveDocumentVersionAsync(string connectionId, string documentId, string versionId) {
            return base.Channel.RemoveDocumentVersionAsync(connectionId, documentId, versionId);
        }
        
        public string GetDocumentFulltext(string connectionId, string documentId, string versionId) {
            return base.Channel.GetDocumentFulltext(connectionId, documentId, versionId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentFulltextAsync(string connectionId, string documentId, string versionId) {
            return base.Channel.GetDocumentFulltextAsync(connectionId, documentId, versionId);
        }
        
        public docreminder.InfoShareService.DocumentContract UpdateDocumentComplex(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CheckInParameterContract checkInParameter) {
            return base.Channel.UpdateDocumentComplex(connectionId, document, documentFileParameter, checkInParameter);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> UpdateDocumentComplexAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, docreminder.InfoShareService.DocumentFileParameterContract documentFileParameter, docreminder.InfoShareService.CheckInParameterContract checkInParameter) {
            return base.Channel.UpdateDocumentComplexAsync(connectionId, document, documentFileParameter, checkInParameter);
        }
        
        public void UndoCheckOutDocument(string connectionId, string documentId) {
            base.Channel.UndoCheckOutDocument(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task UndoCheckOutDocumentAsync(string connectionId, string documentId) {
            return base.Channel.UndoCheckOutDocumentAsync(connectionId, documentId);
        }
        
        public void CheckOutDocument(string connectionId, string documentId) {
            base.Channel.CheckOutDocument(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task CheckOutDocumentAsync(string connectionId, string documentId) {
            return base.Channel.CheckOutDocumentAsync(connectionId, documentId);
        }
        
        public docreminder.InfoShareService.LinkInfoContract[] GetDocumentLinks(string connectionId, string documentId) {
            return base.Channel.GetDocumentLinks(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LinkInfoContract[]> GetDocumentLinksAsync(string connectionId, string documentId) {
            return base.Channel.GetDocumentLinksAsync(connectionId, documentId);
        }
        
        public void AddLinkToDocument(string connectionId, string documentId, string targetId) {
            base.Channel.AddLinkToDocument(connectionId, documentId, targetId);
        }
        
        public System.Threading.Tasks.Task AddLinkToDocumentAsync(string connectionId, string documentId, string targetId) {
            return base.Channel.AddLinkToDocumentAsync(connectionId, documentId, targetId);
        }
        
        public void DeleteLinkFromDocument(string connectionId, string documentId, string targetId) {
            base.Channel.DeleteLinkFromDocument(connectionId, documentId, targetId);
        }
        
        public System.Threading.Tasks.Task DeleteLinkFromDocumentAsync(string connectionId, string documentId, string targetId) {
            return base.Channel.DeleteLinkFromDocumentAsync(connectionId, documentId, targetId);
        }
        
        public docreminder.InfoShareService.DocumentContract CreateDocument(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CreateDocumentOptionsContract options) {
            return base.Channel.CreateDocument(connectionId, document, fileId, options);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> CreateDocumentAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CreateDocumentOptionsContract options) {
            return base.Channel.CreateDocumentAsync(connectionId, document, fileId, options);
        }
        
        public docreminder.InfoShareService.DocumentContract UpdateDocument(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CheckInParameterContract checkInParameter) {
            return base.Channel.UpdateDocument(connectionId, document, fileId, checkInParameter);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract> UpdateDocumentAsync(string connectionId, docreminder.InfoShareService.DocumentContract document, string fileId, docreminder.InfoShareService.CheckInParameterContract checkInParameter) {
            return base.Channel.UpdateDocumentAsync(connectionId, document, fileId, checkInParameter);
        }
        
        public docreminder.InfoShareService.DocumentContract[] GetDocuments(string connectionId, string[] documentIds) {
            return base.Channel.GetDocuments(connectionId, documentIds);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentContract[]> GetDocumentsAsync(string connectionId, string[] documentIds) {
            return base.Channel.GetDocumentsAsync(connectionId, documentIds);
        }
        
        public void UpdateDocumentFulltext(string connectionId, string documentId, string fulltext, string[] autoSuggestWords, string[] fulltextPropertyWords) {
            base.Channel.UpdateDocumentFulltext(connectionId, documentId, fulltext, autoSuggestWords, fulltextPropertyWords);
        }
        
        public System.Threading.Tasks.Task UpdateDocumentFulltextAsync(string connectionId, string documentId, string fulltext, string[] autoSuggestWords, string[] fulltextPropertyWords) {
            return base.Channel.UpdateDocumentFulltextAsync(connectionId, documentId, fulltext, autoSuggestWords, fulltextPropertyWords);
        }
        
        public void RemoveDocumentAnalyzerStatus(string connectionId, string documentId) {
            base.Channel.RemoveDocumentAnalyzerStatus(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task RemoveDocumentAnalyzerStatusAsync(string connectionId, string documentId) {
            return base.Channel.RemoveDocumentAnalyzerStatusAsync(connectionId, documentId);
        }
        
        public void SetDocumentAnalyzerStatus(string connectionId, string documentId, int status) {
            base.Channel.SetDocumentAnalyzerStatus(connectionId, documentId, status);
        }
        
        public System.Threading.Tasks.Task SetDocumentAnalyzerStatusAsync(string connectionId, string documentId, int status) {
            return base.Channel.SetDocumentAnalyzerStatusAsync(connectionId, documentId, status);
        }
        
        public void SetDocumentPageCount(string connectionId, string documentId, string renditionId, int pageCount) {
            base.Channel.SetDocumentPageCount(connectionId, documentId, renditionId, pageCount);
        }
        
        public System.Threading.Tasks.Task SetDocumentPageCountAsync(string connectionId, string documentId, string renditionId, int pageCount) {
            return base.Channel.SetDocumentPageCountAsync(connectionId, documentId, renditionId, pageCount);
        }
        
        public void RemoveThumbnails(string connectionId, string documentId) {
            base.Channel.RemoveThumbnails(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task RemoveThumbnailsAsync(string connectionId, string documentId) {
            return base.Channel.RemoveThumbnailsAsync(connectionId, documentId);
        }
        
        public void AddThumbnails(string connectionId, string documentId, string renditionId, string[] fileIds) {
            base.Channel.AddThumbnails(connectionId, documentId, renditionId, fileIds);
        }
        
        public System.Threading.Tasks.Task AddThumbnailsAsync(string connectionId, string documentId, string renditionId, string[] fileIds) {
            return base.Channel.AddThumbnailsAsync(connectionId, documentId, renditionId, fileIds);
        }
        
        public void VerifyDocumentIntegrity(string connectionId, string documentId, string versionId) {
            base.Channel.VerifyDocumentIntegrity(connectionId, documentId, versionId);
        }
        
        public System.Threading.Tasks.Task VerifyDocumentIntegrityAsync(string connectionId, string documentId, string versionId) {
            return base.Channel.VerifyDocumentIntegrityAsync(connectionId, documentId, versionId);
        }
        
        public bool ValidateDocumentSignature(string connectionId, string documentId, string versionId, string documentDataId, string renditionId) {
            return base.Channel.ValidateDocumentSignature(connectionId, documentId, versionId, documentDataId, renditionId);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateDocumentSignatureAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId) {
            return base.Channel.ValidateDocumentSignatureAsync(connectionId, documentId, versionId, documentDataId, renditionId);
        }
        
        public void RemoveDocumentContent(string connectionId, string documentId) {
            base.Channel.RemoveDocumentContent(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task RemoveDocumentContentAsync(string connectionId, string documentId) {
            return base.Channel.RemoveDocumentContentAsync(connectionId, documentId);
        }
        
        public docreminder.InfoShareService.DocumentShareContract CreateDocumentShare(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare) {
            return base.Channel.CreateDocumentShare(connectionId, documentShare);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract> CreateDocumentShareAsync(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare) {
            return base.Channel.CreateDocumentShareAsync(connectionId, documentShare);
        }
        
        public docreminder.InfoShareService.DocumentShareContract[] GetDocumentShares(string connectionId, string tempAccessDefinitionFilter) {
            return base.Channel.GetDocumentShares(connectionId, tempAccessDefinitionFilter);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesAsync(string connectionId, string tempAccessDefinitionFilter) {
            return base.Channel.GetDocumentSharesAsync(connectionId, tempAccessDefinitionFilter);
        }
        
        public docreminder.InfoShareService.DocumentShareContract[] GetDocumentSharesForCurrentUser(string connectionId) {
            return base.Channel.GetDocumentSharesForCurrentUser(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesForCurrentUserAsync(string connectionId) {
            return base.Channel.GetDocumentSharesForCurrentUserAsync(connectionId);
        }
        
        public void DeleteDocumentShare(string connectionId, string documentShareId) {
            base.Channel.DeleteDocumentShare(connectionId, documentShareId);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentShareAsync(string connectionId, string documentShareId) {
            return base.Channel.DeleteDocumentShareAsync(connectionId, documentShareId);
        }
        
        public docreminder.InfoShareService.DocumentShareContract[] GetDocumentSharesCreatedByCurrentUser(string connectionId) {
            return base.Channel.GetDocumentSharesCreatedByCurrentUser(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract[]> GetDocumentSharesCreatedByCurrentUserAsync(string connectionId) {
            return base.Channel.GetDocumentSharesCreatedByCurrentUserAsync(connectionId);
        }
        
        public docreminder.InfoShareService.DocumentShareContract UpdateDocumentShare(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare) {
            return base.Channel.UpdateDocumentShare(connectionId, documentShare);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DocumentShareContract> UpdateDocumentShareAsync(string connectionId, docreminder.InfoShareService.DocumentShareContract documentShare) {
            return base.Channel.UpdateDocumentShareAsync(connectionId, documentShare);
        }
        
        public void RebuildDocumentIndex(string connectionId, string documentId) {
            base.Channel.RebuildDocumentIndex(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task RebuildDocumentIndexAsync(string connectionId, string documentId) {
            return base.Channel.RebuildDocumentIndexAsync(connectionId, documentId);
        }
        
        public void AddReadingList(string connectionId, string documentId, string[] userIds) {
            base.Channel.AddReadingList(connectionId, documentId, userIds);
        }
        
        public System.Threading.Tasks.Task AddReadingListAsync(string connectionId, string documentId, string[] userIds) {
            return base.Channel.AddReadingListAsync(connectionId, documentId, userIds);
        }
        
        public void RemoveReadingList(string connectionId, string documentId, string[] userIds) {
            base.Channel.RemoveReadingList(connectionId, documentId, userIds);
        }
        
        public System.Threading.Tasks.Task RemoveReadingListAsync(string connectionId, string documentId, string[] userIds) {
            return base.Channel.RemoveReadingListAsync(connectionId, documentId, userIds);
        }
        
        public void ResetReceiptList(string connectionId, string documentId) {
            base.Channel.ResetReceiptList(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task ResetReceiptListAsync(string connectionId, string documentId) {
            return base.Channel.ResetReceiptListAsync(connectionId, documentId);
        }
        
        public void SetReadReceipt(string connectionId, string documentId, bool hasRead) {
            base.Channel.SetReadReceipt(connectionId, documentId, hasRead);
        }
        
        public System.Threading.Tasks.Task SetReadReceiptAsync(string connectionId, string documentId, bool hasRead) {
            return base.Channel.SetReadReceiptAsync(connectionId, documentId, hasRead);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.File")]
    public interface File {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/MainFileLength", ReplyAction="http://www.kendox.com/InfoShare/File/MainFileLengthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/MainFileLengthServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        long MainFileLength(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/MainFileLength", ReplyAction="http://www.kendox.com/InfoShare/File/MainFileLengthResponse")]
        System.Threading.Tasks.Task<long> MainFileLengthAsync(string connectionId, string documentId, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadFileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream DownloadFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, bool ignoreHashValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, bool ignoreHashValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadFileBytesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] DownloadFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, long from, int count, bool ignoreHashValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileBytesResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, long from, int count, bool ignoreHashValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/UploadFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/UploadFileBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/UploadFileBytesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string UploadFileBytes(string connectionId, string fileId, byte[] bytes, int from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/UploadFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/UploadFileBytesResponse")]
        System.Threading.Tasks.Task<string> UploadFileBytesAsync(string connectionId, string fileId, byte[] bytes, int from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream DownloadSignatureFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadSignatureFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureFileBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFileBytesServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] DownloadSignatureFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureFileBytesResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadSignatureFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream DownloadSignatureReportFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFile", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadSignatureReportFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileBytesServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] DownloadSignatureReportFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadSignatureReportFileBytesResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadSignatureReportFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileConverted", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileConvertedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadFileConvertedServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream DownloadFileConverted(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileConverted", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileConvertedResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileConvertedAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileConvertedBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileConvertedBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadFileConvertedBytesServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] DownloadFileConvertedBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadFileConvertedBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadFileConvertedBytesResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadFileConvertedBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnailBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailBytesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadThumbnailBytesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] DownloadThumbnailBytes(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnailBytes", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailBytesResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadThumbnailBytesAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnail", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadThumbnailServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream DownloadThumbnail(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnail", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadThumbnailAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnails", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/DownloadThumbnailsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        System.IO.Stream[] DownloadThumbnails(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumberFrom, int pageNumberTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/DownloadThumbnails", ReplyAction="http://www.kendox.com/InfoShare/File/DownloadThumbnailsResponse")]
        System.Threading.Tasks.Task<System.IO.Stream[]> DownloadThumbnailsAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumberFrom, int pageNumberTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/GetThumbnailCount", ReplyAction="http://www.kendox.com/InfoShare/File/GetThumbnailCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/GetThumbnailCountServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetThumbnailCount(string connectionId, string documentId, string documentDataId, string renditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/GetThumbnailCount", ReplyAction="http://www.kendox.com/InfoShare/File/GetThumbnailCountResponse")]
        System.Threading.Tasks.Task<int> GetThumbnailCountAsync(string connectionId, string documentId, string documentDataId, string renditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/ReleaseFile", ReplyAction="http://www.kendox.com/InfoShare/File/ReleaseFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/File/ReleaseFileServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ReleaseFile(string connectionId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/File/ReleaseFile", ReplyAction="http://www.kendox.com/InfoShare/File/ReleaseFileResponse")]
        System.Threading.Tasks.Task ReleaseFileAsync(string connectionId, string fileId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileChannel : docreminder.InfoShareService.File, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.File>, docreminder.InfoShareService.File {
        
        public FileClient() {
        }
        
        public FileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long MainFileLength(string connectionId, string documentId, string versionId) {
            return base.Channel.MainFileLength(connectionId, documentId, versionId);
        }
        
        public System.Threading.Tasks.Task<long> MainFileLengthAsync(string connectionId, string documentId, string versionId) {
            return base.Channel.MainFileLengthAsync(connectionId, documentId, versionId);
        }
        
        public System.IO.Stream DownloadFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, bool ignoreHashValidation) {
            return base.Channel.DownloadFile(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, ignoreHashValidation);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, bool ignoreHashValidation) {
            return base.Channel.DownloadFileAsync(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, ignoreHashValidation);
        }
        
        public byte[] DownloadFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, long from, int count, bool ignoreHashValidation) {
            return base.Channel.DownloadFileBytes(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, from, count, ignoreHashValidation);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, long from, int count, bool ignoreHashValidation) {
            return base.Channel.DownloadFileBytesAsync(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, from, count, ignoreHashValidation);
        }
        
        public string UploadFileBytes(string connectionId, string fileId, byte[] bytes, int from) {
            return base.Channel.UploadFileBytes(connectionId, fileId, bytes, from);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileBytesAsync(string connectionId, string fileId, byte[] bytes, int from) {
            return base.Channel.UploadFileBytesAsync(connectionId, fileId, bytes, from);
        }
        
        public System.IO.Stream DownloadSignatureFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId) {
            return base.Channel.DownloadSignatureFile(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadSignatureFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId) {
            return base.Channel.DownloadSignatureFileAsync(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId);
        }
        
        public byte[] DownloadSignatureFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count) {
            return base.Channel.DownloadSignatureFileBytes(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId, from, count);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadSignatureFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count) {
            return base.Channel.DownloadSignatureFileBytesAsync(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId, from, count);
        }
        
        public System.IO.Stream DownloadSignatureReportFile(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId) {
            return base.Channel.DownloadSignatureReportFile(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadSignatureReportFileAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId) {
            return base.Channel.DownloadSignatureReportFileAsync(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId);
        }
        
        public byte[] DownloadSignatureReportFileBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count) {
            return base.Channel.DownloadSignatureReportFileBytes(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId, from, count);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadSignatureReportFileBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string contentProtectionId, int from, int count) {
            return base.Channel.DownloadSignatureReportFileBytesAsync(connectionId, documentId, versionId, documentDataId, renditionId, contentProtectionId, from, count);
        }
        
        public System.IO.Stream DownloadFileConverted(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions) {
            return base.Channel.DownloadFileConverted(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, convertingOptions);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileConvertedAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions) {
            return base.Channel.DownloadFileConvertedAsync(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, convertingOptions);
        }
        
        public byte[] DownloadFileConvertedBytes(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions, int from, int count) {
            return base.Channel.DownloadFileConvertedBytes(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, convertingOptions, from, count);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadFileConvertedBytesAsync(string connectionId, string documentId, string versionId, string documentDataId, string renditionId, string accessTypeEnum, docreminder.InfoShareService.ConvertingOptionsContract convertingOptions, int from, int count) {
            return base.Channel.DownloadFileConvertedBytesAsync(connectionId, documentId, versionId, documentDataId, renditionId, accessTypeEnum, convertingOptions, from, count);
        }
        
        public byte[] DownloadThumbnailBytes(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber) {
            return base.Channel.DownloadThumbnailBytes(connectionId, documentId, documentDataId, renditionId, pageNumber);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadThumbnailBytesAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber) {
            return base.Channel.DownloadThumbnailBytesAsync(connectionId, documentId, documentDataId, renditionId, pageNumber);
        }
        
        public System.IO.Stream DownloadThumbnail(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber) {
            return base.Channel.DownloadThumbnail(connectionId, documentId, documentDataId, renditionId, pageNumber);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadThumbnailAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumber) {
            return base.Channel.DownloadThumbnailAsync(connectionId, documentId, documentDataId, renditionId, pageNumber);
        }
        
        public System.IO.Stream[] DownloadThumbnails(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumberFrom, int pageNumberTo) {
            return base.Channel.DownloadThumbnails(connectionId, documentId, documentDataId, renditionId, pageNumberFrom, pageNumberTo);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream[]> DownloadThumbnailsAsync(string connectionId, string documentId, string documentDataId, string renditionId, int pageNumberFrom, int pageNumberTo) {
            return base.Channel.DownloadThumbnailsAsync(connectionId, documentId, documentDataId, renditionId, pageNumberFrom, pageNumberTo);
        }
        
        public int GetThumbnailCount(string connectionId, string documentId, string documentDataId, string renditionId) {
            return base.Channel.GetThumbnailCount(connectionId, documentId, documentDataId, renditionId);
        }
        
        public System.Threading.Tasks.Task<int> GetThumbnailCountAsync(string connectionId, string documentId, string documentDataId, string renditionId) {
            return base.Channel.GetThumbnailCountAsync(connectionId, documentId, documentDataId, renditionId);
        }
        
        public void ReleaseFile(string connectionId, string fileId) {
            base.Channel.ReleaseFile(connectionId, fileId);
        }
        
        public System.Threading.Tasks.Task ReleaseFileAsync(string connectionId, string fileId) {
            return base.Channel.ReleaseFileAsync(connectionId, fileId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Process")]
    public interface Process {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/GetProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/GetProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/GetProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract GetProcess(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/GetProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/GetProcessResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> GetProcessAsync(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/GetProcesses", ReplyAction="http://www.kendox.com/InfoShare/Process/GetProcessesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/GetProcessesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract[] GetProcesses(string connectionId, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/GetProcesses", ReplyAction="http://www.kendox.com/InfoShare/Process/GetProcessesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract[]> GetProcessesAsync(string connectionId, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/DeleteProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/DeleteProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/DeleteProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteProcess(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/DeleteProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/DeleteProcessResponse")]
        System.Threading.Tasks.Task DeleteProcessAsync(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/DeleteProcesses", ReplyAction="http://www.kendox.com/InfoShare/Process/DeleteProcessesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/DeleteProcessesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] DeleteProcesses(string connectionId, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/DeleteProcesses", ReplyAction="http://www.kendox.com/InfoShare/Process/DeleteProcessesResponse")]
        System.Threading.Tasks.Task<string[]> DeleteProcessesAsync(string connectionId, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CreateProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/CreateProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/CreateProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract CreateProcess(string connectionId, docreminder.InfoShareService.ProcessContract process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CreateProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/CreateProcessResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CreateProcessAsync(string connectionId, docreminder.InfoShareService.ProcessContract process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/UpdateProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/UpdateProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/UpdateProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract UpdateProcess(string connectionId, docreminder.InfoShareService.ProcessContract process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/UpdateProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/UpdateProcessResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> UpdateProcessAsync(string connectionId, docreminder.InfoShareService.ProcessContract process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CloseTask", ReplyAction="http://www.kendox.com/InfoShare/Process/CloseTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/CloseTaskServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract CloseTask(string connectionId, string processId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CloseTask", ReplyAction="http://www.kendox.com/InfoShare/Process/CloseTaskResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CloseTaskAsync(string connectionId, string processId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CloseProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/CloseProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/CloseProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract CloseProcess(string connectionId, string processId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CloseProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/CloseProcessResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CloseProcessAsync(string connectionId, string processId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/UndoCheckOutProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/UndoCheckOutProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/UndoCheckOutProcessServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UndoCheckOutProcess(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/UndoCheckOutProcess", ReplyAction="http://www.kendox.com/InfoShare/Process/UndoCheckOutProcessResponse")]
        System.Threading.Tasks.Task UndoCheckOutProcessAsync(string connectionId, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CallWebServiceUserTask", ReplyAction="http://www.kendox.com/InfoShare/Process/CallWebServiceUserTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/CallWebServiceUserTaskServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessUserTaskParameterContract CallWebServiceUserTask(string connectionId, string processId, string webServiceUrl, string currentTaskTemplateId, bool isChangeOfUsersAllowed, bool areOnlyUserGroupsFromAvailableUserGroupsAllowed, string requestType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/CallWebServiceUserTask", ReplyAction="http://www.kendox.com/InfoShare/Process/CallWebServiceUserTaskResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessUserTaskParameterContract> CallWebServiceUserTaskAsync(string connectionId, string processId, string webServiceUrl, string currentTaskTemplateId, bool isChangeOfUsersAllowed, bool areOnlyUserGroupsFromAvailableUserGroupsAllowed, string requestType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/ForwardTask", ReplyAction="http://www.kendox.com/InfoShare/Process/ForwardTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Process/ForwardTaskServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ProcessContract ForwardTask(string connectionId, string processId, string[] assignedUserIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Process/ForwardTask", ReplyAction="http://www.kendox.com/InfoShare/Process/ForwardTaskResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> ForwardTaskAsync(string connectionId, string processId, string[] assignedUserIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProcessChannel : docreminder.InfoShareService.Process, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Process>, docreminder.InfoShareService.Process {
        
        public ProcessClient() {
        }
        
        public ProcessClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.ProcessContract GetProcess(string connectionId, string processId) {
            return base.Channel.GetProcess(connectionId, processId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> GetProcessAsync(string connectionId, string processId) {
            return base.Channel.GetProcessAsync(connectionId, processId);
        }
        
        public docreminder.InfoShareService.ProcessContract[] GetProcesses(string connectionId, string[] processIds) {
            return base.Channel.GetProcesses(connectionId, processIds);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract[]> GetProcessesAsync(string connectionId, string[] processIds) {
            return base.Channel.GetProcessesAsync(connectionId, processIds);
        }
        
        public void DeleteProcess(string connectionId, string processId) {
            base.Channel.DeleteProcess(connectionId, processId);
        }
        
        public System.Threading.Tasks.Task DeleteProcessAsync(string connectionId, string processId) {
            return base.Channel.DeleteProcessAsync(connectionId, processId);
        }
        
        public string[] DeleteProcesses(string connectionId, string[] processIds) {
            return base.Channel.DeleteProcesses(connectionId, processIds);
        }
        
        public System.Threading.Tasks.Task<string[]> DeleteProcessesAsync(string connectionId, string[] processIds) {
            return base.Channel.DeleteProcessesAsync(connectionId, processIds);
        }
        
        public docreminder.InfoShareService.ProcessContract CreateProcess(string connectionId, docreminder.InfoShareService.ProcessContract process) {
            return base.Channel.CreateProcess(connectionId, process);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CreateProcessAsync(string connectionId, docreminder.InfoShareService.ProcessContract process) {
            return base.Channel.CreateProcessAsync(connectionId, process);
        }
        
        public docreminder.InfoShareService.ProcessContract UpdateProcess(string connectionId, docreminder.InfoShareService.ProcessContract process) {
            return base.Channel.UpdateProcess(connectionId, process);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> UpdateProcessAsync(string connectionId, docreminder.InfoShareService.ProcessContract process) {
            return base.Channel.UpdateProcessAsync(connectionId, process);
        }
        
        public docreminder.InfoShareService.ProcessContract CloseTask(string connectionId, string processId, string comment) {
            return base.Channel.CloseTask(connectionId, processId, comment);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CloseTaskAsync(string connectionId, string processId, string comment) {
            return base.Channel.CloseTaskAsync(connectionId, processId, comment);
        }
        
        public docreminder.InfoShareService.ProcessContract CloseProcess(string connectionId, string processId, string comment) {
            return base.Channel.CloseProcess(connectionId, processId, comment);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> CloseProcessAsync(string connectionId, string processId, string comment) {
            return base.Channel.CloseProcessAsync(connectionId, processId, comment);
        }
        
        public void UndoCheckOutProcess(string connectionId, string processId) {
            base.Channel.UndoCheckOutProcess(connectionId, processId);
        }
        
        public System.Threading.Tasks.Task UndoCheckOutProcessAsync(string connectionId, string processId) {
            return base.Channel.UndoCheckOutProcessAsync(connectionId, processId);
        }
        
        public docreminder.InfoShareService.ProcessUserTaskParameterContract CallWebServiceUserTask(string connectionId, string processId, string webServiceUrl, string currentTaskTemplateId, bool isChangeOfUsersAllowed, bool areOnlyUserGroupsFromAvailableUserGroupsAllowed, string requestType) {
            return base.Channel.CallWebServiceUserTask(connectionId, processId, webServiceUrl, currentTaskTemplateId, isChangeOfUsersAllowed, areOnlyUserGroupsFromAvailableUserGroupsAllowed, requestType);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessUserTaskParameterContract> CallWebServiceUserTaskAsync(string connectionId, string processId, string webServiceUrl, string currentTaskTemplateId, bool isChangeOfUsersAllowed, bool areOnlyUserGroupsFromAvailableUserGroupsAllowed, string requestType) {
            return base.Channel.CallWebServiceUserTaskAsync(connectionId, processId, webServiceUrl, currentTaskTemplateId, isChangeOfUsersAllowed, areOnlyUserGroupsFromAvailableUserGroupsAllowed, requestType);
        }
        
        public docreminder.InfoShareService.ProcessContract ForwardTask(string connectionId, string processId, string[] assignedUserIds) {
            return base.Channel.ForwardTask(connectionId, processId, assignedUserIds);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ProcessContract> ForwardTaskAsync(string connectionId, string processId, string[] assignedUserIds) {
            return base.Channel.ForwardTaskAsync(connectionId, processId, assignedUserIds);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.UserTable")]
    public interface UserTable {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableExportData", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableExportDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableExportDataServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[][] UserTableExportData(string connectionId, string userTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableExportData", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableExportDataResponse")]
        System.Threading.Tasks.Task<string[][]> UserTableExportDataAsync(string connectionId, string userTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecords", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[][] UserTableGetRecords(string connectionId, string userTable, string whereClause, string orderByClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecords", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsResponse")]
        System.Threading.Tasks.Task<string[][]> UserTableGetRecordsAsync(string connectionId, string userTable, string whereClause, string orderByClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsCount", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsCountServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int UserTableGetRecordsCount(string connectionId, string userTable, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsCount", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetRecordsCountResponse")]
        System.Threading.Tasks.Task<int> UserTableGetRecordsCountAsync(string connectionId, string userTable, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableDeleteRecords", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableDeleteRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableDeleteRecordsServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int UserTableDeleteRecords(string connectionId, string userTable, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableDeleteRecords", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableDeleteRecordsResponse")]
        System.Threading.Tasks.Task<int> UserTableDeleteRecordsAsync(string connectionId, string userTable, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableInsertRecord", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableInsertRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableInsertRecordServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UserTableInsertRecord(string connectionId, string userTable, string[] record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableInsertRecord", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableInsertRecordResponse")]
        System.Threading.Tasks.Task UserTableInsertRecordAsync(string connectionId, string userTable, string[] record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableImportData", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableImportDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableImportDataServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void UserTableImportData(string connectionId, string userTable, string[][] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableImportData", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableImportDataResponse")]
        System.Threading.Tasks.Task UserTableImportDataAsync(string connectionId, string userTable, string[][] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetAllTableNames", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetAllTableNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetAllTableNamesServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] UserTableGetAllTableNames(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/UserTable/UserTableGetAllTableNames", ReplyAction="http://www.kendox.com/InfoShare/UserTable/UserTableGetAllTableNamesResponse")]
        System.Threading.Tasks.Task<string[]> UserTableGetAllTableNamesAsync(string connectionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserTableChannel : docreminder.InfoShareService.UserTable, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserTableClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.UserTable>, docreminder.InfoShareService.UserTable {
        
        public UserTableClient() {
        }
        
        public UserTableClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserTableClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserTableClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserTableClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[][] UserTableExportData(string connectionId, string userTable) {
            return base.Channel.UserTableExportData(connectionId, userTable);
        }
        
        public System.Threading.Tasks.Task<string[][]> UserTableExportDataAsync(string connectionId, string userTable) {
            return base.Channel.UserTableExportDataAsync(connectionId, userTable);
        }
        
        public string[][] UserTableGetRecords(string connectionId, string userTable, string whereClause, string orderByClause) {
            return base.Channel.UserTableGetRecords(connectionId, userTable, whereClause, orderByClause);
        }
        
        public System.Threading.Tasks.Task<string[][]> UserTableGetRecordsAsync(string connectionId, string userTable, string whereClause, string orderByClause) {
            return base.Channel.UserTableGetRecordsAsync(connectionId, userTable, whereClause, orderByClause);
        }
        
        public int UserTableGetRecordsCount(string connectionId, string userTable, string whereClause) {
            return base.Channel.UserTableGetRecordsCount(connectionId, userTable, whereClause);
        }
        
        public System.Threading.Tasks.Task<int> UserTableGetRecordsCountAsync(string connectionId, string userTable, string whereClause) {
            return base.Channel.UserTableGetRecordsCountAsync(connectionId, userTable, whereClause);
        }
        
        public int UserTableDeleteRecords(string connectionId, string userTable, string whereClause) {
            return base.Channel.UserTableDeleteRecords(connectionId, userTable, whereClause);
        }
        
        public System.Threading.Tasks.Task<int> UserTableDeleteRecordsAsync(string connectionId, string userTable, string whereClause) {
            return base.Channel.UserTableDeleteRecordsAsync(connectionId, userTable, whereClause);
        }
        
        public void UserTableInsertRecord(string connectionId, string userTable, string[] record) {
            base.Channel.UserTableInsertRecord(connectionId, userTable, record);
        }
        
        public System.Threading.Tasks.Task UserTableInsertRecordAsync(string connectionId, string userTable, string[] record) {
            return base.Channel.UserTableInsertRecordAsync(connectionId, userTable, record);
        }
        
        public void UserTableImportData(string connectionId, string userTable, string[][] values) {
            base.Channel.UserTableImportData(connectionId, userTable, values);
        }
        
        public System.Threading.Tasks.Task UserTableImportDataAsync(string connectionId, string userTable, string[][] values) {
            return base.Channel.UserTableImportDataAsync(connectionId, userTable, values);
        }
        
        public string[] UserTableGetAllTableNames(string connectionId) {
            return base.Channel.UserTableGetAllTableNames(connectionId);
        }
        
        public System.Threading.Tasks.Task<string[]> UserTableGetAllTableNamesAsync(string connectionId) {
            return base.Channel.UserTableGetAllTableNamesAsync(connectionId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Folder")]
    public interface Folder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/GetFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderContract GetFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> GetFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/CreateFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/CreateFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/CreateFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderContract CreateFolder(string connectionId, docreminder.InfoShareService.FolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/CreateFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/CreateFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> CreateFolderAsync(string connectionId, docreminder.InfoShareService.FolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/DeleteFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/DeleteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/DeleteFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/DeleteFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/DeleteFolderResponse")]
        System.Threading.Tasks.Task DeleteFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/UpdateFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderContract UpdateFolder(string connectionId, docreminder.InfoShareService.FolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> UpdateFolderAsync(string connectionId, docreminder.InfoShareService.FolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/SetFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Folder/SetFolderColumnConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/SetFolderColumnConfigurationServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetFolderColumnConfiguration(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/SetFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Folder/SetFolderColumnConfigurationResponse")]
        System.Threading.Tasks.Task SetFolderColumnConfigurationAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationServiceExcep" +
            "tionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetFolderColumnConfiguration(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationResponse")]
        System.Threading.Tasks.Task ResetFolderColumnConfigurationAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForUserId", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForUserIdRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForUserIdSer" +
            "viceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetFolderColumnConfigurationForUserId(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForUserId", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForUserIdRes" +
            "ponse")]
        System.Threading.Tasks.Task ResetFolderColumnConfigurationForUserIdAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForAllUsers", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForAllUsersR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForAllUsersS" +
            "erviceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetFolderColumnConfigurationForAllUsers(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForAllUsers", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetFolderColumnConfigurationForAllUsersR" +
            "esponse")]
        System.Threading.Tasks.Task ResetFolderColumnConfigurationForAllUsersAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetAllFolderColumnConfigurations", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetAllFolderColumnConfigurationsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/ResetAllFolderColumnConfigurationsServiceE" +
            "xceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetAllFolderColumnConfigurations(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/ResetAllFolderColumnConfigurations", ReplyAction="http://www.kendox.com/InfoShare/Folder/ResetAllFolderColumnConfigurationsResponse" +
            "")]
        System.Threading.Tasks.Task ResetAllFolderColumnConfigurationsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetSubFolders", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetSubFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/GetSubFoldersServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderContract GetSubFolders(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetSubFolders", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetSubFoldersResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> GetSubFoldersAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/GetSearchFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchFolderContract GetSearchFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetSearchFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> GetSearchFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/CreateSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/CreateSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/CreateSearchFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchFolderContract CreateSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/CreateSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/CreateSearchFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> CreateSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/UpdateSearchFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchFolderContract UpdateSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateSearchFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> UpdateSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetDefaultSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetDefaultSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/GetDefaultSearchFolderServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchFolderContract GetDefaultSearchFolder(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/GetDefaultSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/GetDefaultSearchFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> GetDefaultSearchFolderAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateDefaultSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateDefaultSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/UpdateDefaultSearchFolderServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.SearchFolderContract UpdateDefaultSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/UpdateDefaultSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/UpdateDefaultSearchFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> UpdateDefaultSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/MoveFolderElement", ReplyAction="http://www.kendox.com/InfoShare/Folder/MoveFolderElementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/MoveFolderElementServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void MoveFolderElement(string connectionId, docreminder.InfoShareService.FolderPathContract sourceFolderElementPath, docreminder.InfoShareService.FolderPathContract targetFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/MoveFolderElement", ReplyAction="http://www.kendox.com/InfoShare/Folder/MoveFolderElementResponse")]
        System.Threading.Tasks.Task MoveFolderElementAsync(string connectionId, docreminder.InfoShareService.FolderPathContract sourceFolderElementPath, docreminder.InfoShareService.FolderPathContract targetFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RenameFolderElement", ReplyAction="http://www.kendox.com/InfoShare/Folder/RenameFolderElementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/RenameFolderElementServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RenameFolderElement(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath, docreminder.InfoShareService.StringGlobalContract newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RenameFolderElement", ReplyAction="http://www.kendox.com/InfoShare/Folder/RenameFolderElementResponse")]
        System.Threading.Tasks.Task RenameFolderElementAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath, docreminder.InfoShareService.StringGlobalContract newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RemoveElementFromFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/RemoveElementFromFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/RemoveElementFromFolderServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveElementFromFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RemoveElementFromFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/RemoveElementFromFolderResponse")]
        System.Threading.Tasks.Task RemoveElementFromFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RemoveElementsFromFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/RemoveElementsFromFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/RemoveElementsFromFolderServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveElementsFromFolder(string connectionId, docreminder.InfoShareService.FolderPathContract[] folderElementPaths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/RemoveElementsFromFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/RemoveElementsFromFolderResponse")]
        System.Threading.Tasks.Task RemoveElementsFromFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract[] folderElementPaths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocument", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string AddFolderElementDocument(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocument", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentResponse")]
        System.Threading.Tasks.Task<string> AddFolderElementDocumentAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocuments", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentsServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] AddFolderElementDocuments(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocuments", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementDocumentsResponse")]
        System.Threading.Tasks.Task<string[]> AddFolderElementDocumentsAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcess", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string AddFolderElementProcess(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcess", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessResponse")]
        System.Threading.Tasks.Task<string> AddFolderElementProcessAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcesses", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessesServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] AddFolderElementProcesses(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcesses", ReplyAction="http://www.kendox.com/InfoShare/Folder/AddFolderElementProcessesResponse")]
        System.Threading.Tasks.Task<string[]> AddFolderElementProcessesAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] processIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/FindFolders", ReplyAction="http://www.kendox.com/InfoShare/Folder/FindFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/FindFoldersServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.FolderPathContract[] FindFolders(string connectionId, docreminder.InfoShareService.FolderSearchOptionContract searchOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/FindFolders", ReplyAction="http://www.kendox.com/InfoShare/Folder/FindFoldersResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.FolderPathContract[]> FindFoldersAsync(string connectionId, docreminder.InfoShareService.FolderSearchOptionContract searchOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/DeleteSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/DeleteSearchFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Folder/DeleteSearchFolderServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteSearchFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Folder/DeleteSearchFolder", ReplyAction="http://www.kendox.com/InfoShare/Folder/DeleteSearchFolderResponse")]
        System.Threading.Tasks.Task DeleteSearchFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FolderChannel : docreminder.InfoShareService.Folder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FolderClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Folder>, docreminder.InfoShareService.Folder {
        
        public FolderClient() {
        }
        
        public FolderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FolderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.FolderContract GetFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetFolder(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> GetFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetFolderAsync(connectionId, folderPath);
        }
        
        public docreminder.InfoShareService.FolderContract CreateFolder(string connectionId, docreminder.InfoShareService.FolderContract folder) {
            return base.Channel.CreateFolder(connectionId, folder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> CreateFolderAsync(string connectionId, docreminder.InfoShareService.FolderContract folder) {
            return base.Channel.CreateFolderAsync(connectionId, folder);
        }
        
        public void DeleteFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            base.Channel.DeleteFolder(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task DeleteFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.DeleteFolderAsync(connectionId, folderPath);
        }
        
        public docreminder.InfoShareService.FolderContract UpdateFolder(string connectionId, docreminder.InfoShareService.FolderContract folder) {
            return base.Channel.UpdateFolder(connectionId, folder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> UpdateFolderAsync(string connectionId, docreminder.InfoShareService.FolderContract folder) {
            return base.Channel.UpdateFolderAsync(connectionId, folder);
        }
        
        public void SetFolderColumnConfiguration(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration) {
            base.Channel.SetFolderColumnConfiguration(connectionId, folderPath, columnConfiguration, setAsMasterConfiguration);
        }
        
        public System.Threading.Tasks.Task SetFolderColumnConfigurationAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration) {
            return base.Channel.SetFolderColumnConfigurationAsync(connectionId, folderPath, columnConfiguration, setAsMasterConfiguration);
        }
        
        public void ResetFolderColumnConfiguration(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            base.Channel.ResetFolderColumnConfiguration(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task ResetFolderColumnConfigurationAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.ResetFolderColumnConfigurationAsync(connectionId, folderPath);
        }
        
        public void ResetFolderColumnConfigurationForUserId(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string userId) {
            base.Channel.ResetFolderColumnConfigurationForUserId(connectionId, folderPath, userId);
        }
        
        public System.Threading.Tasks.Task ResetFolderColumnConfigurationForUserIdAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string userId) {
            return base.Channel.ResetFolderColumnConfigurationForUserIdAsync(connectionId, folderPath, userId);
        }
        
        public void ResetFolderColumnConfigurationForAllUsers(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            base.Channel.ResetFolderColumnConfigurationForAllUsers(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task ResetFolderColumnConfigurationForAllUsersAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.ResetFolderColumnConfigurationForAllUsersAsync(connectionId, folderPath);
        }
        
        public void ResetAllFolderColumnConfigurations(string connectionId) {
            base.Channel.ResetAllFolderColumnConfigurations(connectionId);
        }
        
        public System.Threading.Tasks.Task ResetAllFolderColumnConfigurationsAsync(string connectionId) {
            return base.Channel.ResetAllFolderColumnConfigurationsAsync(connectionId);
        }
        
        public docreminder.InfoShareService.FolderContract GetSubFolders(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetSubFolders(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderContract> GetSubFoldersAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetSubFoldersAsync(connectionId, folderPath);
        }
        
        public docreminder.InfoShareService.SearchFolderContract GetSearchFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetSearchFolder(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> GetSearchFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.GetSearchFolderAsync(connectionId, folderPath);
        }
        
        public docreminder.InfoShareService.SearchFolderContract CreateSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.CreateSearchFolder(connectionId, searchFolder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> CreateSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.CreateSearchFolderAsync(connectionId, searchFolder);
        }
        
        public docreminder.InfoShareService.SearchFolderContract UpdateSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.UpdateSearchFolder(connectionId, searchFolder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> UpdateSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.UpdateSearchFolderAsync(connectionId, searchFolder);
        }
        
        public docreminder.InfoShareService.SearchFolderContract GetDefaultSearchFolder(string connectionId) {
            return base.Channel.GetDefaultSearchFolder(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> GetDefaultSearchFolderAsync(string connectionId) {
            return base.Channel.GetDefaultSearchFolderAsync(connectionId);
        }
        
        public docreminder.InfoShareService.SearchFolderContract UpdateDefaultSearchFolder(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.UpdateDefaultSearchFolder(connectionId, searchFolder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.SearchFolderContract> UpdateDefaultSearchFolderAsync(string connectionId, docreminder.InfoShareService.SearchFolderContract searchFolder) {
            return base.Channel.UpdateDefaultSearchFolderAsync(connectionId, searchFolder);
        }
        
        public void MoveFolderElement(string connectionId, docreminder.InfoShareService.FolderPathContract sourceFolderElementPath, docreminder.InfoShareService.FolderPathContract targetFolderPath) {
            base.Channel.MoveFolderElement(connectionId, sourceFolderElementPath, targetFolderPath);
        }
        
        public System.Threading.Tasks.Task MoveFolderElementAsync(string connectionId, docreminder.InfoShareService.FolderPathContract sourceFolderElementPath, docreminder.InfoShareService.FolderPathContract targetFolderPath) {
            return base.Channel.MoveFolderElementAsync(connectionId, sourceFolderElementPath, targetFolderPath);
        }
        
        public void RenameFolderElement(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath, docreminder.InfoShareService.StringGlobalContract newName) {
            base.Channel.RenameFolderElement(connectionId, folderElementPath, newName);
        }
        
        public System.Threading.Tasks.Task RenameFolderElementAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath, docreminder.InfoShareService.StringGlobalContract newName) {
            return base.Channel.RenameFolderElementAsync(connectionId, folderElementPath, newName);
        }
        
        public void RemoveElementFromFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath) {
            base.Channel.RemoveElementFromFolder(connectionId, folderElementPath);
        }
        
        public System.Threading.Tasks.Task RemoveElementFromFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderElementPath) {
            return base.Channel.RemoveElementFromFolderAsync(connectionId, folderElementPath);
        }
        
        public void RemoveElementsFromFolder(string connectionId, docreminder.InfoShareService.FolderPathContract[] folderElementPaths) {
            base.Channel.RemoveElementsFromFolder(connectionId, folderElementPaths);
        }
        
        public System.Threading.Tasks.Task RemoveElementsFromFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract[] folderElementPaths) {
            return base.Channel.RemoveElementsFromFolderAsync(connectionId, folderElementPaths);
        }
        
        public string AddFolderElementDocument(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string documentId) {
            return base.Channel.AddFolderElementDocument(connectionId, folderPath, documentId);
        }
        
        public System.Threading.Tasks.Task<string> AddFolderElementDocumentAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string documentId) {
            return base.Channel.AddFolderElementDocumentAsync(connectionId, folderPath, documentId);
        }
        
        public string[] AddFolderElementDocuments(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] documentIds) {
            return base.Channel.AddFolderElementDocuments(connectionId, folderPath, documentIds);
        }
        
        public System.Threading.Tasks.Task<string[]> AddFolderElementDocumentsAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] documentIds) {
            return base.Channel.AddFolderElementDocumentsAsync(connectionId, folderPath, documentIds);
        }
        
        public string AddFolderElementProcess(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string processId) {
            return base.Channel.AddFolderElementProcess(connectionId, folderPath, processId);
        }
        
        public System.Threading.Tasks.Task<string> AddFolderElementProcessAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string processId) {
            return base.Channel.AddFolderElementProcessAsync(connectionId, folderPath, processId);
        }
        
        public string[] AddFolderElementProcesses(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] processIds) {
            return base.Channel.AddFolderElementProcesses(connectionId, folderPath, processIds);
        }
        
        public System.Threading.Tasks.Task<string[]> AddFolderElementProcessesAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath, string[] processIds) {
            return base.Channel.AddFolderElementProcessesAsync(connectionId, folderPath, processIds);
        }
        
        public docreminder.InfoShareService.FolderPathContract[] FindFolders(string connectionId, docreminder.InfoShareService.FolderSearchOptionContract searchOptions) {
            return base.Channel.FindFolders(connectionId, searchOptions);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.FolderPathContract[]> FindFoldersAsync(string connectionId, docreminder.InfoShareService.FolderSearchOptionContract searchOptions) {
            return base.Channel.FindFoldersAsync(connectionId, searchOptions);
        }
        
        public void DeleteSearchFolder(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            base.Channel.DeleteSearchFolder(connectionId, folderPath);
        }
        
        public System.Threading.Tasks.Task DeleteSearchFolderAsync(string connectionId, docreminder.InfoShareService.FolderPathContract folderPath) {
            return base.Channel.DeleteSearchFolderAsync(connectionId, folderPath);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.RemoteFolder")]
    public interface RemoteFolder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/GetRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/GetRemoteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/GetRemoteFolderServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.RemoteFolderContract GetRemoteFolder(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/GetRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/GetRemoteFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> GetRemoteFolderAsync(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/CreateRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/CreateRemoteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/CreateRemoteFolderServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.RemoteFolderContract CreateRemoteFolder(string connectionId, docreminder.InfoShareService.RemoteFolderContract remoteFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/CreateRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/CreateRemoteFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> CreateRemoteFolderAsync(string connectionId, docreminder.InfoShareService.RemoteFolderContract remoteFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/DeleteRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/DeleteRemoteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/DeleteRemoteFolderServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void DeleteRemoteFolder(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/DeleteRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/DeleteRemoteFolderResponse")]
        System.Threading.Tasks.Task DeleteRemoteFolderAsync(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/UpdateRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/UpdateRemoteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/UpdateRemoteFolderServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.RemoteFolderContract UpdateRemoteFolder(string connectionId, docreminder.InfoShareService.RemoteFolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/UpdateRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/UpdateRemoteFolderResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> UpdateRemoteFolderAsync(string connectionId, docreminder.InfoShareService.RemoteFolderContract folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/MoveRemoteFolderElement", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/MoveRemoteFolderElementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/MoveRemoteFolderElementServiceExcept" +
            "ionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void MoveRemoteFolderElement(string connectionId, string sourceRemoteFolderElementPath, string targetRemoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/MoveRemoteFolderElement", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/MoveRemoteFolderElementResponse")]
        System.Threading.Tasks.Task MoveRemoteFolderElementAsync(string connectionId, string sourceRemoteFolderElementPath, string targetRemoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentToRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentToRemoteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentToRemoteFolderServiceExce" +
            "ptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string AddDocumentToRemoteFolder(string connectionId, string remoteFolderPath, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentToRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentToRemoteFolderResponse")]
        System.Threading.Tasks.Task<string> AddDocumentToRemoteFolderAsync(string connectionId, string remoteFolderPath, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentListToRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentListToRemoteFolderRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentListToRemoteFolderService" +
            "ExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] AddDocumentListToRemoteFolder(string connectionId, string remoteFolderPath, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentListToRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/AddDocumentListToRemoteFolderRespons" +
            "e")]
        System.Threading.Tasks.Task<string[]> AddDocumentListToRemoteFolderAsync(string connectionId, string remoteFolderPath, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementFromRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementFromRemoteFolderRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementFromRemoteFolderService" +
            "ExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveElementFromRemoteFolder(string connectionId, string remoteFolderElementPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementFromRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementFromRemoteFolderRespons" +
            "e")]
        System.Threading.Tasks.Task RemoveElementFromRemoteFolderAsync(string connectionId, string remoteFolderElementPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementsFromRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementsFromRemoteFolderRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementsFromRemoteFolderServic" +
            "eExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveElementsFromRemoteFolder(string connectionId, string[] remoteFolderElementPaths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementsFromRemoteFolder", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RemoveElementsFromRemoteFolderRespon" +
            "se")]
        System.Threading.Tasks.Task RemoveElementsFromRemoteFolderAsync(string connectionId, string[] remoteFolderElementPaths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RenameRemoteFolderElement", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RenameRemoteFolderElementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/RenameRemoteFolderElementServiceExce" +
            "ptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string RenameRemoteFolderElement(string connectionId, string remoteFolderElementPath, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/RenameRemoteFolderElement", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/RenameRemoteFolderElementResponse")]
        System.Threading.Tasks.Task<string> RenameRemoteFolderElementAsync(string connectionId, string remoteFolderElementPath, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/FindRemoteFolders", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/FindRemoteFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/FindRemoteFoldersServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] FindRemoteFolders(string connectionId, string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/FindRemoteFolders", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/FindRemoteFoldersResponse")]
        System.Threading.Tasks.Task<string[]> FindRemoteFoldersAsync(string connectionId, string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/SetRemoteFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/SetRemoteFolderColumnConfigurationRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/SetRemoteFolderColumnConfigurationSe" +
            "rviceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetRemoteFolderColumnConfiguration(string connectionId, string remoteFolderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/SetRemoteFolderColumnConfiguration", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/SetRemoteFolderColumnConfigurationRe" +
            "sponse")]
        System.Threading.Tasks.Task SetRemoteFolderColumnConfigurationAsync(string connectionId, string remoteFolderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetRemoteFolderColumnConfiguration(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "Response")]
        System.Threading.Tasks.Task ResetRemoteFolderColumnConfigurationAsync(string connectionId, string remoteFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ForUserId", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ForUserIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ForUserIdServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void ResetRemoteFolderColumnConfigurationForUserId(string connectionId, string remoteFolderPath, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ForUserId", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/ResetRemoteFolderColumnConfiguration" +
            "ForUserIdResponse")]
        System.Threading.Tasks.Task ResetRemoteFolderColumnConfigurationForUserIdAsync(string connectionId, string remoteFolderPath, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/GetAllRemoteFolders", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/GetAllRemoteFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/RemoteFolder/GetAllRemoteFoldersServiceExceptionF" +
            "ault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetAllRemoteFolders(string connectionId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/RemoteFolder/GetAllRemoteFolders", ReplyAction="http://www.kendox.com/InfoShare/RemoteFolder/GetAllRemoteFoldersResponse")]
        System.Threading.Tasks.Task<string[]> GetAllRemoteFoldersAsync(string connectionId, string documentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RemoteFolderChannel : docreminder.InfoShareService.RemoteFolder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteFolderClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.RemoteFolder>, docreminder.InfoShareService.RemoteFolder {
        
        public RemoteFolderClient() {
        }
        
        public RemoteFolderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteFolderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteFolderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteFolderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.RemoteFolderContract GetRemoteFolder(string connectionId, string remoteFolderPath) {
            return base.Channel.GetRemoteFolder(connectionId, remoteFolderPath);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> GetRemoteFolderAsync(string connectionId, string remoteFolderPath) {
            return base.Channel.GetRemoteFolderAsync(connectionId, remoteFolderPath);
        }
        
        public docreminder.InfoShareService.RemoteFolderContract CreateRemoteFolder(string connectionId, docreminder.InfoShareService.RemoteFolderContract remoteFolder) {
            return base.Channel.CreateRemoteFolder(connectionId, remoteFolder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> CreateRemoteFolderAsync(string connectionId, docreminder.InfoShareService.RemoteFolderContract remoteFolder) {
            return base.Channel.CreateRemoteFolderAsync(connectionId, remoteFolder);
        }
        
        public void DeleteRemoteFolder(string connectionId, string remoteFolderPath) {
            base.Channel.DeleteRemoteFolder(connectionId, remoteFolderPath);
        }
        
        public System.Threading.Tasks.Task DeleteRemoteFolderAsync(string connectionId, string remoteFolderPath) {
            return base.Channel.DeleteRemoteFolderAsync(connectionId, remoteFolderPath);
        }
        
        public docreminder.InfoShareService.RemoteFolderContract UpdateRemoteFolder(string connectionId, docreminder.InfoShareService.RemoteFolderContract folder) {
            return base.Channel.UpdateRemoteFolder(connectionId, folder);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteFolderContract> UpdateRemoteFolderAsync(string connectionId, docreminder.InfoShareService.RemoteFolderContract folder) {
            return base.Channel.UpdateRemoteFolderAsync(connectionId, folder);
        }
        
        public void MoveRemoteFolderElement(string connectionId, string sourceRemoteFolderElementPath, string targetRemoteFolderPath) {
            base.Channel.MoveRemoteFolderElement(connectionId, sourceRemoteFolderElementPath, targetRemoteFolderPath);
        }
        
        public System.Threading.Tasks.Task MoveRemoteFolderElementAsync(string connectionId, string sourceRemoteFolderElementPath, string targetRemoteFolderPath) {
            return base.Channel.MoveRemoteFolderElementAsync(connectionId, sourceRemoteFolderElementPath, targetRemoteFolderPath);
        }
        
        public string AddDocumentToRemoteFolder(string connectionId, string remoteFolderPath, string documentId) {
            return base.Channel.AddDocumentToRemoteFolder(connectionId, remoteFolderPath, documentId);
        }
        
        public System.Threading.Tasks.Task<string> AddDocumentToRemoteFolderAsync(string connectionId, string remoteFolderPath, string documentId) {
            return base.Channel.AddDocumentToRemoteFolderAsync(connectionId, remoteFolderPath, documentId);
        }
        
        public string[] AddDocumentListToRemoteFolder(string connectionId, string remoteFolderPath, string[] documentIds) {
            return base.Channel.AddDocumentListToRemoteFolder(connectionId, remoteFolderPath, documentIds);
        }
        
        public System.Threading.Tasks.Task<string[]> AddDocumentListToRemoteFolderAsync(string connectionId, string remoteFolderPath, string[] documentIds) {
            return base.Channel.AddDocumentListToRemoteFolderAsync(connectionId, remoteFolderPath, documentIds);
        }
        
        public void RemoveElementFromRemoteFolder(string connectionId, string remoteFolderElementPath) {
            base.Channel.RemoveElementFromRemoteFolder(connectionId, remoteFolderElementPath);
        }
        
        public System.Threading.Tasks.Task RemoveElementFromRemoteFolderAsync(string connectionId, string remoteFolderElementPath) {
            return base.Channel.RemoveElementFromRemoteFolderAsync(connectionId, remoteFolderElementPath);
        }
        
        public void RemoveElementsFromRemoteFolder(string connectionId, string[] remoteFolderElementPaths) {
            base.Channel.RemoveElementsFromRemoteFolder(connectionId, remoteFolderElementPaths);
        }
        
        public System.Threading.Tasks.Task RemoveElementsFromRemoteFolderAsync(string connectionId, string[] remoteFolderElementPaths) {
            return base.Channel.RemoveElementsFromRemoteFolderAsync(connectionId, remoteFolderElementPaths);
        }
        
        public string RenameRemoteFolderElement(string connectionId, string remoteFolderElementPath, string newName) {
            return base.Channel.RenameRemoteFolderElement(connectionId, remoteFolderElementPath, newName);
        }
        
        public System.Threading.Tasks.Task<string> RenameRemoteFolderElementAsync(string connectionId, string remoteFolderElementPath, string newName) {
            return base.Channel.RenameRemoteFolderElementAsync(connectionId, remoteFolderElementPath, newName);
        }
        
        public string[] FindRemoteFolders(string connectionId, string searchString) {
            return base.Channel.FindRemoteFolders(connectionId, searchString);
        }
        
        public System.Threading.Tasks.Task<string[]> FindRemoteFoldersAsync(string connectionId, string searchString) {
            return base.Channel.FindRemoteFoldersAsync(connectionId, searchString);
        }
        
        public void SetRemoteFolderColumnConfiguration(string connectionId, string remoteFolderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration) {
            base.Channel.SetRemoteFolderColumnConfiguration(connectionId, remoteFolderPath, columnConfiguration, setAsMasterConfiguration);
        }
        
        public System.Threading.Tasks.Task SetRemoteFolderColumnConfigurationAsync(string connectionId, string remoteFolderPath, docreminder.InfoShareService.ColumnConfigurationContract columnConfiguration, bool setAsMasterConfiguration) {
            return base.Channel.SetRemoteFolderColumnConfigurationAsync(connectionId, remoteFolderPath, columnConfiguration, setAsMasterConfiguration);
        }
        
        public void ResetRemoteFolderColumnConfiguration(string connectionId, string remoteFolderPath) {
            base.Channel.ResetRemoteFolderColumnConfiguration(connectionId, remoteFolderPath);
        }
        
        public System.Threading.Tasks.Task ResetRemoteFolderColumnConfigurationAsync(string connectionId, string remoteFolderPath) {
            return base.Channel.ResetRemoteFolderColumnConfigurationAsync(connectionId, remoteFolderPath);
        }
        
        public void ResetRemoteFolderColumnConfigurationForUserId(string connectionId, string remoteFolderPath, string userId) {
            base.Channel.ResetRemoteFolderColumnConfigurationForUserId(connectionId, remoteFolderPath, userId);
        }
        
        public System.Threading.Tasks.Task ResetRemoteFolderColumnConfigurationForUserIdAsync(string connectionId, string remoteFolderPath, string userId) {
            return base.Channel.ResetRemoteFolderColumnConfigurationForUserIdAsync(connectionId, remoteFolderPath, userId);
        }
        
        public string[] GetAllRemoteFolders(string connectionId, string documentId) {
            return base.Channel.GetAllRemoteFolders(connectionId, documentId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllRemoteFoldersAsync(string connectionId, string documentId) {
            return base.Channel.GetAllRemoteFoldersAsync(connectionId, documentId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Server")]
    public interface Server {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetConnections", ReplyAction="http://www.kendox.com/InfoShare/Server/GetConnectionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetConnectionsServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.RemoteConnectionContract[] GetConnections(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetConnections", ReplyAction="http://www.kendox.com/InfoShare/Server/GetConnectionsResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteConnectionContract[]> GetConnectionsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RemoveConnection", ReplyAction="http://www.kendox.com/InfoShare/Server/RemoveConnectionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/RemoveConnectionServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveConnection(string connectionId, string remoteConnectionIdToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RemoveConnection", ReplyAction="http://www.kendox.com/InfoShare/Server/RemoveConnectionResponse")]
        System.Threading.Tasks.Task RemoveConnectionAsync(string connectionId, string remoteConnectionIdToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetServerInfoServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.ServerInfoContract GetServerInfo(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerInfoResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.ServerInfoContract> GetServerInfoAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerVersion", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetServerVersionServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string GetServerVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerVersion", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerVersionResponse")]
        System.Threading.Tasks.Task<string> GetServerVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetLicenceInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetLicenceInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetLicenceInfoServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LicenceInfoContract GetLicenceInfo(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetLicenceInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetLicenceInfoResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceInfoContract> GetLicenceInfoAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetConcurrentLicences", ReplyAction="http://www.kendox.com/InfoShare/Server/GetConcurrentLicencesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetConcurrentLicencesServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LicenceContract[] GetConcurrentLicences(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetConcurrentLicences", ReplyAction="http://www.kendox.com/InfoShare/Server/GetConcurrentLicencesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceContract[]> GetConcurrentLicencesAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetNamedLicences", ReplyAction="http://www.kendox.com/InfoShare/Server/GetNamedLicencesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetNamedLicencesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LicenceContract[] GetNamedLicences(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetNamedLicences", ReplyAction="http://www.kendox.com/InfoShare/Server/GetNamedLicencesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceContract[]> GetNamedLicencesAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RetryFailedAnalyzerItems", ReplyAction="http://www.kendox.com/InfoShare/Server/RetryFailedAnalyzerItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/RetryFailedAnalyzerItemsServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RetryFailedAnalyzerItems(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RetryFailedAnalyzerItems", ReplyAction="http://www.kendox.com/InfoShare/Server/RetryFailedAnalyzerItemsResponse")]
        System.Threading.Tasks.Task RetryFailedAnalyzerItemsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RetryAllAnalyzerItems", ReplyAction="http://www.kendox.com/InfoShare/Server/RetryAllAnalyzerItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/RetryAllAnalyzerItemsServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RetryAllAnalyzerItems(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/RetryAllAnalyzerItems", ReplyAction="http://www.kendox.com/InfoShare/Server/RetryAllAnalyzerItemsResponse")]
        System.Threading.Tasks.Task RetryAllAnalyzerItemsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetSystemDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetSystemDocumentCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetSystemDocumentCountServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.InfoStoreDocumentCountContract[] GetSystemDocumentCount(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetSystemDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetSystemDocumentCountResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.InfoStoreDocumentCountContract[]> GetSystemDocumentCountAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AnalyzerDocumentCountContract[] GetAnalyzerDocumentCount(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AnalyzerDocumentCountContract[]> GetAnalyzerDocumentCountAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAvailableServerLogFiles", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAvailableServerLogFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetAvailableServerLogFilesServiceException" +
            "Fault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogFileInfoContract[] GetAvailableServerLogFiles(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAvailableServerLogFiles", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAvailableServerLogFilesResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogFileInfoContract[]> GetAvailableServerLogFilesAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerLog", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerLogResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetServerLogServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] GetServerLog(string connectionId, string logFile, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetServerLog", ReplyAction="http://www.kendox.com/InfoShare/Server/GetServerLogResponse")]
        System.Threading.Tasks.Task<byte[]> GetServerLogAsync(string connectionId, string logFile, int from, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetFailedAnalyzerDocumentIds", ReplyAction="http://www.kendox.com/InfoShare/Server/GetFailedAnalyzerDocumentIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetFailedAnalyzerDocumentIdsServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetFailedAnalyzerDocumentIds(string connectionId, string infoStoreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetFailedAnalyzerDocumentIds", ReplyAction="http://www.kendox.com/InfoShare/Server/GetFailedAnalyzerDocumentIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetFailedAnalyzerDocumentIdsAsync(string connectionId, string infoStoreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetDatabaseInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetDatabaseInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetDatabaseInfoServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.DatabaseInfoContract GetDatabaseInfo(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetDatabaseInfo", ReplyAction="http://www.kendox.com/InfoShare/Server/GetDatabaseInfoResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.DatabaseInfoContract> GetDatabaseInfoAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentIds", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentIdsServiceExceptionFaul" +
            "t", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string[] GetAnalyzerDocumentIds(string connectionId, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentIds", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetAnalyzerDocumentIdsAsync(string connectionId, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountAll", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountAllServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetAnalyzerDocumentCountAll(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountAll", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerDocumentCountAllResponse")]
        System.Threading.Tasks.Task<int> GetAnalyzerDocumentCountAllAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerFaildDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerFaildDocumentCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerFaildDocumentCountServiceExcept" +
            "ionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetAnalyzerFaildDocumentCount(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetAnalyzerFaildDocumentCount", ReplyAction="http://www.kendox.com/InfoShare/Server/GetAnalyzerFaildDocumentCountResponse")]
        System.Threading.Tasks.Task<int> GetAnalyzerFaildDocumentCountAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/SetTraceLevel", ReplyAction="http://www.kendox.com/InfoShare/Server/SetTraceLevelResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/SetTraceLevelServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void SetTraceLevel(string connectionId, string traceSwitch, int traceLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/SetTraceLevel", ReplyAction="http://www.kendox.com/InfoShare/Server/SetTraceLevelResponse")]
        System.Threading.Tasks.Task SetTraceLevelAsync(string connectionId, string traceSwitch, int traceLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetTraceLevel", ReplyAction="http://www.kendox.com/InfoShare/Server/GetTraceLevelResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/GetTraceLevelServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        int GetTraceLevel(string connectionId, string traceSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/GetTraceLevel", ReplyAction="http://www.kendox.com/InfoShare/Server/GetTraceLevelResponse")]
        System.Threading.Tasks.Task<int> GetTraceLevelAsync(string connectionId, string traceSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/EncryptString", ReplyAction="http://www.kendox.com/InfoShare/Server/EncryptStringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/EncryptStringServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string EncryptString(string tenantName, string input, int lifeTimeSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/EncryptString", ReplyAction="http://www.kendox.com/InfoShare/Server/EncryptStringResponse")]
        System.Threading.Tasks.Task<string> EncryptStringAsync(string tenantName, string input, int lifeTimeSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/DecryptString", ReplyAction="http://www.kendox.com/InfoShare/Server/DecryptStringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Server/DecryptStringServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        string DecryptString(string tenantName, string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Server/DecryptString", ReplyAction="http://www.kendox.com/InfoShare/Server/DecryptStringResponse")]
        System.Threading.Tasks.Task<string> DecryptStringAsync(string tenantName, string input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServerChannel : docreminder.InfoShareService.Server, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Server>, docreminder.InfoShareService.Server {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.RemoteConnectionContract[] GetConnections(string connectionId) {
            return base.Channel.GetConnections(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.RemoteConnectionContract[]> GetConnectionsAsync(string connectionId) {
            return base.Channel.GetConnectionsAsync(connectionId);
        }
        
        public void RemoveConnection(string connectionId, string remoteConnectionIdToRemove) {
            base.Channel.RemoveConnection(connectionId, remoteConnectionIdToRemove);
        }
        
        public System.Threading.Tasks.Task RemoveConnectionAsync(string connectionId, string remoteConnectionIdToRemove) {
            return base.Channel.RemoveConnectionAsync(connectionId, remoteConnectionIdToRemove);
        }
        
        public docreminder.InfoShareService.ServerInfoContract GetServerInfo(string connectionId) {
            return base.Channel.GetServerInfo(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.ServerInfoContract> GetServerInfoAsync(string connectionId) {
            return base.Channel.GetServerInfoAsync(connectionId);
        }
        
        public string GetServerVersion() {
            return base.Channel.GetServerVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetServerVersionAsync() {
            return base.Channel.GetServerVersionAsync();
        }
        
        public docreminder.InfoShareService.LicenceInfoContract GetLicenceInfo(string connectionId) {
            return base.Channel.GetLicenceInfo(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceInfoContract> GetLicenceInfoAsync(string connectionId) {
            return base.Channel.GetLicenceInfoAsync(connectionId);
        }
        
        public docreminder.InfoShareService.LicenceContract[] GetConcurrentLicences(string connectionId) {
            return base.Channel.GetConcurrentLicences(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceContract[]> GetConcurrentLicencesAsync(string connectionId) {
            return base.Channel.GetConcurrentLicencesAsync(connectionId);
        }
        
        public docreminder.InfoShareService.LicenceContract[] GetNamedLicences(string connectionId) {
            return base.Channel.GetNamedLicences(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LicenceContract[]> GetNamedLicencesAsync(string connectionId) {
            return base.Channel.GetNamedLicencesAsync(connectionId);
        }
        
        public void RetryFailedAnalyzerItems(string connectionId) {
            base.Channel.RetryFailedAnalyzerItems(connectionId);
        }
        
        public System.Threading.Tasks.Task RetryFailedAnalyzerItemsAsync(string connectionId) {
            return base.Channel.RetryFailedAnalyzerItemsAsync(connectionId);
        }
        
        public void RetryAllAnalyzerItems(string connectionId) {
            base.Channel.RetryAllAnalyzerItems(connectionId);
        }
        
        public System.Threading.Tasks.Task RetryAllAnalyzerItemsAsync(string connectionId) {
            return base.Channel.RetryAllAnalyzerItemsAsync(connectionId);
        }
        
        public docreminder.InfoShareService.InfoStoreDocumentCountContract[] GetSystemDocumentCount(string connectionId) {
            return base.Channel.GetSystemDocumentCount(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.InfoStoreDocumentCountContract[]> GetSystemDocumentCountAsync(string connectionId) {
            return base.Channel.GetSystemDocumentCountAsync(connectionId);
        }
        
        public docreminder.InfoShareService.AnalyzerDocumentCountContract[] GetAnalyzerDocumentCount(string connectionId) {
            return base.Channel.GetAnalyzerDocumentCount(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AnalyzerDocumentCountContract[]> GetAnalyzerDocumentCountAsync(string connectionId) {
            return base.Channel.GetAnalyzerDocumentCountAsync(connectionId);
        }
        
        public docreminder.InfoShareService.LogFileInfoContract[] GetAvailableServerLogFiles(string connectionId) {
            return base.Channel.GetAvailableServerLogFiles(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogFileInfoContract[]> GetAvailableServerLogFilesAsync(string connectionId) {
            return base.Channel.GetAvailableServerLogFilesAsync(connectionId);
        }
        
        public byte[] GetServerLog(string connectionId, string logFile, int from, int count) {
            return base.Channel.GetServerLog(connectionId, logFile, from, count);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetServerLogAsync(string connectionId, string logFile, int from, int count) {
            return base.Channel.GetServerLogAsync(connectionId, logFile, from, count);
        }
        
        public string[] GetFailedAnalyzerDocumentIds(string connectionId, string infoStoreId) {
            return base.Channel.GetFailedAnalyzerDocumentIds(connectionId, infoStoreId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFailedAnalyzerDocumentIdsAsync(string connectionId, string infoStoreId) {
            return base.Channel.GetFailedAnalyzerDocumentIdsAsync(connectionId, infoStoreId);
        }
        
        public docreminder.InfoShareService.DatabaseInfoContract GetDatabaseInfo(string connectionId) {
            return base.Channel.GetDatabaseInfo(connectionId);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.DatabaseInfoContract> GetDatabaseInfoAsync(string connectionId) {
            return base.Channel.GetDatabaseInfoAsync(connectionId);
        }
        
        public string[] GetAnalyzerDocumentIds(string connectionId, int count) {
            return base.Channel.GetAnalyzerDocumentIds(connectionId, count);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAnalyzerDocumentIdsAsync(string connectionId, int count) {
            return base.Channel.GetAnalyzerDocumentIdsAsync(connectionId, count);
        }
        
        public int GetAnalyzerDocumentCountAll(string connectionId) {
            return base.Channel.GetAnalyzerDocumentCountAll(connectionId);
        }
        
        public System.Threading.Tasks.Task<int> GetAnalyzerDocumentCountAllAsync(string connectionId) {
            return base.Channel.GetAnalyzerDocumentCountAllAsync(connectionId);
        }
        
        public int GetAnalyzerFaildDocumentCount(string connectionId) {
            return base.Channel.GetAnalyzerFaildDocumentCount(connectionId);
        }
        
        public System.Threading.Tasks.Task<int> GetAnalyzerFaildDocumentCountAsync(string connectionId) {
            return base.Channel.GetAnalyzerFaildDocumentCountAsync(connectionId);
        }
        
        public void SetTraceLevel(string connectionId, string traceSwitch, int traceLevel) {
            base.Channel.SetTraceLevel(connectionId, traceSwitch, traceLevel);
        }
        
        public System.Threading.Tasks.Task SetTraceLevelAsync(string connectionId, string traceSwitch, int traceLevel) {
            return base.Channel.SetTraceLevelAsync(connectionId, traceSwitch, traceLevel);
        }
        
        public int GetTraceLevel(string connectionId, string traceSwitch) {
            return base.Channel.GetTraceLevel(connectionId, traceSwitch);
        }
        
        public System.Threading.Tasks.Task<int> GetTraceLevelAsync(string connectionId, string traceSwitch) {
            return base.Channel.GetTraceLevelAsync(connectionId, traceSwitch);
        }
        
        public string EncryptString(string tenantName, string input, int lifeTimeSeconds) {
            return base.Channel.EncryptString(tenantName, input, lifeTimeSeconds);
        }
        
        public System.Threading.Tasks.Task<string> EncryptStringAsync(string tenantName, string input, int lifeTimeSeconds) {
            return base.Channel.EncryptStringAsync(tenantName, input, lifeTimeSeconds);
        }
        
        public string DecryptString(string tenantName, string input) {
            return base.Channel.DecryptString(tenantName, input);
        }
        
        public System.Threading.Tasks.Task<string> DecryptStringAsync(string tenantName, string input) {
            return base.Channel.DecryptStringAsync(tenantName, input);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Log")]
    public interface Log {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/WriteLogEntry", ReplyAction="http://www.kendox.com/InfoShare/Log/WriteLogEntryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Log/WriteLogEntryServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void WriteLogEntry(docreminder.InfoShareService.LogEntryContract entry, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/WriteLogEntry", ReplyAction="http://www.kendox.com/InfoShare/Log/WriteLogEntryResponse")]
        System.Threading.Tasks.Task WriteLogEntryAsync(docreminder.InfoShareService.LogEntryContract entry, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/GetLogEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Log/GetLogEntriesFilteredResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Log/GetLogEntriesFilteredServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.LogEntryContract[] GetLogEntriesFiltered(string tenant, string logEventTypeEnum, string applicationNameFilter, string subTypeFilter, string fromDate, string toDate, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/GetLogEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Log/GetLogEntriesFilteredResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.LogEntryContract[]> GetLogEntriesFilteredAsync(string tenant, string logEventTypeEnum, string applicationNameFilter, string subTypeFilter, string fromDate, string toDate, int timeZoneOffsetMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/RemoveOldLogEntries", ReplyAction="http://www.kendox.com/InfoShare/Log/RemoveOldLogEntriesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Log/RemoveOldLogEntriesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        void RemoveOldLogEntries(string connectionId, string olderThanDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Log/RemoveOldLogEntries", ReplyAction="http://www.kendox.com/InfoShare/Log/RemoveOldLogEntriesResponse")]
        System.Threading.Tasks.Task RemoveOldLogEntriesAsync(string connectionId, string olderThanDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LogChannel : docreminder.InfoShareService.Log, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Log>, docreminder.InfoShareService.Log {
        
        public LogClient() {
        }
        
        public LogClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void WriteLogEntry(docreminder.InfoShareService.LogEntryContract entry, int timeZoneOffsetMinutes) {
            base.Channel.WriteLogEntry(entry, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task WriteLogEntryAsync(docreminder.InfoShareService.LogEntryContract entry, int timeZoneOffsetMinutes) {
            return base.Channel.WriteLogEntryAsync(entry, timeZoneOffsetMinutes);
        }
        
        public docreminder.InfoShareService.LogEntryContract[] GetLogEntriesFiltered(string tenant, string logEventTypeEnum, string applicationNameFilter, string subTypeFilter, string fromDate, string toDate, int timeZoneOffsetMinutes) {
            return base.Channel.GetLogEntriesFiltered(tenant, logEventTypeEnum, applicationNameFilter, subTypeFilter, fromDate, toDate, timeZoneOffsetMinutes);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.LogEntryContract[]> GetLogEntriesFilteredAsync(string tenant, string logEventTypeEnum, string applicationNameFilter, string subTypeFilter, string fromDate, string toDate, int timeZoneOffsetMinutes) {
            return base.Channel.GetLogEntriesFilteredAsync(tenant, logEventTypeEnum, applicationNameFilter, subTypeFilter, fromDate, toDate, timeZoneOffsetMinutes);
        }
        
        public void RemoveOldLogEntries(string connectionId, string olderThanDate) {
            base.Channel.RemoveOldLogEntries(connectionId, olderThanDate);
        }
        
        public System.Threading.Tasks.Task RemoveOldLogEntriesAsync(string connectionId, string olderThanDate) {
            return base.Channel.RemoveOldLogEntriesAsync(connectionId, olderThanDate);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.Audit")]
    public interface Audit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Audit/GetAuditLogonEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Audit/GetAuditLogonEntriesFilteredResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Audit/GetAuditLogonEntriesFilteredServiceExceptio" +
            "nFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AuditLogonContract[] GetAuditLogonEntriesFiltered(string connectionId, string tenantName, string userId, string fromDate, string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Audit/GetAuditLogonEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Audit/GetAuditLogonEntriesFilteredResponse")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AuditLogonContract[]> GetAuditLogonEntriesFilteredAsync(string connectionId, string tenantName, string userId, string fromDate, string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Audit/GetAuditAdministrationEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Audit/GetAuditAdministrationEntriesFilteredRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/Audit/GetAuditAdministrationEntriesFilteredServic" +
            "eExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        docreminder.InfoShareService.AuditAdministrationContract[] GetAuditAdministrationEntriesFiltered(string connectionId, string tenantName, string userId, string methodName, string fromDate, string toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/Audit/GetAuditAdministrationEntriesFiltered", ReplyAction="http://www.kendox.com/InfoShare/Audit/GetAuditAdministrationEntriesFilteredRespon" +
            "se")]
        System.Threading.Tasks.Task<docreminder.InfoShareService.AuditAdministrationContract[]> GetAuditAdministrationEntriesFilteredAsync(string connectionId, string tenantName, string userId, string methodName, string fromDate, string toDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AuditChannel : docreminder.InfoShareService.Audit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuditClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.Audit>, docreminder.InfoShareService.Audit {
        
        public AuditClient() {
        }
        
        public AuditClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuditClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public docreminder.InfoShareService.AuditLogonContract[] GetAuditLogonEntriesFiltered(string connectionId, string tenantName, string userId, string fromDate, string toDate) {
            return base.Channel.GetAuditLogonEntriesFiltered(connectionId, tenantName, userId, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AuditLogonContract[]> GetAuditLogonEntriesFilteredAsync(string connectionId, string tenantName, string userId, string fromDate, string toDate) {
            return base.Channel.GetAuditLogonEntriesFilteredAsync(connectionId, tenantName, userId, fromDate, toDate);
        }
        
        public docreminder.InfoShareService.AuditAdministrationContract[] GetAuditAdministrationEntriesFiltered(string connectionId, string tenantName, string userId, string methodName, string fromDate, string toDate) {
            return base.Channel.GetAuditAdministrationEntriesFiltered(connectionId, tenantName, userId, methodName, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<docreminder.InfoShareService.AuditAdministrationContract[]> GetAuditAdministrationEntriesFilteredAsync(string connectionId, string tenantName, string userId, string methodName, string fromDate, string toDate) {
            return base.Channel.GetAuditAdministrationEntriesFilteredAsync(connectionId, tenantName, userId, methodName, fromDate, toDate);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.kendox.com/InfoShare", ConfigurationName="InfoShareService.DocumentProcessing")]
    public interface DocumentProcessing {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/DocumentProcessing/CreateFileFromTemplateBytes", ReplyAction="http://www.kendox.com/InfoShare/DocumentProcessing/CreateFileFromTemplateBytesRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/DocumentProcessing/CreateFileFromTemplateBytesSer" +
            "viceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] CreateFileFromTemplateBytes(string connectionId, docreminder.InfoShareService.ListItemContract[] properties, string templateDocumentId, string[] moduleDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/DocumentProcessing/CreateFileFromTemplateBytes", ReplyAction="http://www.kendox.com/InfoShare/DocumentProcessing/CreateFileFromTemplateBytesRes" +
            "ponse")]
        System.Threading.Tasks.Task<byte[]> CreateFileFromTemplateBytesAsync(string connectionId, docreminder.InfoShareService.ListItemContract[] properties, string templateDocumentId, string[] moduleDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/DocumentProcessing/InsertValuesIntoDocument", ReplyAction="http://www.kendox.com/InfoShare/DocumentProcessing/InsertValuesIntoDocumentRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(docreminder.InfoShareService.ServiceException), Action="http://www.kendox.com/InfoShare/DocumentProcessing/InsertValuesIntoDocumentServic" +
            "eExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Com.Kendox.Dcis.SubSystem.Service.Fault")]
        byte[] InsertValuesIntoDocument(string connectionId, byte[] input, string fileExtension, docreminder.InfoShareService.ListItemContract[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.kendox.com/InfoShare/DocumentProcessing/InsertValuesIntoDocument", ReplyAction="http://www.kendox.com/InfoShare/DocumentProcessing/InsertValuesIntoDocumentRespon" +
            "se")]
        System.Threading.Tasks.Task<byte[]> InsertValuesIntoDocumentAsync(string connectionId, byte[] input, string fileExtension, docreminder.InfoShareService.ListItemContract[] values);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DocumentProcessingChannel : docreminder.InfoShareService.DocumentProcessing, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentProcessingClient : System.ServiceModel.ClientBase<docreminder.InfoShareService.DocumentProcessing>, docreminder.InfoShareService.DocumentProcessing {
        
        public DocumentProcessingClient() {
        }
        
        public DocumentProcessingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentProcessingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentProcessingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentProcessingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] CreateFileFromTemplateBytes(string connectionId, docreminder.InfoShareService.ListItemContract[] properties, string templateDocumentId, string[] moduleDocumentIds) {
            return base.Channel.CreateFileFromTemplateBytes(connectionId, properties, templateDocumentId, moduleDocumentIds);
        }
        
        public System.Threading.Tasks.Task<byte[]> CreateFileFromTemplateBytesAsync(string connectionId, docreminder.InfoShareService.ListItemContract[] properties, string templateDocumentId, string[] moduleDocumentIds) {
            return base.Channel.CreateFileFromTemplateBytesAsync(connectionId, properties, templateDocumentId, moduleDocumentIds);
        }
        
        public byte[] InsertValuesIntoDocument(string connectionId, byte[] input, string fileExtension, docreminder.InfoShareService.ListItemContract[] values) {
            return base.Channel.InsertValuesIntoDocument(connectionId, input, fileExtension, values);
        }
        
        public System.Threading.Tasks.Task<byte[]> InsertValuesIntoDocumentAsync(string connectionId, byte[] input, string fileExtension, docreminder.InfoShareService.ListItemContract[] values) {
            return base.Channel.InsertValuesIntoDocumentAsync(connectionId, input, fileExtension, values);
        }
    }
}
