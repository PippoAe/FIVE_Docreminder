//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace docreminder.KXWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="KXWebService40Soap", Namespace="http://www.kendox.com/")]
    public partial class KXWebService40 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CanEditSchemaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanEditUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChangeLogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSignaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameDocumentInFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSearchFolderColumnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditSearchFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSearchFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSearchFolderSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSearchFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFolderPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetFolderPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyAnnotationStampOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAnnotationStampsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDefaultRectangleAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultRectangleAnnotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLifeCyclesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLifeCycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSuccessorLifeCycleStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllProtectionDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllProtectionDomainsWithRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOverlayDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOverlayDocumentConvertedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllProcessTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePropertyCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartProcessTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProcessWithoutTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssumeAssignedTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback TakeActiveActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteCurrentTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteOngoingProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDocumentsToProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsFromProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDocumentFromProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDocumentsByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAccessLogEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDocumentFromTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicensedApplicationIntegrationUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicensedNamedUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplateFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTemplateFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModuleFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetModuleFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastSelectedFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLastSelectedFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProtectionDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProtectionDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProtectionDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDocumentReminderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThumbnailListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRemindersForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRemindersForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRemindersForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTemporaryReleasedDossierFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReleaseHandlersForDossierOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteReleaseHandlersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateReleaseHandlersOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProcessTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProcessTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProcessTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestLicenceFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveLatestVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrinterListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommonDefinitionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeMobileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordForUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSearchFolderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllFolderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDocumentsFromFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSearchFolderInfoFromFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllFolderInfoFromFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllFolderInfoAlongFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindNextFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSearchFolderDataFromFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSearchFolderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultSearchFolderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllInfoStoresOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignatureFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasSignatureReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignatureReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileJSONOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileEncodedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileConvertedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConverterProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileWithTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileVersionWithTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileSimpleWithSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileSimpleWithSingleSignOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileJSONOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileWithTransactionJSONOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileWithTransactionIgnoreIsRequiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileWithTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLastImportTemplateForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypeTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignatureProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllImportTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImportSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveProcessSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPossibleValuesLimitedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValueProposalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProcessExtOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDocumentPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRelationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllOperationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConnectionPoolConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInWithPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInWithTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UndoCheckoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServiceVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentPageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileVersionConvertedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFileVersionPageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebDataProviderSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserLogEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDocumentLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableImportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableExportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableGetRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableGetRowCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableInsertRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDefinedTableDeleteRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDocumentLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDocumentLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDocumentChildLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUrlIntegrationLinksForDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemporaryReleasedDossiersForExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemporaryReleasedDossierFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccessLogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryLogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFullTextDiffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRiaClientDockingLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRiaClientDockingLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRiaClientDockingLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRiaClientUserDockingLayoutTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRiaClientUserDockingLayoutTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxRequestLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentUploadOffsetOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentDownloadOffsetOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonForApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLogonTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateADFSTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateApplicationTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonForApplicationWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonWithApplicationTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonWithSingleSignOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonForApplicationWithSingleSignOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentActionsAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessActionsAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderActionsAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentAnnotationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveDocumentToInfoStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilingCabinetPathsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlogListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBlogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDocumentAnnotationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GarbageCollectorOperationCompleted;
        
        private System.Threading.SendOrPostCallback CurrentOpenConnectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CurrentOpenIdleConnectionCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CurrentStoredUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CurrentOpenActiveConnectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CurrentPoolSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCredentialLifetimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoExtOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserActionsAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSearchMaskOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersWithRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserGroupsWithRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsLoggedInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypePluginListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePropertyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePropertyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePropertyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypeForIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePropertyCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePropertyCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyCategoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPropertyTypeLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckOutStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchJSONOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoSuggestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TranslateFolderPathOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public KXWebService40() {
            this.Url = global::docreminder.Properties.Settings.Default.E_Bill_Uploader_KXWS_KXWebService40;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CanEditSchemaInfoCompletedEventHandler CanEditSchemaInfoCompleted;
        
        /// <remarks/>
        public event CanEditUserInfoCompletedEventHandler CanEditUserInfoCompleted;
        
        /// <remarks/>
        public event GetSubscriptionListCompletedEventHandler GetSubscriptionListCompleted;
        
        /// <remarks/>
        public event GetChangeLogListCompletedEventHandler GetChangeLogListCompleted;
        
        /// <remarks/>
        public event CheckSignaturesCompletedEventHandler CheckSignaturesCompleted;
        
        /// <remarks/>
        public event RenameFolderCompletedEventHandler RenameFolderCompleted;
        
        /// <remarks/>
        public event RenameDocumentInFolderCompletedEventHandler RenameDocumentInFolderCompleted;
        
        /// <remarks/>
        public event SetSearchFolderColumnsCompletedEventHandler SetSearchFolderColumnsCompleted;
        
        /// <remarks/>
        public event EditSearchFolderCompletedEventHandler EditSearchFolderCompleted;
        
        /// <remarks/>
        public event EditFolderCompletedEventHandler EditFolderCompleted;
        
        /// <remarks/>
        public event CreateSearchFolderCompletedEventHandler CreateSearchFolderCompleted;
        
        /// <remarks/>
        public event CreateSearchFolderSimpleCompletedEventHandler CreateSearchFolderSimpleCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event DeleteSearchFolderCompletedEventHandler DeleteSearchFolderCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event DeleteFolderReferenceCompletedEventHandler DeleteFolderReferenceCompleted;
        
        /// <remarks/>
        public event SetFolderPropertiesCompletedEventHandler SetFolderPropertiesCompleted;
        
        /// <remarks/>
        public event ResetFolderPropertiesCompletedEventHandler ResetFolderPropertiesCompleted;
        
        /// <remarks/>
        public event DecryptURLCompletedEventHandler DecryptURLCompleted;
        
        /// <remarks/>
        public event EncryptURLCompletedEventHandler EncryptURLCompleted;
        
        /// <remarks/>
        public event ModifyAnnotationStampCompletedEventHandler ModifyAnnotationStampCompleted;
        
        /// <remarks/>
        public event GetAllAnnotationStampsCompletedEventHandler GetAllAnnotationStampsCompleted;
        
        /// <remarks/>
        public event SaveDefaultRectangleAnnotationCompletedEventHandler SaveDefaultRectangleAnnotationCompleted;
        
        /// <remarks/>
        public event GetDefaultRectangleAnnotationCompletedEventHandler GetDefaultRectangleAnnotationCompleted;
        
        /// <remarks/>
        public event GetAllLifeCyclesCompletedEventHandler GetAllLifeCyclesCompleted;
        
        /// <remarks/>
        public event GetLifeCycleCompletedEventHandler GetLifeCycleCompleted;
        
        /// <remarks/>
        public event GetSuccessorLifeCycleStatesCompletedEventHandler GetSuccessorLifeCycleStatesCompleted;
        
        /// <remarks/>
        public event GetAllProtectionDomainsCompletedEventHandler GetAllProtectionDomainsCompleted;
        
        /// <remarks/>
        public event GetAllProtectionDomainsWithRightsCompletedEventHandler GetAllProtectionDomainsWithRightsCompleted;
        
        /// <remarks/>
        public event GetNextVersionNumberCompletedEventHandler GetNextVersionNumberCompleted;
        
        /// <remarks/>
        public event GetOverlayDocumentCompletedEventHandler GetOverlayDocumentCompleted;
        
        /// <remarks/>
        public event GetOverlayDocumentConvertedCompletedEventHandler GetOverlayDocumentConvertedCompleted;
        
        /// <remarks/>
        public event GetAllProcessTemplatesCompletedEventHandler GetAllProcessTemplatesCompleted;
        
        /// <remarks/>
        public event CreateProcessCompletedEventHandler CreateProcessCompleted;
        
        /// <remarks/>
        public event CreatePropertyCategoryCompletedEventHandler CreatePropertyCategoryCompleted;
        
        /// <remarks/>
        public event StartProcessTasksCompletedEventHandler StartProcessTasksCompleted;
        
        /// <remarks/>
        public event CreateProcessWithoutTasksCompletedEventHandler CreateProcessWithoutTasksCompleted;
        
        /// <remarks/>
        public event AssumeAssignedTaskCompletedEventHandler AssumeAssignedTaskCompleted;
        
        /// <remarks/>
        public event TakeActiveActionCompletedEventHandler TakeActiveActionCompleted;
        
        /// <remarks/>
        public event GetProcessCompletedEventHandler GetProcessCompleted;
        
        /// <remarks/>
        public event CompleteCurrentTaskCompletedEventHandler CompleteCurrentTaskCompleted;
        
        /// <remarks/>
        public event CompleteProcessCompletedEventHandler CompleteProcessCompleted;
        
        /// <remarks/>
        public event CompleteOngoingProcessCompletedEventHandler CompleteOngoingProcessCompleted;
        
        /// <remarks/>
        public event AssignTaskCompletedEventHandler AssignTaskCompleted;
        
        /// <remarks/>
        public event AddDocumentsToProcessCompletedEventHandler AddDocumentsToProcessCompleted;
        
        /// <remarks/>
        public event GetDocumentsFromProcessCompletedEventHandler GetDocumentsFromProcessCompleted;
        
        /// <remarks/>
        public event RemoveDocumentFromProcessCompletedEventHandler RemoveDocumentFromProcessCompleted;
        
        /// <remarks/>
        public event MoveDocumentCompletedEventHandler MoveDocumentCompleted;
        
        /// <remarks/>
        public event SendDocumentsByEmailCompletedEventHandler SendDocumentsByEmailCompleted;
        
        /// <remarks/>
        public event SendEmailCompletedEventHandler SendEmailCompleted;
        
        /// <remarks/>
        public event AddAccessLogEntryCompletedEventHandler AddAccessLogEntryCompleted;
        
        /// <remarks/>
        public event AddSubscriptionCompletedEventHandler AddSubscriptionCompleted;
        
        /// <remarks/>
        public event RemoveSubscriptionCompletedEventHandler RemoveSubscriptionCompleted;
        
        /// <remarks/>
        public event CreateDocumentFromTemplateCompletedEventHandler CreateDocumentFromTemplateCompleted;
        
        /// <remarks/>
        public event GetLicensedApplicationIntegrationUserCompletedEventHandler GetLicensedApplicationIntegrationUserCompleted;
        
        /// <remarks/>
        public event GetLicensedNamedUserCompletedEventHandler GetLicensedNamedUserCompleted;
        
        /// <remarks/>
        public event GetTemplateFolderPathCompletedEventHandler GetTemplateFolderPathCompleted;
        
        /// <remarks/>
        public event SetTemplateFolderPathCompletedEventHandler SetTemplateFolderPathCompleted;
        
        /// <remarks/>
        public event GetModuleFolderPathCompletedEventHandler GetModuleFolderPathCompleted;
        
        /// <remarks/>
        public event SetModuleFolderPathCompletedEventHandler SetModuleFolderPathCompleted;
        
        /// <remarks/>
        public event GetLastSelectedFolderPathCompletedEventHandler GetLastSelectedFolderPathCompleted;
        
        /// <remarks/>
        public event SetLastSelectedFolderPathCompletedEventHandler SetLastSelectedFolderPathCompleted;
        
        /// <remarks/>
        public event GetClientSettingsCompletedEventHandler GetClientSettingsCompleted;
        
        /// <remarks/>
        public event CreateProtectionDomainCompletedEventHandler CreateProtectionDomainCompleted;
        
        /// <remarks/>
        public event EditProtectionDomainCompletedEventHandler EditProtectionDomainCompleted;
        
        /// <remarks/>
        public event DeleteProtectionDomainCompletedEventHandler DeleteProtectionDomainCompleted;
        
        /// <remarks/>
        public event CreateDocumentReminderCompletedEventHandler CreateDocumentReminderCompleted;
        
        /// <remarks/>
        public event GetThumbnailListCompletedEventHandler GetThumbnailListCompleted;
        
        /// <remarks/>
        public event UpdateRemindersForDocumentCompletedEventHandler UpdateRemindersForDocumentCompleted;
        
        /// <remarks/>
        public event GetAllRemindersForDocumentCompletedEventHandler GetAllRemindersForDocumentCompleted;
        
        /// <remarks/>
        public event DeleteRemindersForDocumentCompletedEventHandler DeleteRemindersForDocumentCompleted;
        
        /// <remarks/>
        public event CreateTemporaryReleasedDossierFilesCompletedEventHandler CreateTemporaryReleasedDossierFilesCompleted;
        
        /// <remarks/>
        public event GetReleaseHandlersForDossierCompletedEventHandler GetReleaseHandlersForDossierCompleted;
        
        /// <remarks/>
        public event DeleteReleaseHandlersCompletedEventHandler DeleteReleaseHandlersCompleted;
        
        /// <remarks/>
        public event UpdateReleaseHandlersCompletedEventHandler UpdateReleaseHandlersCompleted;
        
        /// <remarks/>
        public event TestURLCompletedEventHandler TestURLCompleted;
        
        /// <remarks/>
        public event CreateProcessTemplateCompletedEventHandler CreateProcessTemplateCompleted;
        
        /// <remarks/>
        public event EditProcessTemplateCompletedEventHandler EditProcessTemplateCompleted;
        
        /// <remarks/>
        public event DeleteProcessTemplatesCompletedEventHandler DeleteProcessTemplatesCompleted;
        
        /// <remarks/>
        public event TestLicenceFeatureCompletedEventHandler TestLicenceFeatureCompleted;
        
        /// <remarks/>
        public event GetDocumentsZippedCompletedEventHandler GetDocumentsZippedCompleted;
        
        /// <remarks/>
        public event RemoveLatestVersionCompletedEventHandler RemoveLatestVersionCompleted;
        
        /// <remarks/>
        public event RenameCompletedEventHandler RenameCompleted;
        
        /// <remarks/>
        public event PrintCompletedEventHandler PrintCompleted;
        
        /// <remarks/>
        public event GetPrinterListCompletedEventHandler GetPrinterListCompleted;
        
        /// <remarks/>
        public event RemoveVersionCompletedEventHandler RemoveVersionCompleted;
        
        /// <remarks/>
        public event GetCommonDefinitionsCompletedEventHandler GetCommonDefinitionsCompleted;
        
        /// <remarks/>
        public event ChangeMobileNumberCompletedEventHandler ChangeMobileNumberCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ChangePasswordForUserIDCompletedEventHandler ChangePasswordForUserIDCompleted;
        
        /// <remarks/>
        public event GetAllSearchFolderDataCompletedEventHandler GetAllSearchFolderDataCompleted;
        
        /// <remarks/>
        public event GetAllFolderInfoCompletedEventHandler GetAllFolderInfoCompleted;
        
        /// <remarks/>
        public event RemoveDocumentsFromFolderCompletedEventHandler RemoveDocumentsFromFolderCompleted;
        
        /// <remarks/>
        public event GetAllSearchFolderInfoFromFolderCompletedEventHandler GetAllSearchFolderInfoFromFolderCompleted;
        
        /// <remarks/>
        public event GetAllFolderInfoFromFolderCompletedEventHandler GetAllFolderInfoFromFolderCompleted;
        
        /// <remarks/>
        public event GetAllFolderInfoAlongFolderPathCompletedEventHandler GetAllFolderInfoAlongFolderPathCompleted;
        
        /// <remarks/>
        public event FindNextFolderCompletedEventHandler FindNextFolderCompleted;
        
        /// <remarks/>
        public event GetAllSearchFolderDataFromFolderCompletedEventHandler GetAllSearchFolderDataFromFolderCompleted;
        
        /// <remarks/>
        public event GetSearchFolderDataCompletedEventHandler GetSearchFolderDataCompleted;
        
        /// <remarks/>
        public event GetDefaultSearchFolderDataCompletedEventHandler GetDefaultSearchFolderDataCompleted;
        
        /// <remarks/>
        public event GetAllInfoStoresCompletedEventHandler GetAllInfoStoresCompleted;
        
        /// <remarks/>
        public event GetProcessStoreCompletedEventHandler GetProcessStoreCompleted;
        
        /// <remarks/>
        public event GetSignatureFileCompletedEventHandler GetSignatureFileCompleted;
        
        /// <remarks/>
        public event HasSignatureReportCompletedEventHandler HasSignatureReportCompleted;
        
        /// <remarks/>
        public event GetSignatureReportCompletedEventHandler GetSignatureReportCompleted;
        
        /// <remarks/>
        public event GetSignaturesCompletedEventHandler GetSignaturesCompleted;
        
        /// <remarks/>
        public event GetDocumentFileJSONCompletedEventHandler GetDocumentFileJSONCompleted;
        
        /// <remarks/>
        public event GetDocumentFileCompletedEventHandler GetDocumentFileCompleted;
        
        /// <remarks/>
        public event GetDocumentFileEncodedCompletedEventHandler GetDocumentFileEncodedCompleted;
        
        /// <remarks/>
        public event GetDocumentFileConvertedCompletedEventHandler GetDocumentFileConvertedCompleted;
        
        /// <remarks/>
        public event ConvertFileCompletedEventHandler ConvertFileCompleted;
        
        /// <remarks/>
        public event GetConverterProfilesCompletedEventHandler GetConverterProfilesCompleted;
        
        /// <remarks/>
        public event GetDocumentFileWithTransactionCompletedEventHandler GetDocumentFileWithTransactionCompleted;
        
        /// <remarks/>
        public event GetDocumentFileVersionWithTransactionCompletedEventHandler GetDocumentFileVersionWithTransactionCompleted;
        
        /// <remarks/>
        public event GetDocumentFileSimpleWithSessionCompletedEventHandler GetDocumentFileSimpleWithSessionCompleted;
        
        /// <remarks/>
        public event GetDocumentFileSimpleCompletedEventHandler GetDocumentFileSimpleCompleted;
        
        /// <remarks/>
        public event GetDocumentFileSimpleWithSingleSignOnCompletedEventHandler GetDocumentFileSimpleWithSingleSignOnCompleted;
        
        /// <remarks/>
        public event SaveFileJSONCompletedEventHandler SaveFileJSONCompleted;
        
        /// <remarks/>
        public event SaveFileCompletedEventHandler SaveFileCompleted;
        
        /// <remarks/>
        public event SaveFileWithTransactionJSONCompletedEventHandler SaveFileWithTransactionJSONCompleted;
        
        /// <remarks/>
        public event SaveFileWithTransactionIgnoreIsRequiredCompletedEventHandler SaveFileWithTransactionIgnoreIsRequiredCompleted;
        
        /// <remarks/>
        public event SaveFileWithTransactionCompletedEventHandler SaveFileWithTransactionCompleted;
        
        /// <remarks/>
        public event SaveLastImportTemplateForUserCompletedEventHandler SaveLastImportTemplateForUserCompleted;
        
        /// <remarks/>
        public event GetPropertyTypeTemplatesCompletedEventHandler GetPropertyTypeTemplatesCompleted;
        
        /// <remarks/>
        public event GetSignatureProfilesCompletedEventHandler GetSignatureProfilesCompleted;
        
        /// <remarks/>
        public event GetAllImportTemplatesCompletedEventHandler GetAllImportTemplatesCompleted;
        
        /// <remarks/>
        public event GetImportSettingsCompletedEventHandler GetImportSettingsCompleted;
        
        /// <remarks/>
        public event SaveProcessSettingsCompletedEventHandler SaveProcessSettingsCompleted;
        
        /// <remarks/>
        public event GetProcessSettingsCompletedEventHandler GetProcessSettingsCompleted;
        
        /// <remarks/>
        public event GetPossibleValuesLimitedCompletedEventHandler GetPossibleValuesLimitedCompleted;
        
        /// <remarks/>
        public event GetValueProposalsCompletedEventHandler GetValueProposalsCompleted;
        
        /// <remarks/>
        public event UpdateProcessCompletedEventHandler UpdateProcessCompleted;
        
        /// <remarks/>
        public event UpdateProcessExtCompletedEventHandler UpdateProcessExtCompleted;
        
        /// <remarks/>
        public event UpdateDocumentPropertiesCompletedEventHandler UpdateDocumentPropertiesCompleted;
        
        /// <remarks/>
        public event GetAllRelationsCompletedEventHandler GetAllRelationsCompleted;
        
        /// <remarks/>
        public event GetAllOperationsCompletedEventHandler GetAllOperationsCompleted;
        
        /// <remarks/>
        public event GetConnectionPoolConfigurationCompletedEventHandler GetConnectionPoolConfigurationCompleted;
        
        /// <remarks/>
        public event CheckInCompletedEventHandler CheckInCompleted;
        
        /// <remarks/>
        public event CheckInWithPropertiesCompletedEventHandler CheckInWithPropertiesCompleted;
        
        /// <remarks/>
        public event CheckInWithTransactionCompletedEventHandler CheckInWithTransactionCompleted;
        
        /// <remarks/>
        public event UndoCheckoutCompletedEventHandler UndoCheckoutCompleted;
        
        /// <remarks/>
        public event CheckOutCompletedEventHandler CheckOutCompleted;
        
        /// <remarks/>
        public event CheckOutOnlyCompletedEventHandler CheckOutOnlyCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event GetWebServiceVersionCompletedEventHandler GetWebServiceVersionCompleted;
        
        /// <remarks/>
        public event GetDocumentPageCountCompletedEventHandler GetDocumentPageCountCompleted;
        
        /// <remarks/>
        public event GetDocumentFileVersionConvertedCompletedEventHandler GetDocumentFileVersionConvertedCompleted;
        
        /// <remarks/>
        public event GetDocumentFileVersionCompletedEventHandler GetDocumentFileVersionCompleted;
        
        /// <remarks/>
        public event GetDocumentFileVersionPageCountCompletedEventHandler GetDocumentFileVersionPageCountCompleted;
        
        /// <remarks/>
        public event GetWebDataProviderSettingsCompletedEventHandler GetWebDataProviderSettingsCompleted;
        
        /// <remarks/>
        public event GetVersionListCompletedEventHandler GetVersionListCompleted;
        
        /// <remarks/>
        public event GetUserLogListCompletedEventHandler GetUserLogListCompleted;
        
        /// <remarks/>
        public event RemoveUserLogEntriesCompletedEventHandler RemoveUserLogEntriesCompleted;
        
        /// <remarks/>
        public event AddDocumentLinksCompletedEventHandler AddDocumentLinksCompleted;
        
        /// <remarks/>
        public event UserDefinedTableImportDataCompletedEventHandler UserDefinedTableImportDataCompleted;
        
        /// <remarks/>
        public event UserDefinedTableExportDataCompletedEventHandler UserDefinedTableExportDataCompleted;
        
        /// <remarks/>
        public event UserDefinedTableGetRecordsCompletedEventHandler UserDefinedTableGetRecordsCompleted;
        
        /// <remarks/>
        public event UserDefinedTableGetRowCountCompletedEventHandler UserDefinedTableGetRowCountCompleted;
        
        /// <remarks/>
        public event UserDefinedTableInsertRecordCompletedEventHandler UserDefinedTableInsertRecordCompleted;
        
        /// <remarks/>
        public event UserDefinedTableDeleteRecordsCompletedEventHandler UserDefinedTableDeleteRecordsCompleted;
        
        /// <remarks/>
        public event DeleteDocumentLinksCompletedEventHandler DeleteDocumentLinksCompleted;
        
        /// <remarks/>
        public event GetAllDocumentLinksCompletedEventHandler GetAllDocumentLinksCompleted;
        
        /// <remarks/>
        public event GetAllDocumentChildLinksCompletedEventHandler GetAllDocumentChildLinksCompleted;
        
        /// <remarks/>
        public event CreateUrlIntegrationLinksForDocumentsCompletedEventHandler CreateUrlIntegrationLinksForDocumentsCompleted;
        
        /// <remarks/>
        public event GetTemporaryReleasedDossiersForExtensionCompletedEventHandler GetTemporaryReleasedDossiersForExtensionCompleted;
        
        /// <remarks/>
        public event GetTemporaryReleasedDossierFilesCompletedEventHandler GetTemporaryReleasedDossierFilesCompleted;
        
        /// <remarks/>
        public event GetAccessLogListCompletedEventHandler GetAccessLogListCompleted;
        
        /// <remarks/>
        public event GetHistoryLogListCompletedEventHandler GetHistoryLogListCompleted;
        
        /// <remarks/>
        public event GetFullTextDiffCompletedEventHandler GetFullTextDiffCompleted;
        
        /// <remarks/>
        public event GetRiaClientDockingLayoutCompletedEventHandler GetRiaClientDockingLayoutCompleted;
        
        /// <remarks/>
        public event DeleteRiaClientDockingLayoutCompletedEventHandler DeleteRiaClientDockingLayoutCompleted;
        
        /// <remarks/>
        public event GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventHandler GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompleted;
        
        /// <remarks/>
        public event SetRiaClientDockingLayoutCompletedEventHandler SetRiaClientDockingLayoutCompleted;
        
        /// <remarks/>
        public event SetRiaClientUserDockingLayoutTemplateCompletedEventHandler SetRiaClientUserDockingLayoutTemplateCompleted;
        
        /// <remarks/>
        public event SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventHandler SetRiaClientUrlIntegrationDockingLayoutTemplateCompleted;
        
        /// <remarks/>
        public event GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventHandler GetRiaClientUrlIntegrationDockingLayoutTemplateCompleted;
        
        /// <remarks/>
        public event GetRiaClientUserDockingLayoutTemplateCompletedEventHandler GetRiaClientUserDockingLayoutTemplateCompleted;
        
        /// <remarks/>
        public event StartUploadCompletedEventHandler StartUploadCompleted;
        
        /// <remarks/>
        public event UploadChunkCompletedEventHandler UploadChunkCompleted;
        
        /// <remarks/>
        public event GetTransactionCompletedEventHandler GetTransactionCompleted;
        
        /// <remarks/>
        public event GetTransactionStateCompletedEventHandler GetTransactionStateCompleted;
        
        /// <remarks/>
        public event EndUploadCompletedEventHandler EndUploadCompleted;
        
        /// <remarks/>
        public event DeleteTransactionCompletedEventHandler DeleteTransactionCompleted;
        
        /// <remarks/>
        public event CancelUploadCompletedEventHandler CancelUploadCompleted;
        
        /// <remarks/>
        public event GetMaxRequestLengthCompletedEventHandler GetMaxRequestLengthCompleted;
        
        /// <remarks/>
        public event GetCurrentUploadOffsetCompletedEventHandler GetCurrentUploadOffsetCompleted;
        
        /// <remarks/>
        public event DownloadChunkCompletedEventHandler DownloadChunkCompleted;
        
        /// <remarks/>
        public event EndDownloadCompletedEventHandler EndDownloadCompleted;
        
        /// <remarks/>
        public event CancelDownloadCompletedEventHandler CancelDownloadCompleted;
        
        /// <remarks/>
        public event GetCurrentDownloadOffsetCompletedEventHandler GetCurrentDownloadOffsetCompleted;
        
        /// <remarks/>
        public event LogonCompletedEventHandler LogonCompleted;
        
        /// <remarks/>
        public event LogonForApplicationCompletedEventHandler LogonForApplicationCompleted;
        
        /// <remarks/>
        public event CreateLogonTokenCompletedEventHandler CreateLogonTokenCompleted;
        
        /// <remarks/>
        public event CreateADFSTokenCompletedEventHandler CreateADFSTokenCompleted;
        
        /// <remarks/>
        public event CreateApplicationTokenCompletedEventHandler CreateApplicationTokenCompleted;
        
        /// <remarks/>
        public event LogonForApplicationWithTokenCompletedEventHandler LogonForApplicationWithTokenCompleted;
        
        /// <remarks/>
        public event LogonWithTokenCompletedEventHandler LogonWithTokenCompleted;
        
        /// <remarks/>
        public event LogonWithApplicationTokenCompletedEventHandler LogonWithApplicationTokenCompleted;
        
        /// <remarks/>
        public event LogonWithSingleSignOnCompletedEventHandler LogonWithSingleSignOnCompleted;
        
        /// <remarks/>
        public event LogonForApplicationWithSingleSignOnCompletedEventHandler LogonForApplicationWithSingleSignOnCompleted;
        
        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;
        
        /// <remarks/>
        public event GetPropertiesCompletedEventHandler GetPropertiesCompleted;
        
        /// <remarks/>
        public event GetVersionPropertiesCompletedEventHandler GetVersionPropertiesCompleted;
        
        /// <remarks/>
        public event GetDocumentActionsAllowedCompletedEventHandler GetDocumentActionsAllowedCompleted;
        
        /// <remarks/>
        public event GetProcessActionsAllowedCompletedEventHandler GetProcessActionsAllowedCompleted;
        
        /// <remarks/>
        public event GetFolderActionsAllowedCompletedEventHandler GetFolderActionsAllowedCompleted;
        
        /// <remarks/>
        public event GetDocumentAnnotationsCompletedEventHandler GetDocumentAnnotationsCompleted;
        
        /// <remarks/>
        public event MoveDocumentToInfoStoreCompletedEventHandler MoveDocumentToInfoStoreCompleted;
        
        /// <remarks/>
        public event GetFilingCabinetPathsCompletedEventHandler GetFilingCabinetPathsCompleted;
        
        /// <remarks/>
        public event GetBlogListCompletedEventHandler GetBlogListCompleted;
        
        /// <remarks/>
        public event AddBlogCompletedEventHandler AddBlogCompleted;
        
        /// <remarks/>
        public event SaveDocumentAnnotationsCompletedEventHandler SaveDocumentAnnotationsCompleted;
        
        /// <remarks/>
        public event GarbageCollectorCompletedEventHandler GarbageCollectorCompleted;
        
        /// <remarks/>
        public event CurrentOpenConnectionsCompletedEventHandler CurrentOpenConnectionsCompleted;
        
        /// <remarks/>
        public event CurrentOpenIdleConnectionCountCompletedEventHandler CurrentOpenIdleConnectionCountCompleted;
        
        /// <remarks/>
        public event CurrentStoredUsersCompletedEventHandler CurrentStoredUsersCompleted;
        
        /// <remarks/>
        public event CurrentOpenActiveConnectionsCompletedEventHandler CurrentOpenActiveConnectionsCompleted;
        
        /// <remarks/>
        public event CurrentPoolSizeCompletedEventHandler CurrentPoolSizeCompleted;
        
        /// <remarks/>
        public event GetUserCredentialLifetimeCompletedEventHandler GetUserCredentialLifetimeCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event GetUserInfoExtCompletedEventHandler GetUserInfoExtCompleted;
        
        /// <remarks/>
        public event GetUserActionsAllowedCompletedEventHandler GetUserActionsAllowedCompleted;
        
        /// <remarks/>
        public event GetAllRolesCompletedEventHandler GetAllRolesCompleted;
        
        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;
        
        /// <remarks/>
        public event EditRoleCompletedEventHandler EditRoleCompleted;
        
        /// <remarks/>
        public event CopyRoleCompletedEventHandler CopyRoleCompleted;
        
        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event EditUserCompletedEventHandler EditUserCompleted;
        
        /// <remarks/>
        public event SetSearchMaskOptionsCompletedEventHandler SetSearchMaskOptionsCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
        
        /// <remarks/>
        public event GetAllUsersWithRightsCompletedEventHandler GetAllUsersWithRightsCompleted;
        
        /// <remarks/>
        public event GetAllUserGroupsCompletedEventHandler GetAllUserGroupsCompleted;
        
        /// <remarks/>
        public event GetAllUserGroupsWithRightsCompletedEventHandler GetAllUserGroupsWithRightsCompleted;
        
        /// <remarks/>
        public event IsLoggedInCompletedEventHandler IsLoggedInCompleted;
        
        /// <remarks/>
        public event GetPropertyTypePluginListCompletedEventHandler GetPropertyTypePluginListCompleted;
        
        /// <remarks/>
        public event CreatePropertyTypeCompletedEventHandler CreatePropertyTypeCompleted;
        
        /// <remarks/>
        public event UpdatePropertyTypeCompletedEventHandler UpdatePropertyTypeCompleted;
        
        /// <remarks/>
        public event DeletePropertyTypeCompletedEventHandler DeletePropertyTypeCompleted;
        
        /// <remarks/>
        public event GetPropertyTypesCompletedEventHandler GetPropertyTypesCompleted;
        
        /// <remarks/>
        public event GetPropertyTypeCompletedEventHandler GetPropertyTypeCompleted;
        
        /// <remarks/>
        public event GetPropertyTypeForIDCompletedEventHandler GetPropertyTypeForIDCompleted;
        
        /// <remarks/>
        public event UpdatePropertyCategoryCompletedEventHandler UpdatePropertyCategoryCompleted;
        
        /// <remarks/>
        public event DeletePropertyCategoryCompletedEventHandler DeletePropertyCategoryCompleted;
        
        /// <remarks/>
        public event GetPropertyCategoryCompletedEventHandler GetPropertyCategoryCompleted;
        
        /// <remarks/>
        public event GetPropertyCategoryListCompletedEventHandler GetPropertyCategoryListCompleted;
        
        /// <remarks/>
        public event GetAllPropertyTypeLanguagesCompletedEventHandler GetAllPropertyTypeLanguagesCompleted;
        
        /// <remarks/>
        public event GetSchemaLanguagesCompletedEventHandler GetSchemaLanguagesCompleted;
        
        /// <remarks/>
        public event GetCheckOutStateCompletedEventHandler GetCheckOutStateCompleted;
        
        /// <remarks/>
        public event CheckPropertiesCompletedEventHandler CheckPropertiesCompleted;
        
        /// <remarks/>
        public event SearchJSONCompletedEventHandler SearchJSONCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event GetAutoSuggestCompletedEventHandler GetAutoSuggestCompleted;
        
        /// <remarks/>
        public event SearchCountCompletedEventHandler SearchCountCompleted;
        
        /// <remarks/>
        public event GetFolderDataCompletedEventHandler GetFolderDataCompleted;
        
        /// <remarks/>
        public event TranslateFolderPathCompletedEventHandler TranslateFolderPathCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CanEditSchemaInfo", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanEditSchemaInfo(string userGuid) {
            object[] results = this.Invoke("CanEditSchemaInfo", new object[] {
                        userGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanEditSchemaInfoAsync(string userGuid) {
            this.CanEditSchemaInfoAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void CanEditSchemaInfoAsync(string userGuid, object userState) {
            if ((this.CanEditSchemaInfoOperationCompleted == null)) {
                this.CanEditSchemaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanEditSchemaInfoOperationCompleted);
            }
            this.InvokeAsync("CanEditSchemaInfo", new object[] {
                        userGuid}, this.CanEditSchemaInfoOperationCompleted, userState);
        }
        
        private void OnCanEditSchemaInfoOperationCompleted(object arg) {
            if ((this.CanEditSchemaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanEditSchemaInfoCompleted(this, new CanEditSchemaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CanEditUserInfo", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanEditUserInfo(string userGuid) {
            object[] results = this.Invoke("CanEditUserInfo", new object[] {
                        userGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanEditUserInfoAsync(string userGuid) {
            this.CanEditUserInfoAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void CanEditUserInfoAsync(string userGuid, object userState) {
            if ((this.CanEditUserInfoOperationCompleted == null)) {
                this.CanEditUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanEditUserInfoOperationCompleted);
            }
            this.InvokeAsync("CanEditUserInfo", new object[] {
                        userGuid}, this.CanEditUserInfoOperationCompleted, userState);
        }
        
        private void OnCanEditUserInfoOperationCompleted(object arg) {
            if ((this.CanEditUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanEditUserInfoCompleted(this, new CanEditUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSubscriptionList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSubscription[] GetSubscriptionList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetSubscriptionList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SSubscription[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriptionListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetSubscriptionListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetSubscriptionListOperationCompleted == null)) {
                this.GetSubscriptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionListOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetSubscriptionListOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionListOperationCompleted(object arg) {
            if ((this.GetSubscriptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionListCompleted(this, new GetSubscriptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetChangeLogList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentHistoryLog[] GetChangeLogList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, out bool hasMore) {
            object[] results = this.Invoke("GetChangeLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize});
            hasMore = ((bool)(results[1]));
            return ((SDocumentHistoryLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChangeLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize) {
            this.GetChangeLogListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, pageSize, null);
        }
        
        /// <remarks/>
        public void GetChangeLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, object userState) {
            if ((this.GetChangeLogListOperationCompleted == null)) {
                this.GetChangeLogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChangeLogListOperationCompleted);
            }
            this.InvokeAsync("GetChangeLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize}, this.GetChangeLogListOperationCompleted, userState);
        }
        
        private void OnGetChangeLogListOperationCompleted(object arg) {
            if ((this.GetChangeLogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChangeLogListCompleted(this, new GetChangeLogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckSignatures", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSignatureCheck[] CheckSignatures(string userGuid, string documentID, string storeID, string versionID) {
            object[] results = this.Invoke("CheckSignatures", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID});
            return ((SSignatureCheck[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckSignaturesAsync(string userGuid, string documentID, string storeID, string versionID) {
            this.CheckSignaturesAsync(userGuid, documentID, storeID, versionID, null);
        }
        
        /// <remarks/>
        public void CheckSignaturesAsync(string userGuid, string documentID, string storeID, string versionID, object userState) {
            if ((this.CheckSignaturesOperationCompleted == null)) {
                this.CheckSignaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSignaturesOperationCompleted);
            }
            this.InvokeAsync("CheckSignatures", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID}, this.CheckSignaturesOperationCompleted, userState);
        }
        
        private void OnCheckSignaturesOperationCompleted(object arg) {
            if ((this.CheckSignaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSignaturesCompleted(this, new CheckSignaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RenameFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderInfo RenameFolder(string userGuid, string folderName, string folderPath, string schemaLanguage) {
            object[] results = this.Invoke("RenameFolder", new object[] {
                        userGuid,
                        folderName,
                        folderPath,
                        schemaLanguage});
            return ((SFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void RenameFolderAsync(string userGuid, string folderName, string folderPath, string schemaLanguage) {
            this.RenameFolderAsync(userGuid, folderName, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void RenameFolderAsync(string userGuid, string folderName, string folderPath, string schemaLanguage, object userState) {
            if ((this.RenameFolderOperationCompleted == null)) {
                this.RenameFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFolderOperationCompleted);
            }
            this.InvokeAsync("RenameFolder", new object[] {
                        userGuid,
                        folderName,
                        folderPath,
                        schemaLanguage}, this.RenameFolderOperationCompleted, userState);
        }
        
        private void OnRenameFolderOperationCompleted(object arg) {
            if ((this.RenameFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFolderCompleted(this, new RenameFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RenameDocumentInFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameDocumentInFolder(string userGuid, string documentID, string newName, string parentFolderPath, string schemaLanguage) {
            this.Invoke("RenameDocumentInFolder", new object[] {
                        userGuid,
                        documentID,
                        newName,
                        parentFolderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void RenameDocumentInFolderAsync(string userGuid, string documentID, string newName, string parentFolderPath, string schemaLanguage) {
            this.RenameDocumentInFolderAsync(userGuid, documentID, newName, parentFolderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void RenameDocumentInFolderAsync(string userGuid, string documentID, string newName, string parentFolderPath, string schemaLanguage, object userState) {
            if ((this.RenameDocumentInFolderOperationCompleted == null)) {
                this.RenameDocumentInFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameDocumentInFolderOperationCompleted);
            }
            this.InvokeAsync("RenameDocumentInFolder", new object[] {
                        userGuid,
                        documentID,
                        newName,
                        parentFolderPath,
                        schemaLanguage}, this.RenameDocumentInFolderOperationCompleted, userState);
        }
        
        private void OnRenameDocumentInFolderOperationCompleted(object arg) {
            if ((this.RenameDocumentInFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameDocumentInFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetSearchFolderColumns", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSearchFolderColumns(string userGuid, string folderPath, SSearchFolderColumnsConfig searchFolderColumnsConfig, string schemaLanguage) {
            this.Invoke("SetSearchFolderColumns", new object[] {
                        userGuid,
                        folderPath,
                        searchFolderColumnsConfig,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void SetSearchFolderColumnsAsync(string userGuid, string folderPath, SSearchFolderColumnsConfig searchFolderColumnsConfig, string schemaLanguage) {
            this.SetSearchFolderColumnsAsync(userGuid, folderPath, searchFolderColumnsConfig, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void SetSearchFolderColumnsAsync(string userGuid, string folderPath, SSearchFolderColumnsConfig searchFolderColumnsConfig, string schemaLanguage, object userState) {
            if ((this.SetSearchFolderColumnsOperationCompleted == null)) {
                this.SetSearchFolderColumnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSearchFolderColumnsOperationCompleted);
            }
            this.InvokeAsync("SetSearchFolderColumns", new object[] {
                        userGuid,
                        folderPath,
                        searchFolderColumnsConfig,
                        schemaLanguage}, this.SetSearchFolderColumnsOperationCompleted, userState);
        }
        
        private void OnSetSearchFolderColumnsOperationCompleted(object arg) {
            if ((this.SetSearchFolderColumnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSearchFolderColumnsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditSearchFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditSearchFolder(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage) {
            this.Invoke("EditSearchFolder", new object[] {
                        userGuid,
                        searchFolder,
                        schemaLanguage,
                        uiLanguage});
        }
        
        /// <remarks/>
        public void EditSearchFolderAsync(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage) {
            this.EditSearchFolderAsync(userGuid, searchFolder, schemaLanguage, uiLanguage, null);
        }
        
        /// <remarks/>
        public void EditSearchFolderAsync(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage, object userState) {
            if ((this.EditSearchFolderOperationCompleted == null)) {
                this.EditSearchFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditSearchFolderOperationCompleted);
            }
            this.InvokeAsync("EditSearchFolder", new object[] {
                        userGuid,
                        searchFolder,
                        schemaLanguage,
                        uiLanguage}, this.EditSearchFolderOperationCompleted, userState);
        }
        
        private void OnEditSearchFolderOperationCompleted(object arg) {
            if ((this.EditSearchFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditSearchFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderInfo EditFolder(string userGuid, SFolderData folder, string schemaLanguage, string uiLanguage) {
            object[] results = this.Invoke("EditFolder", new object[] {
                        userGuid,
                        folder,
                        schemaLanguage,
                        uiLanguage});
            return ((SFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void EditFolderAsync(string userGuid, SFolderData folder, string schemaLanguage, string uiLanguage) {
            this.EditFolderAsync(userGuid, folder, schemaLanguage, uiLanguage, null);
        }
        
        /// <remarks/>
        public void EditFolderAsync(string userGuid, SFolderData folder, string schemaLanguage, string uiLanguage, object userState) {
            if ((this.EditFolderOperationCompleted == null)) {
                this.EditFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditFolderOperationCompleted);
            }
            this.InvokeAsync("EditFolder", new object[] {
                        userGuid,
                        folder,
                        schemaLanguage,
                        uiLanguage}, this.EditFolderOperationCompleted, userState);
        }
        
        private void OnEditFolderOperationCompleted(object arg) {
            if ((this.EditFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditFolderCompleted(this, new EditFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateSearchFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateSearchFolder(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage) {
            this.Invoke("CreateSearchFolder", new object[] {
                        userGuid,
                        searchFolder,
                        schemaLanguage,
                        uiLanguage});
        }
        
        /// <remarks/>
        public void CreateSearchFolderAsync(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage) {
            this.CreateSearchFolderAsync(userGuid, searchFolder, schemaLanguage, uiLanguage, null);
        }
        
        /// <remarks/>
        public void CreateSearchFolderAsync(string userGuid, SSearchFolderData searchFolder, string schemaLanguage, string uiLanguage, object userState) {
            if ((this.CreateSearchFolderOperationCompleted == null)) {
                this.CreateSearchFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSearchFolderOperationCompleted);
            }
            this.InvokeAsync("CreateSearchFolder", new object[] {
                        userGuid,
                        searchFolder,
                        schemaLanguage,
                        uiLanguage}, this.CreateSearchFolderOperationCompleted, userState);
        }
        
        private void OnCreateSearchFolderOperationCompleted(object arg) {
            if ((this.CreateSearchFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSearchFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateSearchFolderSimple", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderInfo CreateSearchFolderSimple(string userGuid, string folderPath, string folderName, string schemaLanguage) {
            object[] results = this.Invoke("CreateSearchFolderSimple", new object[] {
                        userGuid,
                        folderPath,
                        folderName,
                        schemaLanguage});
            return ((SFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSearchFolderSimpleAsync(string userGuid, string folderPath, string folderName, string schemaLanguage) {
            this.CreateSearchFolderSimpleAsync(userGuid, folderPath, folderName, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void CreateSearchFolderSimpleAsync(string userGuid, string folderPath, string folderName, string schemaLanguage, object userState) {
            if ((this.CreateSearchFolderSimpleOperationCompleted == null)) {
                this.CreateSearchFolderSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSearchFolderSimpleOperationCompleted);
            }
            this.InvokeAsync("CreateSearchFolderSimple", new object[] {
                        userGuid,
                        folderPath,
                        folderName,
                        schemaLanguage}, this.CreateSearchFolderSimpleOperationCompleted, userState);
        }
        
        private void OnCreateSearchFolderSimpleOperationCompleted(object arg) {
            if ((this.CreateSearchFolderSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSearchFolderSimpleCompleted(this, new CreateSearchFolderSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderInfo CreateFolder(string userGuid, string folderPath, string folderName, string schemaLanguage) {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        userGuid,
                        folderPath,
                        folderName,
                        schemaLanguage});
            return ((SFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string userGuid, string folderPath, string folderName, string schemaLanguage) {
            this.CreateFolderAsync(userGuid, folderPath, folderName, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string userGuid, string folderPath, string folderName, string schemaLanguage, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        userGuid,
                        folderPath,
                        folderName,
                        schemaLanguage}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteSearchFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSearchFolder(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("DeleteSearchFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void DeleteSearchFolderAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.DeleteSearchFolderAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void DeleteSearchFolderAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.DeleteSearchFolderOperationCompleted == null)) {
                this.DeleteSearchFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSearchFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteSearchFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.DeleteSearchFolderOperationCompleted, userState);
        }
        
        private void OnDeleteSearchFolderOperationCompleted(object arg) {
            if ((this.DeleteSearchFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSearchFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolder(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("DeleteFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.DeleteFolderAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteFolderReference", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolderReference(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("DeleteFolderReference", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void DeleteFolderReferenceAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.DeleteFolderReferenceAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void DeleteFolderReferenceAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.DeleteFolderReferenceOperationCompleted == null)) {
                this.DeleteFolderReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderReferenceOperationCompleted);
            }
            this.InvokeAsync("DeleteFolderReference", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.DeleteFolderReferenceOperationCompleted, userState);
        }
        
        private void OnDeleteFolderReferenceOperationCompleted(object arg) {
            if ((this.DeleteFolderReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderReferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetFolderProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFolderProperties(string userGuid, string folderPath, string[] properties, bool includeSubFolders, bool inheritFromParent, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("SetFolderProperties", new object[] {
                        userGuid,
                        folderPath,
                        properties,
                        includeSubFolders,
                        inheritFromParent,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFolderPropertiesAsync(string userGuid, string folderPath, string[] properties, bool includeSubFolders, bool inheritFromParent, string currentCulture, string currentUICulture) {
            this.SetFolderPropertiesAsync(userGuid, folderPath, properties, includeSubFolders, inheritFromParent, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void SetFolderPropertiesAsync(string userGuid, string folderPath, string[] properties, bool includeSubFolders, bool inheritFromParent, string currentCulture, string currentUICulture, object userState) {
            if ((this.SetFolderPropertiesOperationCompleted == null)) {
                this.SetFolderPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFolderPropertiesOperationCompleted);
            }
            this.InvokeAsync("SetFolderProperties", new object[] {
                        userGuid,
                        folderPath,
                        properties,
                        includeSubFolders,
                        inheritFromParent,
                        currentCulture,
                        currentUICulture}, this.SetFolderPropertiesOperationCompleted, userState);
        }
        
        private void OnSetFolderPropertiesOperationCompleted(object arg) {
            if ((this.SetFolderPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFolderPropertiesCompleted(this, new SetFolderPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ResetFolderProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ResetFolderProperties(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("ResetFolderProperties", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ResetFolderPropertiesAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            this.ResetFolderPropertiesAsync(userGuid, folderPath, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void ResetFolderPropertiesAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, object userState) {
            if ((this.ResetFolderPropertiesOperationCompleted == null)) {
                this.ResetFolderPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetFolderPropertiesOperationCompleted);
            }
            this.InvokeAsync("ResetFolderProperties", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture}, this.ResetFolderPropertiesOperationCompleted, userState);
        }
        
        private void OnResetFolderPropertiesOperationCompleted(object arg) {
            if ((this.ResetFolderPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetFolderPropertiesCompleted(this, new ResetFolderPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DecryptURL", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptURL(string url) {
            object[] results = this.Invoke("DecryptURL", new object[] {
                        url});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptURLAsync(string url) {
            this.DecryptURLAsync(url, null);
        }
        
        /// <remarks/>
        public void DecryptURLAsync(string url, object userState) {
            if ((this.DecryptURLOperationCompleted == null)) {
                this.DecryptURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptURLOperationCompleted);
            }
            this.InvokeAsync("DecryptURL", new object[] {
                        url}, this.DecryptURLOperationCompleted, userState);
        }
        
        private void OnDecryptURLOperationCompleted(object arg) {
            if ((this.DecryptURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptURLCompleted(this, new DecryptURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EncryptURL", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptURL(string url, int lifetime) {
            object[] results = this.Invoke("EncryptURL", new object[] {
                        url,
                        lifetime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptURLAsync(string url, int lifetime) {
            this.EncryptURLAsync(url, lifetime, null);
        }
        
        /// <remarks/>
        public void EncryptURLAsync(string url, int lifetime, object userState) {
            if ((this.EncryptURLOperationCompleted == null)) {
                this.EncryptURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptURLOperationCompleted);
            }
            this.InvokeAsync("EncryptURL", new object[] {
                        url,
                        lifetime}, this.EncryptURLOperationCompleted, userState);
        }
        
        private void OnEncryptURLOperationCompleted(object arg) {
            if ((this.EncryptURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptURLCompleted(this, new EncryptURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ModifyAnnotationStamp", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ModifyAnnotationStamp(string userGuid, string stamp, StampModifier stampModifier) {
            object[] results = this.Invoke("ModifyAnnotationStamp", new object[] {
                        userGuid,
                        stamp,
                        stampModifier});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyAnnotationStampAsync(string userGuid, string stamp, StampModifier stampModifier) {
            this.ModifyAnnotationStampAsync(userGuid, stamp, stampModifier, null);
        }
        
        /// <remarks/>
        public void ModifyAnnotationStampAsync(string userGuid, string stamp, StampModifier stampModifier, object userState) {
            if ((this.ModifyAnnotationStampOperationCompleted == null)) {
                this.ModifyAnnotationStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyAnnotationStampOperationCompleted);
            }
            this.InvokeAsync("ModifyAnnotationStamp", new object[] {
                        userGuid,
                        stamp,
                        stampModifier}, this.ModifyAnnotationStampOperationCompleted, userState);
        }
        
        private void OnModifyAnnotationStampOperationCompleted(object arg) {
            if ((this.ModifyAnnotationStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyAnnotationStampCompleted(this, new ModifyAnnotationStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllAnnotationStamps", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAllAnnotationStamps(string userGuid, StampValidity stampValidity) {
            object[] results = this.Invoke("GetAllAnnotationStamps", new object[] {
                        userGuid,
                        stampValidity});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAnnotationStampsAsync(string userGuid, StampValidity stampValidity) {
            this.GetAllAnnotationStampsAsync(userGuid, stampValidity, null);
        }
        
        /// <remarks/>
        public void GetAllAnnotationStampsAsync(string userGuid, StampValidity stampValidity, object userState) {
            if ((this.GetAllAnnotationStampsOperationCompleted == null)) {
                this.GetAllAnnotationStampsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAnnotationStampsOperationCompleted);
            }
            this.InvokeAsync("GetAllAnnotationStamps", new object[] {
                        userGuid,
                        stampValidity}, this.GetAllAnnotationStampsOperationCompleted, userState);
        }
        
        private void OnGetAllAnnotationStampsOperationCompleted(object arg) {
            if ((this.GetAllAnnotationStampsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAnnotationStampsCompleted(this, new GetAllAnnotationStampsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveDefaultRectangleAnnotation", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveDefaultRectangleAnnotation(string userGuid, bool isTransparent, int colorARGB, string securityLevel) {
            this.Invoke("SaveDefaultRectangleAnnotation", new object[] {
                        userGuid,
                        isTransparent,
                        colorARGB,
                        securityLevel});
        }
        
        /// <remarks/>
        public void SaveDefaultRectangleAnnotationAsync(string userGuid, bool isTransparent, int colorARGB, string securityLevel) {
            this.SaveDefaultRectangleAnnotationAsync(userGuid, isTransparent, colorARGB, securityLevel, null);
        }
        
        /// <remarks/>
        public void SaveDefaultRectangleAnnotationAsync(string userGuid, bool isTransparent, int colorARGB, string securityLevel, object userState) {
            if ((this.SaveDefaultRectangleAnnotationOperationCompleted == null)) {
                this.SaveDefaultRectangleAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDefaultRectangleAnnotationOperationCompleted);
            }
            this.InvokeAsync("SaveDefaultRectangleAnnotation", new object[] {
                        userGuid,
                        isTransparent,
                        colorARGB,
                        securityLevel}, this.SaveDefaultRectangleAnnotationOperationCompleted, userState);
        }
        
        private void OnSaveDefaultRectangleAnnotationOperationCompleted(object arg) {
            if ((this.SaveDefaultRectangleAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDefaultRectangleAnnotationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDefaultRectangleAnnotation", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDefaultRectangleAnnotation(string userGuid, bool isTransparent) {
            object[] results = this.Invoke("GetDefaultRectangleAnnotation", new object[] {
                        userGuid,
                        isTransparent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultRectangleAnnotationAsync(string userGuid, bool isTransparent) {
            this.GetDefaultRectangleAnnotationAsync(userGuid, isTransparent, null);
        }
        
        /// <remarks/>
        public void GetDefaultRectangleAnnotationAsync(string userGuid, bool isTransparent, object userState) {
            if ((this.GetDefaultRectangleAnnotationOperationCompleted == null)) {
                this.GetDefaultRectangleAnnotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultRectangleAnnotationOperationCompleted);
            }
            this.InvokeAsync("GetDefaultRectangleAnnotation", new object[] {
                        userGuid,
                        isTransparent}, this.GetDefaultRectangleAnnotationOperationCompleted, userState);
        }
        
        private void OnGetDefaultRectangleAnnotationOperationCompleted(object arg) {
            if ((this.GetDefaultRectangleAnnotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultRectangleAnnotationCompleted(this, new GetDefaultRectangleAnnotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllLifeCycles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SLifeCycle[] GetAllLifeCycles(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllLifeCycles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SLifeCycle[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLifeCyclesAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetAllLifeCyclesAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllLifeCyclesAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllLifeCyclesOperationCompleted == null)) {
                this.GetAllLifeCyclesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLifeCyclesOperationCompleted);
            }
            this.InvokeAsync("GetAllLifeCycles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetAllLifeCyclesOperationCompleted, userState);
        }
        
        private void OnGetAllLifeCyclesOperationCompleted(object arg) {
            if ((this.GetAllLifeCyclesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLifeCyclesCompleted(this, new GetAllLifeCyclesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetLifeCycle", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SLifeCycle GetLifeCycle(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetLifeCycle", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SLifeCycle)(results[0]));
        }
        
        /// <remarks/>
        public void GetLifeCycleAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetLifeCycleAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetLifeCycleAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetLifeCycleOperationCompleted == null)) {
                this.GetLifeCycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLifeCycleOperationCompleted);
            }
            this.InvokeAsync("GetLifeCycle", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetLifeCycleOperationCompleted, userState);
        }
        
        private void OnGetLifeCycleOperationCompleted(object arg) {
            if ((this.GetLifeCycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLifeCycleCompleted(this, new GetLifeCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSuccessorLifeCycleStates", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SLifeCycleState[] GetSuccessorLifeCycleStates(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetSuccessorLifeCycleStates", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SLifeCycleState[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSuccessorLifeCycleStatesAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetSuccessorLifeCycleStatesAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetSuccessorLifeCycleStatesAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetSuccessorLifeCycleStatesOperationCompleted == null)) {
                this.GetSuccessorLifeCycleStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSuccessorLifeCycleStatesOperationCompleted);
            }
            this.InvokeAsync("GetSuccessorLifeCycleStates", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetSuccessorLifeCycleStatesOperationCompleted, userState);
        }
        
        private void OnGetSuccessorLifeCycleStatesOperationCompleted(object arg) {
            if ((this.GetSuccessorLifeCycleStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSuccessorLifeCycleStatesCompleted(this, new GetSuccessorLifeCycleStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllProtectionDomains", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SProtectionDomain[] GetAllProtectionDomains(string userGuid, bool forImport, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllProtectionDomains", new object[] {
                        userGuid,
                        forImport,
                        currentCulture,
                        currentUICulture});
            return ((SProtectionDomain[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllProtectionDomainsAsync(string userGuid, bool forImport, string currentCulture, string currentUICulture) {
            this.GetAllProtectionDomainsAsync(userGuid, forImport, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllProtectionDomainsAsync(string userGuid, bool forImport, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllProtectionDomainsOperationCompleted == null)) {
                this.GetAllProtectionDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllProtectionDomainsOperationCompleted);
            }
            this.InvokeAsync("GetAllProtectionDomains", new object[] {
                        userGuid,
                        forImport,
                        currentCulture,
                        currentUICulture}, this.GetAllProtectionDomainsOperationCompleted, userState);
        }
        
        private void OnGetAllProtectionDomainsOperationCompleted(object arg) {
            if ((this.GetAllProtectionDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllProtectionDomainsCompleted(this, new GetAllProtectionDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllProtectionDomainsWithRights", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SProtectionDomain[] GetAllProtectionDomainsWithRights(string userGuid, string schemaLanguage, string[] accessOperationIDs) {
            object[] results = this.Invoke("GetAllProtectionDomainsWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        accessOperationIDs});
            return ((SProtectionDomain[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllProtectionDomainsWithRightsAsync(string userGuid, string schemaLanguage, string[] accessOperationIDs) {
            this.GetAllProtectionDomainsWithRightsAsync(userGuid, schemaLanguage, accessOperationIDs, null);
        }
        
        /// <remarks/>
        public void GetAllProtectionDomainsWithRightsAsync(string userGuid, string schemaLanguage, string[] accessOperationIDs, object userState) {
            if ((this.GetAllProtectionDomainsWithRightsOperationCompleted == null)) {
                this.GetAllProtectionDomainsWithRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllProtectionDomainsWithRightsOperationCompleted);
            }
            this.InvokeAsync("GetAllProtectionDomainsWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        accessOperationIDs}, this.GetAllProtectionDomainsWithRightsOperationCompleted, userState);
        }
        
        private void OnGetAllProtectionDomainsWithRightsOperationCompleted(object arg) {
            if ((this.GetAllProtectionDomainsWithRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllProtectionDomainsWithRightsCompleted(this, new GetAllProtectionDomainsWithRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetNextVersionNumber", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextVersionNumber(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("GetNextVersionNumber", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextVersionNumberAsync(string userGuid, string documentID, string storeID) {
            this.GetNextVersionNumberAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetNextVersionNumberAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetNextVersionNumberOperationCompleted == null)) {
                this.GetNextVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetNextVersionNumber", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetNextVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetNextVersionNumberOperationCompleted(object arg) {
            if ((this.GetNextVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextVersionNumberCompleted(this, new GetNextVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetOverlayDocument", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetOverlayDocument(string userGuid, string documentID, string storeID, out OverlayDocument overlayInfo) {
            object[] results = this.Invoke("GetOverlayDocument", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            overlayInfo = ((OverlayDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOverlayDocumentAsync(string userGuid, string documentID, string storeID) {
            this.GetOverlayDocumentAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetOverlayDocumentAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetOverlayDocumentOperationCompleted == null)) {
                this.GetOverlayDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOverlayDocumentOperationCompleted);
            }
            this.InvokeAsync("GetOverlayDocument", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetOverlayDocumentOperationCompleted, userState);
        }
        
        private void OnGetOverlayDocumentOperationCompleted(object arg) {
            if ((this.GetOverlayDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOverlayDocumentCompleted(this, new GetOverlayDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetOverlayDocumentConverted", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetOverlayDocumentConverted(string userGuid, string documentID, string storeID, string profileName, out OverlayDocument overlayInfo) {
            object[] results = this.Invoke("GetOverlayDocumentConverted", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        profileName});
            overlayInfo = ((OverlayDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOverlayDocumentConvertedAsync(string userGuid, string documentID, string storeID, string profileName) {
            this.GetOverlayDocumentConvertedAsync(userGuid, documentID, storeID, profileName, null);
        }
        
        /// <remarks/>
        public void GetOverlayDocumentConvertedAsync(string userGuid, string documentID, string storeID, string profileName, object userState) {
            if ((this.GetOverlayDocumentConvertedOperationCompleted == null)) {
                this.GetOverlayDocumentConvertedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOverlayDocumentConvertedOperationCompleted);
            }
            this.InvokeAsync("GetOverlayDocumentConverted", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        profileName}, this.GetOverlayDocumentConvertedOperationCompleted, userState);
        }
        
        private void OnGetOverlayDocumentConvertedOperationCompleted(object arg) {
            if ((this.GetOverlayDocumentConvertedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOverlayDocumentConvertedCompleted(this, new GetOverlayDocumentConvertedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllProcessTemplates", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SProcessTemplateExt[] GetAllProcessTemplates(string userGuid, bool forCreation, bool includeExpired, string formatCulture, string schemaCulture, string uiCulture) {
            object[] results = this.Invoke("GetAllProcessTemplates", new object[] {
                        userGuid,
                        forCreation,
                        includeExpired,
                        formatCulture,
                        schemaCulture,
                        uiCulture});
            return ((SProcessTemplateExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllProcessTemplatesAsync(string userGuid, bool forCreation, bool includeExpired, string formatCulture, string schemaCulture, string uiCulture) {
            this.GetAllProcessTemplatesAsync(userGuid, forCreation, includeExpired, formatCulture, schemaCulture, uiCulture, null);
        }
        
        /// <remarks/>
        public void GetAllProcessTemplatesAsync(string userGuid, bool forCreation, bool includeExpired, string formatCulture, string schemaCulture, string uiCulture, object userState) {
            if ((this.GetAllProcessTemplatesOperationCompleted == null)) {
                this.GetAllProcessTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllProcessTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetAllProcessTemplates", new object[] {
                        userGuid,
                        forCreation,
                        includeExpired,
                        formatCulture,
                        schemaCulture,
                        uiCulture}, this.GetAllProcessTemplatesOperationCompleted, userState);
        }
        
        private void OnGetAllProcessTemplatesOperationCompleted(object arg) {
            if ((this.GetAllProcessTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllProcessTemplatesCompleted(this, new GetAllProcessTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProcess(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] comments, PriorityEnum priority, string[] userIDsForFirstTask, bool editingByAll, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentProperty[] properties, string protectionDomainID) {
            object[] results = this.Invoke("CreateProcess", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        processTemplate,
                        name,
                        daysDue,
                        comments,
                        priority,
                        userIDsForFirstTask,
                        editingByAll,
                        properties,
                        protectionDomainID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProcessAsync(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, SComment[] comments, PriorityEnum priority, string[] userIDsForFirstTask, bool editingByAll, SDocumentProperty[] properties, string protectionDomainID) {
            this.CreateProcessAsync(userGuid, currentCulture, currentUICulture, processTemplate, name, daysDue, comments, priority, userIDsForFirstTask, editingByAll, properties, protectionDomainID, null);
        }
        
        /// <remarks/>
        public void CreateProcessAsync(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, SComment[] comments, PriorityEnum priority, string[] userIDsForFirstTask, bool editingByAll, SDocumentProperty[] properties, string protectionDomainID, object userState) {
            if ((this.CreateProcessOperationCompleted == null)) {
                this.CreateProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProcessOperationCompleted);
            }
            this.InvokeAsync("CreateProcess", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        processTemplate,
                        name,
                        daysDue,
                        comments,
                        priority,
                        userIDsForFirstTask,
                        editingByAll,
                        properties,
                        protectionDomainID}, this.CreateProcessOperationCompleted, userState);
        }
        
        private void OnCreateProcessOperationCompleted(object arg) {
            if ((this.CreateProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProcessCompleted(this, new CreateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreatePropertyCategory", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreatePropertyCategory(string userGuid, string currentCulture, string currentUICulture, SPropertyCategory propertyCategory) {
            object[] results = this.Invoke("CreatePropertyCategory", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        propertyCategory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePropertyCategoryAsync(string userGuid, string currentCulture, string currentUICulture, SPropertyCategory propertyCategory) {
            this.CreatePropertyCategoryAsync(userGuid, currentCulture, currentUICulture, propertyCategory, null);
        }
        
        /// <remarks/>
        public void CreatePropertyCategoryAsync(string userGuid, string currentCulture, string currentUICulture, SPropertyCategory propertyCategory, object userState) {
            if ((this.CreatePropertyCategoryOperationCompleted == null)) {
                this.CreatePropertyCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePropertyCategoryOperationCompleted);
            }
            this.InvokeAsync("CreatePropertyCategory", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        propertyCategory}, this.CreatePropertyCategoryOperationCompleted, userState);
        }
        
        private void OnCreatePropertyCategoryOperationCompleted(object arg) {
            if ((this.CreatePropertyCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePropertyCategoryCompleted(this, new CreatePropertyCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/StartProcessTasks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartProcessTasks(string userGuid, string processID, string[] userIDsForFirstTask, bool editingByAll) {
            this.Invoke("StartProcessTasks", new object[] {
                        userGuid,
                        processID,
                        userIDsForFirstTask,
                        editingByAll});
        }
        
        /// <remarks/>
        public void StartProcessTasksAsync(string userGuid, string processID, string[] userIDsForFirstTask, bool editingByAll) {
            this.StartProcessTasksAsync(userGuid, processID, userIDsForFirstTask, editingByAll, null);
        }
        
        /// <remarks/>
        public void StartProcessTasksAsync(string userGuid, string processID, string[] userIDsForFirstTask, bool editingByAll, object userState) {
            if ((this.StartProcessTasksOperationCompleted == null)) {
                this.StartProcessTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartProcessTasksOperationCompleted);
            }
            this.InvokeAsync("StartProcessTasks", new object[] {
                        userGuid,
                        processID,
                        userIDsForFirstTask,
                        editingByAll}, this.StartProcessTasksOperationCompleted, userState);
        }
        
        private void OnStartProcessTasksOperationCompleted(object arg) {
            if ((this.StartProcessTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartProcessTasksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateProcessWithoutTasks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProcessWithoutTasks(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] comments, PriorityEnum priority, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentProperty[] properties, string protectionDomainID) {
            object[] results = this.Invoke("CreateProcessWithoutTasks", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        processTemplate,
                        name,
                        daysDue,
                        comments,
                        priority,
                        properties,
                        protectionDomainID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProcessWithoutTasksAsync(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, SComment[] comments, PriorityEnum priority, SDocumentProperty[] properties, string protectionDomainID) {
            this.CreateProcessWithoutTasksAsync(userGuid, currentCulture, currentUICulture, processTemplate, name, daysDue, comments, priority, properties, protectionDomainID, null);
        }
        
        /// <remarks/>
        public void CreateProcessWithoutTasksAsync(string userGuid, string currentCulture, string currentUICulture, SProcessTemplateExt processTemplate, string name, int daysDue, SComment[] comments, PriorityEnum priority, SDocumentProperty[] properties, string protectionDomainID, object userState) {
            if ((this.CreateProcessWithoutTasksOperationCompleted == null)) {
                this.CreateProcessWithoutTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProcessWithoutTasksOperationCompleted);
            }
            this.InvokeAsync("CreateProcessWithoutTasks", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        processTemplate,
                        name,
                        daysDue,
                        comments,
                        priority,
                        properties,
                        protectionDomainID}, this.CreateProcessWithoutTasksOperationCompleted, userState);
        }
        
        private void OnCreateProcessWithoutTasksOperationCompleted(object arg) {
            if ((this.CreateProcessWithoutTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProcessWithoutTasksCompleted(this, new CreateProcessWithoutTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AssumeAssignedTask", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssumeAssignedTask(string userGuid, string processID) {
            this.Invoke("AssumeAssignedTask", new object[] {
                        userGuid,
                        processID});
        }
        
        /// <remarks/>
        public void AssumeAssignedTaskAsync(string userGuid, string processID) {
            this.AssumeAssignedTaskAsync(userGuid, processID, null);
        }
        
        /// <remarks/>
        public void AssumeAssignedTaskAsync(string userGuid, string processID, object userState) {
            if ((this.AssumeAssignedTaskOperationCompleted == null)) {
                this.AssumeAssignedTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssumeAssignedTaskOperationCompleted);
            }
            this.InvokeAsync("AssumeAssignedTask", new object[] {
                        userGuid,
                        processID}, this.AssumeAssignedTaskOperationCompleted, userState);
        }
        
        private void OnAssumeAssignedTaskOperationCompleted(object arg) {
            if ((this.AssumeAssignedTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssumeAssignedTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/TakeActiveAction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TakeActiveAction(string userGuid, string processID, bool resumeAll, string[] userIDs) {
            this.Invoke("TakeActiveAction", new object[] {
                        userGuid,
                        processID,
                        resumeAll,
                        userIDs});
        }
        
        /// <remarks/>
        public void TakeActiveActionAsync(string userGuid, string processID, bool resumeAll, string[] userIDs) {
            this.TakeActiveActionAsync(userGuid, processID, resumeAll, userIDs, null);
        }
        
        /// <remarks/>
        public void TakeActiveActionAsync(string userGuid, string processID, bool resumeAll, string[] userIDs, object userState) {
            if ((this.TakeActiveActionOperationCompleted == null)) {
                this.TakeActiveActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTakeActiveActionOperationCompleted);
            }
            this.InvokeAsync("TakeActiveAction", new object[] {
                        userGuid,
                        processID,
                        resumeAll,
                        userIDs}, this.TakeActiveActionOperationCompleted, userState);
        }
        
        private void OnTakeActiveActionOperationCompleted(object arg) {
            if ((this.TakeActiveActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TakeActiveActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SProcess GetProcess(string userGuid, string processID, string formatCulture, string schemaCulture) {
            object[] results = this.Invoke("GetProcess", new object[] {
                        userGuid,
                        processID,
                        formatCulture,
                        schemaCulture});
            return ((SProcess)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessAsync(string userGuid, string processID, string formatCulture, string schemaCulture) {
            this.GetProcessAsync(userGuid, processID, formatCulture, schemaCulture, null);
        }
        
        /// <remarks/>
        public void GetProcessAsync(string userGuid, string processID, string formatCulture, string schemaCulture, object userState) {
            if ((this.GetProcessOperationCompleted == null)) {
                this.GetProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessOperationCompleted);
            }
            this.InvokeAsync("GetProcess", new object[] {
                        userGuid,
                        processID,
                        formatCulture,
                        schemaCulture}, this.GetProcessOperationCompleted, userState);
        }
        
        private void OnGetProcessOperationCompleted(object arg) {
            if ((this.GetProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessCompleted(this, new GetProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CompleteCurrentTask", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CompleteCurrentTask(string userGuid, string processID, string taskComment, string processComment) {
            object[] results = this.Invoke("CompleteCurrentTask", new object[] {
                        userGuid,
                        processID,
                        taskComment,
                        processComment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteCurrentTaskAsync(string userGuid, string processID, string taskComment, string processComment) {
            this.CompleteCurrentTaskAsync(userGuid, processID, taskComment, processComment, null);
        }
        
        /// <remarks/>
        public void CompleteCurrentTaskAsync(string userGuid, string processID, string taskComment, string processComment, object userState) {
            if ((this.CompleteCurrentTaskOperationCompleted == null)) {
                this.CompleteCurrentTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteCurrentTaskOperationCompleted);
            }
            this.InvokeAsync("CompleteCurrentTask", new object[] {
                        userGuid,
                        processID,
                        taskComment,
                        processComment}, this.CompleteCurrentTaskOperationCompleted, userState);
        }
        
        private void OnCompleteCurrentTaskOperationCompleted(object arg) {
            if ((this.CompleteCurrentTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteCurrentTaskCompleted(this, new CompleteCurrentTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CompleteProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompleteProcess(string userGuid, string processID, string comment) {
            this.Invoke("CompleteProcess", new object[] {
                        userGuid,
                        processID,
                        comment});
        }
        
        /// <remarks/>
        public void CompleteProcessAsync(string userGuid, string processID, string comment) {
            this.CompleteProcessAsync(userGuid, processID, comment, null);
        }
        
        /// <remarks/>
        public void CompleteProcessAsync(string userGuid, string processID, string comment, object userState) {
            if ((this.CompleteProcessOperationCompleted == null)) {
                this.CompleteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteProcessOperationCompleted);
            }
            this.InvokeAsync("CompleteProcess", new object[] {
                        userGuid,
                        processID,
                        comment}, this.CompleteProcessOperationCompleted, userState);
        }
        
        private void OnCompleteProcessOperationCompleted(object arg) {
            if ((this.CompleteProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CompleteOngoingProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompleteOngoingProcess(string userGuid, string processID, string comment) {
            this.Invoke("CompleteOngoingProcess", new object[] {
                        userGuid,
                        processID,
                        comment});
        }
        
        /// <remarks/>
        public void CompleteOngoingProcessAsync(string userGuid, string processID, string comment) {
            this.CompleteOngoingProcessAsync(userGuid, processID, comment, null);
        }
        
        /// <remarks/>
        public void CompleteOngoingProcessAsync(string userGuid, string processID, string comment, object userState) {
            if ((this.CompleteOngoingProcessOperationCompleted == null)) {
                this.CompleteOngoingProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteOngoingProcessOperationCompleted);
            }
            this.InvokeAsync("CompleteOngoingProcess", new object[] {
                        userGuid,
                        processID,
                        comment}, this.CompleteOngoingProcessOperationCompleted, userState);
        }
        
        private void OnCompleteOngoingProcessOperationCompleted(object arg) {
            if ((this.CompleteOngoingProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteOngoingProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AssignTask", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignTask(string userGuid, string processID, string dueDate, string[] userAndGroupIDs, string description, bool editionByAll, bool removeCurrentUsers, bool assignedUsersOnly, string formatCulture) {
            this.Invoke("AssignTask", new object[] {
                        userGuid,
                        processID,
                        dueDate,
                        userAndGroupIDs,
                        description,
                        editionByAll,
                        removeCurrentUsers,
                        assignedUsersOnly,
                        formatCulture});
        }
        
        /// <remarks/>
        public void AssignTaskAsync(string userGuid, string processID, string dueDate, string[] userAndGroupIDs, string description, bool editionByAll, bool removeCurrentUsers, bool assignedUsersOnly, string formatCulture) {
            this.AssignTaskAsync(userGuid, processID, dueDate, userAndGroupIDs, description, editionByAll, removeCurrentUsers, assignedUsersOnly, formatCulture, null);
        }
        
        /// <remarks/>
        public void AssignTaskAsync(string userGuid, string processID, string dueDate, string[] userAndGroupIDs, string description, bool editionByAll, bool removeCurrentUsers, bool assignedUsersOnly, string formatCulture, object userState) {
            if ((this.AssignTaskOperationCompleted == null)) {
                this.AssignTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignTaskOperationCompleted);
            }
            this.InvokeAsync("AssignTask", new object[] {
                        userGuid,
                        processID,
                        dueDate,
                        userAndGroupIDs,
                        description,
                        editionByAll,
                        removeCurrentUsers,
                        assignedUsersOnly,
                        formatCulture}, this.AssignTaskOperationCompleted, userState);
        }
        
        private void OnAssignTaskOperationCompleted(object arg) {
            if ((this.AssignTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AddDocumentsToProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddDocumentsToProcess(string userGuid, string formatCulture, string schemaCulture, string[] documentIDs, string processID) {
            object[] results = this.Invoke("AddDocumentsToProcess", new object[] {
                        userGuid,
                        formatCulture,
                        schemaCulture,
                        documentIDs,
                        processID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddDocumentsToProcessAsync(string userGuid, string formatCulture, string schemaCulture, string[] documentIDs, string processID) {
            this.AddDocumentsToProcessAsync(userGuid, formatCulture, schemaCulture, documentIDs, processID, null);
        }
        
        /// <remarks/>
        public void AddDocumentsToProcessAsync(string userGuid, string formatCulture, string schemaCulture, string[] documentIDs, string processID, object userState) {
            if ((this.AddDocumentsToProcessOperationCompleted == null)) {
                this.AddDocumentsToProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDocumentsToProcessOperationCompleted);
            }
            this.InvokeAsync("AddDocumentsToProcess", new object[] {
                        userGuid,
                        formatCulture,
                        schemaCulture,
                        documentIDs,
                        processID}, this.AddDocumentsToProcessOperationCompleted, userState);
        }
        
        private void OnAddDocumentsToProcessOperationCompleted(object arg) {
            if ((this.AddDocumentsToProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDocumentsToProcessCompleted(this, new AddDocumentsToProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentsFromProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] GetDocumentsFromProcess(string userGuid, string formatCulture, string schemaCulture, string processID, out SSearchFolderColumnsConfig searchFolderConfig) {
            object[] results = this.Invoke("GetDocumentsFromProcess", new object[] {
                        userGuid,
                        formatCulture,
                        schemaCulture,
                        processID});
            searchFolderConfig = ((SSearchFolderColumnsConfig)(results[1]));
            return ((SDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsFromProcessAsync(string userGuid, string formatCulture, string schemaCulture, string processID) {
            this.GetDocumentsFromProcessAsync(userGuid, formatCulture, schemaCulture, processID, null);
        }
        
        /// <remarks/>
        public void GetDocumentsFromProcessAsync(string userGuid, string formatCulture, string schemaCulture, string processID, object userState) {
            if ((this.GetDocumentsFromProcessOperationCompleted == null)) {
                this.GetDocumentsFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsFromProcessOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsFromProcess", new object[] {
                        userGuid,
                        formatCulture,
                        schemaCulture,
                        processID}, this.GetDocumentsFromProcessOperationCompleted, userState);
        }
        
        private void OnGetDocumentsFromProcessOperationCompleted(object arg) {
            if ((this.GetDocumentsFromProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsFromProcessCompleted(this, new GetDocumentsFromProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveDocumentFromProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveDocumentFromProcess(string userGuid, string currentCulture, string currentUICulture, string documentID, string processID) {
            object[] results = this.Invoke("RemoveDocumentFromProcess", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        processID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveDocumentFromProcessAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string processID) {
            this.RemoveDocumentFromProcessAsync(userGuid, currentCulture, currentUICulture, documentID, processID, null);
        }
        
        /// <remarks/>
        public void RemoveDocumentFromProcessAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string processID, object userState) {
            if ((this.RemoveDocumentFromProcessOperationCompleted == null)) {
                this.RemoveDocumentFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDocumentFromProcessOperationCompleted);
            }
            this.InvokeAsync("RemoveDocumentFromProcess", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        processID}, this.RemoveDocumentFromProcessOperationCompleted, userState);
        }
        
        private void OnRemoveDocumentFromProcessOperationCompleted(object arg) {
            if ((this.RemoveDocumentFromProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDocumentFromProcessCompleted(this, new RemoveDocumentFromProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/MoveDocument", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MoveDocument(string userGuid, string currentCulture, string currentUICulture, string sourcePath, string targetPath) {
            object[] results = this.Invoke("MoveDocument", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        sourcePath,
                        targetPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveDocumentAsync(string userGuid, string currentCulture, string currentUICulture, string sourcePath, string targetPath) {
            this.MoveDocumentAsync(userGuid, currentCulture, currentUICulture, sourcePath, targetPath, null);
        }
        
        /// <remarks/>
        public void MoveDocumentAsync(string userGuid, string currentCulture, string currentUICulture, string sourcePath, string targetPath, object userState) {
            if ((this.MoveDocumentOperationCompleted == null)) {
                this.MoveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveDocumentOperationCompleted);
            }
            this.InvokeAsync("MoveDocument", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        sourcePath,
                        targetPath}, this.MoveDocumentOperationCompleted, userState);
        }
        
        private void OnMoveDocumentOperationCompleted(object arg) {
            if ((this.MoveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveDocumentCompleted(this, new MoveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SendDocumentsByEmail", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendDocumentsByEmail(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, SMailItem mailItem) {
            this.Invoke("SendDocumentsByEmail", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        documentIDs,
                        includeAnnotations,
                        includeSignatures,
                        mailItem});
        }
        
        /// <remarks/>
        public void SendDocumentsByEmailAsync(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, SMailItem mailItem) {
            this.SendDocumentsByEmailAsync(userGuid, culture, uiCulture, documentIDs, includeAnnotations, includeSignatures, mailItem, null);
        }
        
        /// <remarks/>
        public void SendDocumentsByEmailAsync(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, SMailItem mailItem, object userState) {
            if ((this.SendDocumentsByEmailOperationCompleted == null)) {
                this.SendDocumentsByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDocumentsByEmailOperationCompleted);
            }
            this.InvokeAsync("SendDocumentsByEmail", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        documentIDs,
                        includeAnnotations,
                        includeSignatures,
                        mailItem}, this.SendDocumentsByEmailOperationCompleted, userState);
        }
        
        private void OnSendDocumentsByEmailOperationCompleted(object arg) {
            if ((this.SendDocumentsByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDocumentsByEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SendEmail", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendEmail(string userGuid, string culture, string uiCulture, SMailItem mailItem) {
            object[] results = this.Invoke("SendEmail", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        mailItem});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailAsync(string userGuid, string culture, string uiCulture, SMailItem mailItem) {
            this.SendEmailAsync(userGuid, culture, uiCulture, mailItem, null);
        }
        
        /// <remarks/>
        public void SendEmailAsync(string userGuid, string culture, string uiCulture, SMailItem mailItem, object userState) {
            if ((this.SendEmailOperationCompleted == null)) {
                this.SendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailOperationCompleted);
            }
            this.InvokeAsync("SendEmail", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        mailItem}, this.SendEmailOperationCompleted, userState);
        }
        
        private void OnSendEmailOperationCompleted(object arg) {
            if ((this.SendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AddAccessLogEntry", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddAccessLogEntry(string userGuid, string documentID, string storeID, string accessType) {
            this.Invoke("AddAccessLogEntry", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        accessType});
        }
        
        /// <remarks/>
        public void AddAccessLogEntryAsync(string userGuid, string documentID, string storeID, string accessType) {
            this.AddAccessLogEntryAsync(userGuid, documentID, storeID, accessType, null);
        }
        
        /// <remarks/>
        public void AddAccessLogEntryAsync(string userGuid, string documentID, string storeID, string accessType, object userState) {
            if ((this.AddAccessLogEntryOperationCompleted == null)) {
                this.AddAccessLogEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAccessLogEntryOperationCompleted);
            }
            this.InvokeAsync("AddAccessLogEntry", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        accessType}, this.AddAccessLogEntryOperationCompleted, userState);
        }
        
        private void OnAddAccessLogEntryOperationCompleted(object arg) {
            if ((this.AddAccessLogEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAccessLogEntryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AddSubscription", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubscription(string userGuid, string documentID, string storeID, SSubscription subscription) {
            this.Invoke("AddSubscription", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        subscription});
        }
        
        /// <remarks/>
        public void AddSubscriptionAsync(string userGuid, string documentID, string storeID, SSubscription subscription) {
            this.AddSubscriptionAsync(userGuid, documentID, storeID, subscription, null);
        }
        
        /// <remarks/>
        public void AddSubscriptionAsync(string userGuid, string documentID, string storeID, SSubscription subscription, object userState) {
            if ((this.AddSubscriptionOperationCompleted == null)) {
                this.AddSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriptionOperationCompleted);
            }
            this.InvokeAsync("AddSubscription", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        subscription}, this.AddSubscriptionOperationCompleted, userState);
        }
        
        private void OnAddSubscriptionOperationCompleted(object arg) {
            if ((this.AddSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveSubscription", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSubscription(string userGuid, string documentID, string storeID, string userID) {
            this.Invoke("RemoveSubscription", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        userID});
        }
        
        /// <remarks/>
        public void RemoveSubscriptionAsync(string userGuid, string documentID, string storeID, string userID) {
            this.RemoveSubscriptionAsync(userGuid, documentID, storeID, userID, null);
        }
        
        /// <remarks/>
        public void RemoveSubscriptionAsync(string userGuid, string documentID, string storeID, string userID, object userState) {
            if ((this.RemoveSubscriptionOperationCompleted == null)) {
                this.RemoveSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSubscriptionOperationCompleted);
            }
            this.InvokeAsync("RemoveSubscription", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        userID}, this.RemoveSubscriptionOperationCompleted, userState);
        }
        
        private void OnRemoveSubscriptionOperationCompleted(object arg) {
            if ((this.RemoveSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateDocumentFromTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CreateDocumentFromTemplate(string userGuid, string currentCulture, string currentUICulture, bool isDossierFile, string documentID, string urlRiaClient, SDocument template, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocument[] module, out SDocument docInformation) {
            object[] results = this.Invoke("CreateDocumentFromTemplate", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        isDossierFile,
                        documentID,
                        urlRiaClient,
                        template,
                        module});
            docInformation = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateDocumentFromTemplateAsync(string userGuid, string currentCulture, string currentUICulture, bool isDossierFile, string documentID, string urlRiaClient, SDocument template, SDocument[] module) {
            this.CreateDocumentFromTemplateAsync(userGuid, currentCulture, currentUICulture, isDossierFile, documentID, urlRiaClient, template, module, null);
        }
        
        /// <remarks/>
        public void CreateDocumentFromTemplateAsync(string userGuid, string currentCulture, string currentUICulture, bool isDossierFile, string documentID, string urlRiaClient, SDocument template, SDocument[] module, object userState) {
            if ((this.CreateDocumentFromTemplateOperationCompleted == null)) {
                this.CreateDocumentFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDocumentFromTemplateOperationCompleted);
            }
            this.InvokeAsync("CreateDocumentFromTemplate", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        isDossierFile,
                        documentID,
                        urlRiaClient,
                        template,
                        module}, this.CreateDocumentFromTemplateOperationCompleted, userState);
        }
        
        private void OnCreateDocumentFromTemplateOperationCompleted(object arg) {
            if ((this.CreateDocumentFromTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDocumentFromTemplateCompleted(this, new CreateDocumentFromTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetLicensedApplicationIntegrationUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicensedApplicationIntegrationUser(string userGuid) {
            object[] results = this.Invoke("GetLicensedApplicationIntegrationUser", new object[] {
                        userGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicensedApplicationIntegrationUserAsync(string userGuid) {
            this.GetLicensedApplicationIntegrationUserAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetLicensedApplicationIntegrationUserAsync(string userGuid, object userState) {
            if ((this.GetLicensedApplicationIntegrationUserOperationCompleted == null)) {
                this.GetLicensedApplicationIntegrationUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicensedApplicationIntegrationUserOperationCompleted);
            }
            this.InvokeAsync("GetLicensedApplicationIntegrationUser", new object[] {
                        userGuid}, this.GetLicensedApplicationIntegrationUserOperationCompleted, userState);
        }
        
        private void OnGetLicensedApplicationIntegrationUserOperationCompleted(object arg) {
            if ((this.GetLicensedApplicationIntegrationUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicensedApplicationIntegrationUserCompleted(this, new GetLicensedApplicationIntegrationUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetLicensedNamedUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLicensedNamedUser(string userGuid) {
            object[] results = this.Invoke("GetLicensedNamedUser", new object[] {
                        userGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicensedNamedUserAsync(string userGuid) {
            this.GetLicensedNamedUserAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetLicensedNamedUserAsync(string userGuid, object userState) {
            if ((this.GetLicensedNamedUserOperationCompleted == null)) {
                this.GetLicensedNamedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicensedNamedUserOperationCompleted);
            }
            this.InvokeAsync("GetLicensedNamedUser", new object[] {
                        userGuid}, this.GetLicensedNamedUserOperationCompleted, userState);
        }
        
        private void OnGetLicensedNamedUserOperationCompleted(object arg) {
            if ((this.GetLicensedNamedUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicensedNamedUserCompleted(this, new GetLicensedNamedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetTemplateFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemplateFolderPath(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetTemplateFolderPath", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplateFolderPathAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetTemplateFolderPathAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetTemplateFolderPathAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetTemplateFolderPathOperationCompleted == null)) {
                this.GetTemplateFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplateFolderPathOperationCompleted);
            }
            this.InvokeAsync("GetTemplateFolderPath", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetTemplateFolderPathOperationCompleted, userState);
        }
        
        private void OnGetTemplateFolderPathOperationCompleted(object arg) {
            if ((this.GetTemplateFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplateFolderPathCompleted(this, new GetTemplateFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetTemplateFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetTemplateFolderPath(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("SetTemplateFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void SetTemplateFolderPathAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.SetTemplateFolderPathAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void SetTemplateFolderPathAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.SetTemplateFolderPathOperationCompleted == null)) {
                this.SetTemplateFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTemplateFolderPathOperationCompleted);
            }
            this.InvokeAsync("SetTemplateFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.SetTemplateFolderPathOperationCompleted, userState);
        }
        
        private void OnSetTemplateFolderPathOperationCompleted(object arg) {
            if ((this.SetTemplateFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTemplateFolderPathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetModuleFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModuleFolderPath(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetModuleFolderPath", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModuleFolderPathAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetModuleFolderPathAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetModuleFolderPathAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetModuleFolderPathOperationCompleted == null)) {
                this.GetModuleFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModuleFolderPathOperationCompleted);
            }
            this.InvokeAsync("GetModuleFolderPath", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetModuleFolderPathOperationCompleted, userState);
        }
        
        private void OnGetModuleFolderPathOperationCompleted(object arg) {
            if ((this.GetModuleFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModuleFolderPathCompleted(this, new GetModuleFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetModuleFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetModuleFolderPath(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("SetModuleFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void SetModuleFolderPathAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.SetModuleFolderPathAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void SetModuleFolderPathAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.SetModuleFolderPathOperationCompleted == null)) {
                this.SetModuleFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetModuleFolderPathOperationCompleted);
            }
            this.InvokeAsync("SetModuleFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.SetModuleFolderPathOperationCompleted, userState);
        }
        
        private void OnSetModuleFolderPathOperationCompleted(object arg) {
            if ((this.SetModuleFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetModuleFolderPathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetLastSelectedFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastSelectedFolderPath(string userGuid, string schemaLanguage) {
            object[] results = this.Invoke("GetLastSelectedFolderPath", new object[] {
                        userGuid,
                        schemaLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastSelectedFolderPathAsync(string userGuid, string schemaLanguage) {
            this.GetLastSelectedFolderPathAsync(userGuid, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void GetLastSelectedFolderPathAsync(string userGuid, string schemaLanguage, object userState) {
            if ((this.GetLastSelectedFolderPathOperationCompleted == null)) {
                this.GetLastSelectedFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastSelectedFolderPathOperationCompleted);
            }
            this.InvokeAsync("GetLastSelectedFolderPath", new object[] {
                        userGuid,
                        schemaLanguage}, this.GetLastSelectedFolderPathOperationCompleted, userState);
        }
        
        private void OnGetLastSelectedFolderPathOperationCompleted(object arg) {
            if ((this.GetLastSelectedFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastSelectedFolderPathCompleted(this, new GetLastSelectedFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetLastSelectedFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetLastSelectedFolderPath(string userGuid, string folderPath, string schemaLanguage) {
            this.Invoke("SetLastSelectedFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void SetLastSelectedFolderPathAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.SetLastSelectedFolderPathAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void SetLastSelectedFolderPathAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.SetLastSelectedFolderPathOperationCompleted == null)) {
                this.SetLastSelectedFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLastSelectedFolderPathOperationCompleted);
            }
            this.InvokeAsync("SetLastSelectedFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.SetLastSelectedFolderPathOperationCompleted, userState);
        }
        
        private void OnSetLastSelectedFolderPathOperationCompleted(object arg) {
            if ((this.SetLastSelectedFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLastSelectedFolderPathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetClientSettings", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SClientSettings GetClientSettings(string userGuid) {
            object[] results = this.Invoke("GetClientSettings", new object[] {
                        userGuid});
            return ((SClientSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientSettingsAsync(string userGuid) {
            this.GetClientSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetClientSettingsAsync(string userGuid, object userState) {
            if ((this.GetClientSettingsOperationCompleted == null)) {
                this.GetClientSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientSettingsOperationCompleted);
            }
            this.InvokeAsync("GetClientSettings", new object[] {
                        userGuid}, this.GetClientSettingsOperationCompleted, userState);
        }
        
        private void OnGetClientSettingsOperationCompleted(object arg) {
            if ((this.GetClientSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientSettingsCompleted(this, new GetClientSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateProtectionDomain", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProtectionDomain(string userGuid, string protectionDomainName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SRole[] roles, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainName,
                        roles,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProtectionDomainAsync(string userGuid, string protectionDomainName, SRole[] roles, string currentCulture, string currentUICulture) {
            this.CreateProtectionDomainAsync(userGuid, protectionDomainName, roles, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateProtectionDomainAsync(string userGuid, string protectionDomainName, SRole[] roles, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateProtectionDomainOperationCompleted == null)) {
                this.CreateProtectionDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProtectionDomainOperationCompleted);
            }
            this.InvokeAsync("CreateProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainName,
                        roles,
                        currentCulture,
                        currentUICulture}, this.CreateProtectionDomainOperationCompleted, userState);
        }
        
        private void OnCreateProtectionDomainOperationCompleted(object arg) {
            if ((this.CreateProtectionDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProtectionDomainCompleted(this, new CreateProtectionDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditProtectionDomain", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditProtectionDomain(string userGuid, string protectionDomainID, string newProtectionDomainName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SRole[] newRoles, string currentCulture, string currentUICulture) {
            this.Invoke("EditProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainID,
                        newProtectionDomainName,
                        newRoles,
                        currentCulture,
                        currentUICulture});
        }
        
        /// <remarks/>
        public void EditProtectionDomainAsync(string userGuid, string protectionDomainID, string newProtectionDomainName, SRole[] newRoles, string currentCulture, string currentUICulture) {
            this.EditProtectionDomainAsync(userGuid, protectionDomainID, newProtectionDomainName, newRoles, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void EditProtectionDomainAsync(string userGuid, string protectionDomainID, string newProtectionDomainName, SRole[] newRoles, string currentCulture, string currentUICulture, object userState) {
            if ((this.EditProtectionDomainOperationCompleted == null)) {
                this.EditProtectionDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProtectionDomainOperationCompleted);
            }
            this.InvokeAsync("EditProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainID,
                        newProtectionDomainName,
                        newRoles,
                        currentCulture,
                        currentUICulture}, this.EditProtectionDomainOperationCompleted, userState);
        }
        
        private void OnEditProtectionDomainOperationCompleted(object arg) {
            if ((this.EditProtectionDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProtectionDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteProtectionDomain", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProtectionDomain(string userGuid, string protectionDomainID) {
            this.Invoke("DeleteProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainID});
        }
        
        /// <remarks/>
        public void DeleteProtectionDomainAsync(string userGuid, string protectionDomainID) {
            this.DeleteProtectionDomainAsync(userGuid, protectionDomainID, null);
        }
        
        /// <remarks/>
        public void DeleteProtectionDomainAsync(string userGuid, string protectionDomainID, object userState) {
            if ((this.DeleteProtectionDomainOperationCompleted == null)) {
                this.DeleteProtectionDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProtectionDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteProtectionDomain", new object[] {
                        userGuid,
                        protectionDomainID}, this.DeleteProtectionDomainOperationCompleted, userState);
        }
        
        private void OnDeleteProtectionDomainOperationCompleted(object arg) {
            if ((this.DeleteProtectionDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProtectionDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateDocumentReminder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateDocumentReminder(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocument[] documentList, string currentCulture, string currentUICulture, SReminder reminder) {
            object[] results = this.Invoke("CreateDocumentReminder", new object[] {
                        userGuid,
                        documentList,
                        currentCulture,
                        currentUICulture,
                        reminder});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDocumentReminderAsync(string userGuid, SDocument[] documentList, string currentCulture, string currentUICulture, SReminder reminder) {
            this.CreateDocumentReminderAsync(userGuid, documentList, currentCulture, currentUICulture, reminder, null);
        }
        
        /// <remarks/>
        public void CreateDocumentReminderAsync(string userGuid, SDocument[] documentList, string currentCulture, string currentUICulture, SReminder reminder, object userState) {
            if ((this.CreateDocumentReminderOperationCompleted == null)) {
                this.CreateDocumentReminderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDocumentReminderOperationCompleted);
            }
            this.InvokeAsync("CreateDocumentReminder", new object[] {
                        userGuid,
                        documentList,
                        currentCulture,
                        currentUICulture,
                        reminder}, this.CreateDocumentReminderOperationCompleted, userState);
        }
        
        private void OnCreateDocumentReminderOperationCompleted(object arg) {
            if ((this.CreateDocumentReminderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDocumentReminderCompleted(this, new CreateDocumentReminderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetThumbnailList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SThumbnail[] GetThumbnailList(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocument[] documentList, int selectedDocumentIndex, SThumbnail firstThumbnail, SThumbnail lastThumbnail, ref int previousThumbnails, ref int nextThumbnails, out bool hasMorePreviousThumbnails, out bool hasMoreNextThumbnails) {
            object[] results = this.Invoke("GetThumbnailList", new object[] {
                        userGuid,
                        documentList,
                        selectedDocumentIndex,
                        firstThumbnail,
                        lastThumbnail,
                        previousThumbnails,
                        nextThumbnails});
            previousThumbnails = ((int)(results[1]));
            nextThumbnails = ((int)(results[2]));
            hasMorePreviousThumbnails = ((bool)(results[3]));
            hasMoreNextThumbnails = ((bool)(results[4]));
            return ((SThumbnail[])(results[0]));
        }
        
        /// <remarks/>
        public void GetThumbnailListAsync(string userGuid, SDocument[] documentList, int selectedDocumentIndex, SThumbnail firstThumbnail, SThumbnail lastThumbnail, int previousThumbnails, int nextThumbnails) {
            this.GetThumbnailListAsync(userGuid, documentList, selectedDocumentIndex, firstThumbnail, lastThumbnail, previousThumbnails, nextThumbnails, null);
        }
        
        /// <remarks/>
        public void GetThumbnailListAsync(string userGuid, SDocument[] documentList, int selectedDocumentIndex, SThumbnail firstThumbnail, SThumbnail lastThumbnail, int previousThumbnails, int nextThumbnails, object userState) {
            if ((this.GetThumbnailListOperationCompleted == null)) {
                this.GetThumbnailListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThumbnailListOperationCompleted);
            }
            this.InvokeAsync("GetThumbnailList", new object[] {
                        userGuid,
                        documentList,
                        selectedDocumentIndex,
                        firstThumbnail,
                        lastThumbnail,
                        previousThumbnails,
                        nextThumbnails}, this.GetThumbnailListOperationCompleted, userState);
        }
        
        private void OnGetThumbnailListOperationCompleted(object arg) {
            if ((this.GetThumbnailListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThumbnailListCompleted(this, new GetThumbnailListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdateRemindersForDocument", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateRemindersForDocument(string userGuid, string documentID, string currentCulture, string currentUICulture, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SReminder[] reminders) {
            object[] results = this.Invoke("UpdateRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        currentCulture,
                        currentUICulture,
                        reminders});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRemindersForDocumentAsync(string userGuid, string documentID, string currentCulture, string currentUICulture, SReminder[] reminders) {
            this.UpdateRemindersForDocumentAsync(userGuid, documentID, currentCulture, currentUICulture, reminders, null);
        }
        
        /// <remarks/>
        public void UpdateRemindersForDocumentAsync(string userGuid, string documentID, string currentCulture, string currentUICulture, SReminder[] reminders, object userState) {
            if ((this.UpdateRemindersForDocumentOperationCompleted == null)) {
                this.UpdateRemindersForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRemindersForDocumentOperationCompleted);
            }
            this.InvokeAsync("UpdateRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        currentCulture,
                        currentUICulture,
                        reminders}, this.UpdateRemindersForDocumentOperationCompleted, userState);
        }
        
        private void OnUpdateRemindersForDocumentOperationCompleted(object arg) {
            if ((this.UpdateRemindersForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRemindersForDocumentCompleted(this, new UpdateRemindersForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllRemindersForDocument", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SReminder[] GetAllRemindersForDocument(string userGuid, string documentID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        currentCulture,
                        currentUICulture});
            return ((SReminder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRemindersForDocumentAsync(string userGuid, string documentID, string currentCulture, string currentUICulture) {
            this.GetAllRemindersForDocumentAsync(userGuid, documentID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllRemindersForDocumentAsync(string userGuid, string documentID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllRemindersForDocumentOperationCompleted == null)) {
                this.GetAllRemindersForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRemindersForDocumentOperationCompleted);
            }
            this.InvokeAsync("GetAllRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        currentCulture,
                        currentUICulture}, this.GetAllRemindersForDocumentOperationCompleted, userState);
        }
        
        private void OnGetAllRemindersForDocumentOperationCompleted(object arg) {
            if ((this.GetAllRemindersForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRemindersForDocumentCompleted(this, new GetAllRemindersForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteRemindersForDocument", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteRemindersForDocument(string userGuid, string documentID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SReminder[] reminders) {
            object[] results = this.Invoke("DeleteRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        reminders});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRemindersForDocumentAsync(string userGuid, string documentID, SReminder[] reminders) {
            this.DeleteRemindersForDocumentAsync(userGuid, documentID, reminders, null);
        }
        
        /// <remarks/>
        public void DeleteRemindersForDocumentAsync(string userGuid, string documentID, SReminder[] reminders, object userState) {
            if ((this.DeleteRemindersForDocumentOperationCompleted == null)) {
                this.DeleteRemindersForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRemindersForDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteRemindersForDocument", new object[] {
                        userGuid,
                        documentID,
                        reminders}, this.DeleteRemindersForDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteRemindersForDocumentOperationCompleted(object arg) {
            if ((this.DeleteRemindersForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRemindersForDocumentCompleted(this, new DeleteRemindersForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateTemporaryReleasedDossierFiles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateTemporaryReleasedDossierFiles(string userGuid, string[] documentIDs, string dossierGuid, string dossierPictureGuid, string dossierID, string dossierExtension, string startDate, string endDate, string[] userIDs, string[] groupIDs, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateTemporaryReleasedDossierFiles", new object[] {
                        userGuid,
                        documentIDs,
                        dossierGuid,
                        dossierPictureGuid,
                        dossierID,
                        dossierExtension,
                        startDate,
                        endDate,
                        userIDs,
                        groupIDs,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTemporaryReleasedDossierFilesAsync(string userGuid, string[] documentIDs, string dossierGuid, string dossierPictureGuid, string dossierID, string dossierExtension, string startDate, string endDate, string[] userIDs, string[] groupIDs, string currentCulture, string currentUICulture) {
            this.CreateTemporaryReleasedDossierFilesAsync(userGuid, documentIDs, dossierGuid, dossierPictureGuid, dossierID, dossierExtension, startDate, endDate, userIDs, groupIDs, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateTemporaryReleasedDossierFilesAsync(string userGuid, string[] documentIDs, string dossierGuid, string dossierPictureGuid, string dossierID, string dossierExtension, string startDate, string endDate, string[] userIDs, string[] groupIDs, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateTemporaryReleasedDossierFilesOperationCompleted == null)) {
                this.CreateTemporaryReleasedDossierFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTemporaryReleasedDossierFilesOperationCompleted);
            }
            this.InvokeAsync("CreateTemporaryReleasedDossierFiles", new object[] {
                        userGuid,
                        documentIDs,
                        dossierGuid,
                        dossierPictureGuid,
                        dossierID,
                        dossierExtension,
                        startDate,
                        endDate,
                        userIDs,
                        groupIDs,
                        currentCulture,
                        currentUICulture}, this.CreateTemporaryReleasedDossierFilesOperationCompleted, userState);
        }
        
        private void OnCreateTemporaryReleasedDossierFilesOperationCompleted(object arg) {
            if ((this.CreateTemporaryReleasedDossierFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTemporaryReleasedDossierFilesCompleted(this, new CreateTemporaryReleasedDossierFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetReleaseHandlersForDossier", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SReleaseHandler[] GetReleaseHandlersForDossier(string userGuid, string dossierID, string dossierExtension, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetReleaseHandlersForDossier", new object[] {
                        userGuid,
                        dossierID,
                        dossierExtension,
                        currentCulture,
                        currentUICulture});
            return ((SReleaseHandler[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReleaseHandlersForDossierAsync(string userGuid, string dossierID, string dossierExtension, string currentCulture, string currentUICulture) {
            this.GetReleaseHandlersForDossierAsync(userGuid, dossierID, dossierExtension, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetReleaseHandlersForDossierAsync(string userGuid, string dossierID, string dossierExtension, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetReleaseHandlersForDossierOperationCompleted == null)) {
                this.GetReleaseHandlersForDossierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleaseHandlersForDossierOperationCompleted);
            }
            this.InvokeAsync("GetReleaseHandlersForDossier", new object[] {
                        userGuid,
                        dossierID,
                        dossierExtension,
                        currentCulture,
                        currentUICulture}, this.GetReleaseHandlersForDossierOperationCompleted, userState);
        }
        
        private void OnGetReleaseHandlersForDossierOperationCompleted(object arg) {
            if ((this.GetReleaseHandlersForDossierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleaseHandlersForDossierCompleted(this, new GetReleaseHandlersForDossierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteReleaseHandlers", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteReleaseHandlers(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SReleaseHandler[] releaseHandlers, bool IsDossier) {
            object[] results = this.Invoke("DeleteReleaseHandlers", new object[] {
                        userGuid,
                        releaseHandlers,
                        IsDossier});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteReleaseHandlersAsync(string userGuid, SReleaseHandler[] releaseHandlers, bool IsDossier) {
            this.DeleteReleaseHandlersAsync(userGuid, releaseHandlers, IsDossier, null);
        }
        
        /// <remarks/>
        public void DeleteReleaseHandlersAsync(string userGuid, SReleaseHandler[] releaseHandlers, bool IsDossier, object userState) {
            if ((this.DeleteReleaseHandlersOperationCompleted == null)) {
                this.DeleteReleaseHandlersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReleaseHandlersOperationCompleted);
            }
            this.InvokeAsync("DeleteReleaseHandlers", new object[] {
                        userGuid,
                        releaseHandlers,
                        IsDossier}, this.DeleteReleaseHandlersOperationCompleted, userState);
        }
        
        private void OnDeleteReleaseHandlersOperationCompleted(object arg) {
            if ((this.DeleteReleaseHandlersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReleaseHandlersCompleted(this, new DeleteReleaseHandlersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdateReleaseHandlers", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateReleaseHandlers(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SReleaseHandler[] releaseHandlers, bool IsDossier) {
            object[] results = this.Invoke("UpdateReleaseHandlers", new object[] {
                        userGuid,
                        releaseHandlers,
                        IsDossier});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateReleaseHandlersAsync(string userGuid, SReleaseHandler[] releaseHandlers, bool IsDossier) {
            this.UpdateReleaseHandlersAsync(userGuid, releaseHandlers, IsDossier, null);
        }
        
        /// <remarks/>
        public void UpdateReleaseHandlersAsync(string userGuid, SReleaseHandler[] releaseHandlers, bool IsDossier, object userState) {
            if ((this.UpdateReleaseHandlersOperationCompleted == null)) {
                this.UpdateReleaseHandlersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReleaseHandlersOperationCompleted);
            }
            this.InvokeAsync("UpdateReleaseHandlers", new object[] {
                        userGuid,
                        releaseHandlers,
                        IsDossier}, this.UpdateReleaseHandlersOperationCompleted, userState);
        }
        
        private void OnUpdateReleaseHandlersOperationCompleted(object arg) {
            if ((this.UpdateReleaseHandlersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReleaseHandlersCompleted(this, new UpdateReleaseHandlersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/TestURL", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TestURL(string url, string currentCulture, string currentUICulture) {
            this.Invoke("TestURL", new object[] {
                        url,
                        currentCulture,
                        currentUICulture});
        }
        
        /// <remarks/>
        public void TestURLAsync(string url, string currentCulture, string currentUICulture) {
            this.TestURLAsync(url, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void TestURLAsync(string url, string currentCulture, string currentUICulture, object userState) {
            if ((this.TestURLOperationCompleted == null)) {
                this.TestURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestURLOperationCompleted);
            }
            this.InvokeAsync("TestURL", new object[] {
                        url,
                        currentCulture,
                        currentUICulture}, this.TestURLOperationCompleted, userState);
        }
        
        private void OnTestURLOperationCompleted(object arg) {
            if ((this.TestURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateProcessTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProcessTemplate(string userGuid, SProcessTemplateExt newProcessTemplate, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateProcessTemplate", new object[] {
                        userGuid,
                        newProcessTemplate,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProcessTemplateAsync(string userGuid, SProcessTemplateExt newProcessTemplate, string currentCulture, string currentUICulture) {
            this.CreateProcessTemplateAsync(userGuid, newProcessTemplate, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateProcessTemplateAsync(string userGuid, SProcessTemplateExt newProcessTemplate, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateProcessTemplateOperationCompleted == null)) {
                this.CreateProcessTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProcessTemplateOperationCompleted);
            }
            this.InvokeAsync("CreateProcessTemplate", new object[] {
                        userGuid,
                        newProcessTemplate,
                        currentCulture,
                        currentUICulture}, this.CreateProcessTemplateOperationCompleted, userState);
        }
        
        private void OnCreateProcessTemplateOperationCompleted(object arg) {
            if ((this.CreateProcessTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProcessTemplateCompleted(this, new CreateProcessTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditProcessTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditProcessTemplate(string userGuid, SProcessTemplateExt processTemplate, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("EditProcessTemplate", new object[] {
                        userGuid,
                        processTemplate,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditProcessTemplateAsync(string userGuid, SProcessTemplateExt processTemplate, string currentCulture, string currentUICulture) {
            this.EditProcessTemplateAsync(userGuid, processTemplate, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void EditProcessTemplateAsync(string userGuid, SProcessTemplateExt processTemplate, string currentCulture, string currentUICulture, object userState) {
            if ((this.EditProcessTemplateOperationCompleted == null)) {
                this.EditProcessTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProcessTemplateOperationCompleted);
            }
            this.InvokeAsync("EditProcessTemplate", new object[] {
                        userGuid,
                        processTemplate,
                        currentCulture,
                        currentUICulture}, this.EditProcessTemplateOperationCompleted, userState);
        }
        
        private void OnEditProcessTemplateOperationCompleted(object arg) {
            if ((this.EditProcessTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProcessTemplateCompleted(this, new EditProcessTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteProcessTemplates", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProcessTemplates(string userGuid, string[] processTemplateIDs) {
            this.Invoke("DeleteProcessTemplates", new object[] {
                        userGuid,
                        processTemplateIDs});
        }
        
        /// <remarks/>
        public void DeleteProcessTemplatesAsync(string userGuid, string[] processTemplateIDs) {
            this.DeleteProcessTemplatesAsync(userGuid, processTemplateIDs, null);
        }
        
        /// <remarks/>
        public void DeleteProcessTemplatesAsync(string userGuid, string[] processTemplateIDs, object userState) {
            if ((this.DeleteProcessTemplatesOperationCompleted == null)) {
                this.DeleteProcessTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProcessTemplatesOperationCompleted);
            }
            this.InvokeAsync("DeleteProcessTemplates", new object[] {
                        userGuid,
                        processTemplateIDs}, this.DeleteProcessTemplatesOperationCompleted, userState);
        }
        
        private void OnDeleteProcessTemplatesOperationCompleted(object arg) {
            if ((this.DeleteProcessTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProcessTemplatesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/TestLicenceFeature", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestLicenceFeature(string userGuid, string licenseFeatureName) {
            object[] results = this.Invoke("TestLicenceFeature", new object[] {
                        userGuid,
                        licenseFeatureName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestLicenceFeatureAsync(string userGuid, string licenseFeatureName) {
            this.TestLicenceFeatureAsync(userGuid, licenseFeatureName, null);
        }
        
        /// <remarks/>
        public void TestLicenceFeatureAsync(string userGuid, string licenseFeatureName, object userState) {
            if ((this.TestLicenceFeatureOperationCompleted == null)) {
                this.TestLicenceFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestLicenceFeatureOperationCompleted);
            }
            this.InvokeAsync("TestLicenceFeature", new object[] {
                        userGuid,
                        licenseFeatureName}, this.TestLicenceFeatureOperationCompleted, userState);
        }
        
        private void OnTestLicenceFeatureOperationCompleted(object arg) {
            if ((this.TestLicenceFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestLicenceFeatureCompleted(this, new TestLicenceFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentsZipped", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentsZipped(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, string zipFilePassword, out SDocument docInformation) {
            object[] results = this.Invoke("GetDocumentsZipped", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        documentIDs,
                        includeAnnotations,
                        includeSignatures,
                        zipFilePassword});
            docInformation = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsZippedAsync(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, string zipFilePassword) {
            this.GetDocumentsZippedAsync(userGuid, culture, uiCulture, documentIDs, includeAnnotations, includeSignatures, zipFilePassword, null);
        }
        
        /// <remarks/>
        public void GetDocumentsZippedAsync(string userGuid, string culture, string uiCulture, string[] documentIDs, bool includeAnnotations, bool includeSignatures, string zipFilePassword, object userState) {
            if ((this.GetDocumentsZippedOperationCompleted == null)) {
                this.GetDocumentsZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsZippedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsZipped", new object[] {
                        userGuid,
                        culture,
                        uiCulture,
                        documentIDs,
                        includeAnnotations,
                        includeSignatures,
                        zipFilePassword}, this.GetDocumentsZippedOperationCompleted, userState);
        }
        
        private void OnGetDocumentsZippedOperationCompleted(object arg) {
            if ((this.GetDocumentsZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsZippedCompleted(this, new GetDocumentsZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveLatestVersion", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveLatestVersion(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("RemoveLatestVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveLatestVersionAsync(string userGuid, string documentID, string storeID) {
            this.RemoveLatestVersionAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void RemoveLatestVersionAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.RemoveLatestVersionOperationCompleted == null)) {
                this.RemoveLatestVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveLatestVersionOperationCompleted);
            }
            this.InvokeAsync("RemoveLatestVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.RemoveLatestVersionOperationCompleted, userState);
        }
        
        private void OnRemoveLatestVersionOperationCompleted(object arg) {
            if ((this.RemoveLatestVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveLatestVersionCompleted(this, new RemoveLatestVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Rename", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Rename(string userGuid, string documentID, string storeID, string newName) {
            object[] results = this.Invoke("Rename", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        newName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RenameAsync(string userGuid, string documentID, string storeID, string newName) {
            this.RenameAsync(userGuid, documentID, storeID, newName, null);
        }
        
        /// <remarks/>
        public void RenameAsync(string userGuid, string documentID, string storeID, string newName, object userState) {
            if ((this.RenameOperationCompleted == null)) {
                this.RenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameOperationCompleted);
            }
            this.InvokeAsync("Rename", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        newName}, this.RenameOperationCompleted, userState);
        }
        
        private void OnRenameOperationCompleted(object arg) {
            if ((this.RenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCompleted(this, new RenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Print", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Print(string userGuid, string documentID, string storeID, string printerName, string pageRangeOrSelection, short numberOfCopies, bool collate, bool scaleToFitInFullPage, bool printAlignmentCenter, bool printLandscape) {
            object[] results = this.Invoke("Print", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        printerName,
                        pageRangeOrSelection,
                        numberOfCopies,
                        collate,
                        scaleToFitInFullPage,
                        printAlignmentCenter,
                        printLandscape});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrintAsync(string userGuid, string documentID, string storeID, string printerName, string pageRangeOrSelection, short numberOfCopies, bool collate, bool scaleToFitInFullPage, bool printAlignmentCenter, bool printLandscape) {
            this.PrintAsync(userGuid, documentID, storeID, printerName, pageRangeOrSelection, numberOfCopies, collate, scaleToFitInFullPage, printAlignmentCenter, printLandscape, null);
        }
        
        /// <remarks/>
        public void PrintAsync(string userGuid, string documentID, string storeID, string printerName, string pageRangeOrSelection, short numberOfCopies, bool collate, bool scaleToFitInFullPage, bool printAlignmentCenter, bool printLandscape, object userState) {
            if ((this.PrintOperationCompleted == null)) {
                this.PrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintOperationCompleted);
            }
            this.InvokeAsync("Print", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        printerName,
                        pageRangeOrSelection,
                        numberOfCopies,
                        collate,
                        scaleToFitInFullPage,
                        printAlignmentCenter,
                        printLandscape}, this.PrintOperationCompleted, userState);
        }
        
        private void OnPrintOperationCompleted(object arg) {
            if ((this.PrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintCompleted(this, new PrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPrinterList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPrinterList(string userGuid) {
            object[] results = this.Invoke("GetPrinterList", new object[] {
                        userGuid});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPrinterListAsync(string userGuid) {
            this.GetPrinterListAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetPrinterListAsync(string userGuid, object userState) {
            if ((this.GetPrinterListOperationCompleted == null)) {
                this.GetPrinterListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrinterListOperationCompleted);
            }
            this.InvokeAsync("GetPrinterList", new object[] {
                        userGuid}, this.GetPrinterListOperationCompleted, userState);
        }
        
        private void OnGetPrinterListOperationCompleted(object arg) {
            if ((this.GetPrinterListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrinterListCompleted(this, new GetPrinterListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveVersion", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveVersion(string userGuid, string documentID, string storeID, string versionID) {
            object[] results = this.Invoke("RemoveVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveVersionAsync(string userGuid, string documentID, string storeID, string versionID) {
            this.RemoveVersionAsync(userGuid, documentID, storeID, versionID, null);
        }
        
        /// <remarks/>
        public void RemoveVersionAsync(string userGuid, string documentID, string storeID, string versionID, object userState) {
            if ((this.RemoveVersionOperationCompleted == null)) {
                this.RemoveVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveVersionOperationCompleted);
            }
            this.InvokeAsync("RemoveVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID}, this.RemoveVersionOperationCompleted, userState);
        }
        
        private void OnRemoveVersionOperationCompleted(object arg) {
            if ((this.RemoveVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveVersionCompleted(this, new RemoveVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetCommonDefinitions", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPair[] GetCommonDefinitions(string userGuid, string[] definitions) {
            object[] results = this.Invoke("GetCommonDefinitions", new object[] {
                        userGuid,
                        definitions});
            return ((SPair[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCommonDefinitionsAsync(string userGuid, string[] definitions) {
            this.GetCommonDefinitionsAsync(userGuid, definitions, null);
        }
        
        /// <remarks/>
        public void GetCommonDefinitionsAsync(string userGuid, string[] definitions, object userState) {
            if ((this.GetCommonDefinitionsOperationCompleted == null)) {
                this.GetCommonDefinitionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommonDefinitionsOperationCompleted);
            }
            this.InvokeAsync("GetCommonDefinitions", new object[] {
                        userGuid,
                        definitions}, this.GetCommonDefinitionsOperationCompleted, userState);
        }
        
        private void OnGetCommonDefinitionsOperationCompleted(object arg) {
            if ((this.GetCommonDefinitionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommonDefinitionsCompleted(this, new GetCommonDefinitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ChangeMobileNumber", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeMobileNumber(string userGuid, string mobileNumber) {
            this.Invoke("ChangeMobileNumber", new object[] {
                        userGuid,
                        mobileNumber});
        }
        
        /// <remarks/>
        public void ChangeMobileNumberAsync(string userGuid, string mobileNumber) {
            this.ChangeMobileNumberAsync(userGuid, mobileNumber, null);
        }
        
        /// <remarks/>
        public void ChangeMobileNumberAsync(string userGuid, string mobileNumber, object userState) {
            if ((this.ChangeMobileNumberOperationCompleted == null)) {
                this.ChangeMobileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeMobileNumberOperationCompleted);
            }
            this.InvokeAsync("ChangeMobileNumber", new object[] {
                        userGuid,
                        mobileNumber}, this.ChangeMobileNumberOperationCompleted, userState);
        }
        
        private void OnChangeMobileNumberOperationCompleted(object arg) {
            if ((this.ChangeMobileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeMobileNumberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ChangePassword", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePassword(string userGuid, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        userGuid,
                        oldPassword,
                        newPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string userGuid, string oldPassword, string newPassword) {
            this.ChangePasswordAsync(userGuid, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string userGuid, string oldPassword, string newPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        userGuid,
                        oldPassword,
                        newPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ChangePasswordForUserID", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePasswordForUserID(string userGuid, string userID, string newPassword, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("ChangePasswordForUserID", new object[] {
                        userGuid,
                        userID,
                        newPassword,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordForUserIDAsync(string userGuid, string userID, string newPassword, string currentCulture, string currentUICulture) {
            this.ChangePasswordForUserIDAsync(userGuid, userID, newPassword, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void ChangePasswordForUserIDAsync(string userGuid, string userID, string newPassword, string currentCulture, string currentUICulture, object userState) {
            if ((this.ChangePasswordForUserIDOperationCompleted == null)) {
                this.ChangePasswordForUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordForUserIDOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordForUserID", new object[] {
                        userGuid,
                        userID,
                        newPassword,
                        currentCulture,
                        currentUICulture}, this.ChangePasswordForUserIDOperationCompleted, userState);
        }
        
        private void OnChangePasswordForUserIDOperationCompleted(object arg) {
            if ((this.ChangePasswordForUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordForUserIDCompleted(this, new ChangePasswordForUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllSearchFolderData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSearchFolderData[] GetAllSearchFolderData(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllSearchFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture});
            return ((SSearchFolderData[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSearchFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            this.GetAllSearchFolderDataAsync(userGuid, folderPath, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllSearchFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllSearchFolderDataOperationCompleted == null)) {
                this.GetAllSearchFolderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSearchFolderDataOperationCompleted);
            }
            this.InvokeAsync("GetAllSearchFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture}, this.GetAllSearchFolderDataOperationCompleted, userState);
        }
        
        private void OnGetAllSearchFolderDataOperationCompleted(object arg) {
            if ((this.GetAllSearchFolderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSearchFolderDataCompleted(this, new GetAllSearchFolderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllFolderInfo", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] GetAllFolderInfo(string userGuid, string folderPath, string currentCulture, string currentUICulture, bool includeSearchFolders, bool includePrivateFolders) {
            object[] results = this.Invoke("GetAllFolderInfo", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture,
                        includeSearchFolders,
                        includePrivateFolders});
            return ((SFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllFolderInfoAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, bool includeSearchFolders, bool includePrivateFolders) {
            this.GetAllFolderInfoAsync(userGuid, folderPath, currentCulture, currentUICulture, includeSearchFolders, includePrivateFolders, null);
        }
        
        /// <remarks/>
        public void GetAllFolderInfoAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, bool includeSearchFolders, bool includePrivateFolders, object userState) {
            if ((this.GetAllFolderInfoOperationCompleted == null)) {
                this.GetAllFolderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllFolderInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllFolderInfo", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture,
                        includeSearchFolders,
                        includePrivateFolders}, this.GetAllFolderInfoOperationCompleted, userState);
        }
        
        private void OnGetAllFolderInfoOperationCompleted(object arg) {
            if ((this.GetAllFolderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllFolderInfoCompleted(this, new GetAllFolderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveDocumentsFromFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveDocumentsFromFolder(string userGuid, string currentUICulture, string[] documentIDs, string folderPath) {
            this.Invoke("RemoveDocumentsFromFolder", new object[] {
                        userGuid,
                        currentUICulture,
                        documentIDs,
                        folderPath});
        }
        
        /// <remarks/>
        public void RemoveDocumentsFromFolderAsync(string userGuid, string currentUICulture, string[] documentIDs, string folderPath) {
            this.RemoveDocumentsFromFolderAsync(userGuid, currentUICulture, documentIDs, folderPath, null);
        }
        
        /// <remarks/>
        public void RemoveDocumentsFromFolderAsync(string userGuid, string currentUICulture, string[] documentIDs, string folderPath, object userState) {
            if ((this.RemoveDocumentsFromFolderOperationCompleted == null)) {
                this.RemoveDocumentsFromFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDocumentsFromFolderOperationCompleted);
            }
            this.InvokeAsync("RemoveDocumentsFromFolder", new object[] {
                        userGuid,
                        currentUICulture,
                        documentIDs,
                        folderPath}, this.RemoveDocumentsFromFolderOperationCompleted, userState);
        }
        
        private void OnRemoveDocumentsFromFolderOperationCompleted(object arg) {
            if ((this.RemoveDocumentsFromFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDocumentsFromFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllSearchFolderInfoFromFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] GetAllSearchFolderInfoFromFolder(string userGuid, string folderPath, string schemaLanguage, bool simpleSearchOnly) {
            object[] results = this.Invoke("GetAllSearchFolderInfoFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage,
                        simpleSearchOnly});
            return ((SFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSearchFolderInfoFromFolderAsync(string userGuid, string folderPath, string schemaLanguage, bool simpleSearchOnly) {
            this.GetAllSearchFolderInfoFromFolderAsync(userGuid, folderPath, schemaLanguage, simpleSearchOnly, null);
        }
        
        /// <remarks/>
        public void GetAllSearchFolderInfoFromFolderAsync(string userGuid, string folderPath, string schemaLanguage, bool simpleSearchOnly, object userState) {
            if ((this.GetAllSearchFolderInfoFromFolderOperationCompleted == null)) {
                this.GetAllSearchFolderInfoFromFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSearchFolderInfoFromFolderOperationCompleted);
            }
            this.InvokeAsync("GetAllSearchFolderInfoFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage,
                        simpleSearchOnly}, this.GetAllSearchFolderInfoFromFolderOperationCompleted, userState);
        }
        
        private void OnGetAllSearchFolderInfoFromFolderOperationCompleted(object arg) {
            if ((this.GetAllSearchFolderInfoFromFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSearchFolderInfoFromFolderCompleted(this, new GetAllSearchFolderInfoFromFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllFolderInfoFromFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] GetAllFolderInfoFromFolder(string userGuid, string folderPath, string schemaLanguage, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly) {
            object[] results = this.Invoke("GetAllFolderInfoFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage,
                        includeSearchFolder,
                        includeFolder,
                        includePrivate,
                        simpleSearchOnly});
            return ((SFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllFolderInfoFromFolderAsync(string userGuid, string folderPath, string schemaLanguage, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly) {
            this.GetAllFolderInfoFromFolderAsync(userGuid, folderPath, schemaLanguage, includeSearchFolder, includeFolder, includePrivate, simpleSearchOnly, null);
        }
        
        /// <remarks/>
        public void GetAllFolderInfoFromFolderAsync(string userGuid, string folderPath, string schemaLanguage, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly, object userState) {
            if ((this.GetAllFolderInfoFromFolderOperationCompleted == null)) {
                this.GetAllFolderInfoFromFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllFolderInfoFromFolderOperationCompleted);
            }
            this.InvokeAsync("GetAllFolderInfoFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage,
                        includeSearchFolder,
                        includeFolder,
                        includePrivate,
                        simpleSearchOnly}, this.GetAllFolderInfoFromFolderOperationCompleted, userState);
        }
        
        private void OnGetAllFolderInfoFromFolderOperationCompleted(object arg) {
            if ((this.GetAllFolderInfoFromFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllFolderInfoFromFolderCompleted(this, new GetAllFolderInfoFromFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllFolderInfoAlongFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderInfo GetAllFolderInfoAlongFolderPath(string userGuid, string folderPath, string schemaLanguage) {
            object[] results = this.Invoke("GetAllFolderInfoAlongFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
            return ((SFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllFolderInfoAlongFolderPathAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.GetAllFolderInfoAlongFolderPathAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void GetAllFolderInfoAlongFolderPathAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.GetAllFolderInfoAlongFolderPathOperationCompleted == null)) {
                this.GetAllFolderInfoAlongFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllFolderInfoAlongFolderPathOperationCompleted);
            }
            this.InvokeAsync("GetAllFolderInfoAlongFolderPath", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.GetAllFolderInfoAlongFolderPathOperationCompleted, userState);
        }
        
        private void OnGetAllFolderInfoAlongFolderPathOperationCompleted(object arg) {
            if ((this.GetAllFolderInfoAlongFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllFolderInfoAlongFolderPathCompleted(this, new GetAllFolderInfoAlongFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/FindNextFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FindNextFolder(string userGuid, string startFolderPath, string schemaLanguage, string searchString, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly) {
            object[] results = this.Invoke("FindNextFolder", new object[] {
                        userGuid,
                        startFolderPath,
                        schemaLanguage,
                        searchString,
                        includeSearchFolder,
                        includeFolder,
                        includePrivate,
                        simpleSearchOnly});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FindNextFolderAsync(string userGuid, string startFolderPath, string schemaLanguage, string searchString, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly) {
            this.FindNextFolderAsync(userGuid, startFolderPath, schemaLanguage, searchString, includeSearchFolder, includeFolder, includePrivate, simpleSearchOnly, null);
        }
        
        /// <remarks/>
        public void FindNextFolderAsync(string userGuid, string startFolderPath, string schemaLanguage, string searchString, bool includeSearchFolder, bool includeFolder, bool includePrivate, bool simpleSearchOnly, object userState) {
            if ((this.FindNextFolderOperationCompleted == null)) {
                this.FindNextFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindNextFolderOperationCompleted);
            }
            this.InvokeAsync("FindNextFolder", new object[] {
                        userGuid,
                        startFolderPath,
                        schemaLanguage,
                        searchString,
                        includeSearchFolder,
                        includeFolder,
                        includePrivate,
                        simpleSearchOnly}, this.FindNextFolderOperationCompleted, userState);
        }
        
        private void OnFindNextFolderOperationCompleted(object arg) {
            if ((this.FindNextFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindNextFolderCompleted(this, new FindNextFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllSearchFolderDataFromFolder", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSearchFolderData[] GetAllSearchFolderDataFromFolder(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllSearchFolderDataFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture});
            return ((SSearchFolderData[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSearchFolderDataFromFolderAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            this.GetAllSearchFolderDataFromFolderAsync(userGuid, folderPath, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllSearchFolderDataFromFolderAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllSearchFolderDataFromFolderOperationCompleted == null)) {
                this.GetAllSearchFolderDataFromFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSearchFolderDataFromFolderOperationCompleted);
            }
            this.InvokeAsync("GetAllSearchFolderDataFromFolder", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture}, this.GetAllSearchFolderDataFromFolderOperationCompleted, userState);
        }
        
        private void OnGetAllSearchFolderDataFromFolderOperationCompleted(object arg) {
            if ((this.GetAllSearchFolderDataFromFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSearchFolderDataFromFolderCompleted(this, new GetAllSearchFolderDataFromFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSearchFolderData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSearchFolderData GetSearchFolderData(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetSearchFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture});
            return ((SSearchFolderData)(results[0]));
        }
        
        /// <remarks/>
        public void GetSearchFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            this.GetSearchFolderDataAsync(userGuid, folderPath, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetSearchFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetSearchFolderDataOperationCompleted == null)) {
                this.GetSearchFolderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSearchFolderDataOperationCompleted);
            }
            this.InvokeAsync("GetSearchFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture}, this.GetSearchFolderDataOperationCompleted, userState);
        }
        
        private void OnGetSearchFolderDataOperationCompleted(object arg) {
            if ((this.GetSearchFolderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSearchFolderDataCompleted(this, new GetSearchFolderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDefaultSearchFolderData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSearchFolderData GetDefaultSearchFolderData(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetDefaultSearchFolderData", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SSearchFolderData)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultSearchFolderDataAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetDefaultSearchFolderDataAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetDefaultSearchFolderDataAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetDefaultSearchFolderDataOperationCompleted == null)) {
                this.GetDefaultSearchFolderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultSearchFolderDataOperationCompleted);
            }
            this.InvokeAsync("GetDefaultSearchFolderData", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetDefaultSearchFolderDataOperationCompleted, userState);
        }
        
        private void OnGetDefaultSearchFolderDataOperationCompleted(object arg) {
            if ((this.GetDefaultSearchFolderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultSearchFolderDataCompleted(this, new GetDefaultSearchFolderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllInfoStores", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SInfoStore[] GetAllInfoStores(string userGuid, string currentCulture, string currentUICulture, bool forImport) {
            object[] results = this.Invoke("GetAllInfoStores", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        forImport});
            return ((SInfoStore[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllInfoStoresAsync(string userGuid, string currentCulture, string currentUICulture, bool forImport) {
            this.GetAllInfoStoresAsync(userGuid, currentCulture, currentUICulture, forImport, null);
        }
        
        /// <remarks/>
        public void GetAllInfoStoresAsync(string userGuid, string currentCulture, string currentUICulture, bool forImport, object userState) {
            if ((this.GetAllInfoStoresOperationCompleted == null)) {
                this.GetAllInfoStoresOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllInfoStoresOperationCompleted);
            }
            this.InvokeAsync("GetAllInfoStores", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        forImport}, this.GetAllInfoStoresOperationCompleted, userState);
        }
        
        private void OnGetAllInfoStoresOperationCompleted(object arg) {
            if ((this.GetAllInfoStoresCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllInfoStoresCompleted(this, new GetAllInfoStoresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetProcessStore", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SInfoStore GetProcessStore(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetProcessStore", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SInfoStore)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessStoreAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetProcessStoreAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetProcessStoreAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetProcessStoreOperationCompleted == null)) {
                this.GetProcessStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessStoreOperationCompleted);
            }
            this.InvokeAsync("GetProcessStore", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetProcessStoreOperationCompleted, userState);
        }
        
        private void OnGetProcessStoreOperationCompleted(object arg) {
            if ((this.GetProcessStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessStoreCompleted(this, new GetProcessStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSignatureFile", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSignatureFile(string userGuid, string documentID, string storeID, out string sigFilePath) {
            object[] results = this.Invoke("GetSignatureFile", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            sigFilePath = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSignatureFileAsync(string userGuid, string documentID, string storeID) {
            this.GetSignatureFileAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetSignatureFileAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetSignatureFileOperationCompleted == null)) {
                this.GetSignatureFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignatureFileOperationCompleted);
            }
            this.InvokeAsync("GetSignatureFile", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetSignatureFileOperationCompleted, userState);
        }
        
        private void OnGetSignatureFileOperationCompleted(object arg) {
            if ((this.GetSignatureFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignatureFileCompleted(this, new GetSignatureFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/HasSignatureReport", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasSignatureReport(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("HasSignatureReport", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasSignatureReportAsync(string userGuid, string documentID, string storeID) {
            this.HasSignatureReportAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void HasSignatureReportAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.HasSignatureReportOperationCompleted == null)) {
                this.HasSignatureReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasSignatureReportOperationCompleted);
            }
            this.InvokeAsync("HasSignatureReport", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.HasSignatureReportOperationCompleted, userState);
        }
        
        private void OnHasSignatureReportOperationCompleted(object arg) {
            if ((this.HasSignatureReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasSignatureReportCompleted(this, new HasSignatureReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSignatureReport", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSignatureReport(string userGuid, string documentID, string storeID, out string sigReportFilePath) {
            object[] results = this.Invoke("GetSignatureReport", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            sigReportFilePath = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSignatureReportAsync(string userGuid, string documentID, string storeID) {
            this.GetSignatureReportAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetSignatureReportAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetSignatureReportOperationCompleted == null)) {
                this.GetSignatureReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignatureReportOperationCompleted);
            }
            this.InvokeAsync("GetSignatureReport", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetSignatureReportOperationCompleted, userState);
        }
        
        private void OnGetSignatureReportOperationCompleted(object arg) {
            if ((this.GetSignatureReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignatureReportCompleted(this, new GetSignatureReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSignatures", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSignatures(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID) {
            object[] results = this.Invoke("GetSignatures", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        versionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSignaturesAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID) {
            this.GetSignaturesAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, versionID, null);
        }
        
        /// <remarks/>
        public void GetSignaturesAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID, object userState) {
            if ((this.GetSignaturesOperationCompleted == null)) {
                this.GetSignaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignaturesOperationCompleted);
            }
            this.InvokeAsync("GetSignatures", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        versionID}, this.GetSignaturesOperationCompleted, userState);
        }
        
        private void OnGetSignaturesOperationCompleted(object arg) {
            if ((this.GetSignaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignaturesCompleted(this, new GetSignaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileJSON", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SDocumentResult GetDocumentFileJSON(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType) {
            object[] results = this.Invoke("GetDocumentFileJSON", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        annotations,
                        accessType});
            return ((SDocumentResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileJSONAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType) {
            this.GetDocumentFileJSONAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, annotations, accessType, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileJSONAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType, object userState) {
            if ((this.GetDocumentFileJSONOperationCompleted == null)) {
                this.GetDocumentFileJSONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileJSONOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileJSON", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        annotations,
                        accessType}, this.GetDocumentFileJSONOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileJSONOperationCompleted(object arg) {
            if ((this.GetDocumentFileJSONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileJSONCompleted(this, new GetDocumentFileJSONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFile", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentFile(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType, out SDocument docInformation) {
            object[] results = this.Invoke("GetDocumentFile", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        annotations,
                        accessType});
            docInformation = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType) {
            this.GetDocumentFileAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, annotations, accessType, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SAnnotationSpecifier annotations, AccessTypesEnum accessType, object userState) {
            if ((this.GetDocumentFileOperationCompleted == null)) {
                this.GetDocumentFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFile", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        annotations,
                        accessType}, this.GetDocumentFileOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileOperationCompleted(object arg) {
            if ((this.GetDocumentFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileCompleted(this, new GetDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileEncoded", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentFileEncoded(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string encodingName, AccessTypesEnum accessType, out SDocument docInformation) {
            object[] results = this.Invoke("GetDocumentFileEncoded", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        encodingName,
                        accessType});
            docInformation = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileEncodedAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string encodingName, AccessTypesEnum accessType) {
            this.GetDocumentFileEncodedAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, encodingName, accessType, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileEncodedAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string encodingName, AccessTypesEnum accessType, object userState) {
            if ((this.GetDocumentFileEncodedOperationCompleted == null)) {
                this.GetDocumentFileEncodedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileEncodedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileEncoded", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        encodingName,
                        accessType}, this.GetDocumentFileEncodedOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileEncodedOperationCompleted(object arg) {
            if ((this.GetDocumentFileEncodedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileEncodedCompleted(this, new GetDocumentFileEncodedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileConverted", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentFileConverted(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations, int pageNumber, out SDocument docInformation) {
            object[] results = this.Invoke("GetDocumentFileConverted", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        profileName,
                        includeAnnotations,
                        pageNumber});
            docInformation = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileConvertedAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations, int pageNumber) {
            this.GetDocumentFileConvertedAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, profileName, includeAnnotations, pageNumber, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileConvertedAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations, int pageNumber, object userState) {
            if ((this.GetDocumentFileConvertedOperationCompleted == null)) {
                this.GetDocumentFileConvertedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileConvertedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileConverted", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        profileName,
                        includeAnnotations,
                        pageNumber}, this.GetDocumentFileConvertedOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileConvertedOperationCompleted(object arg) {
            if ((this.GetDocumentFileConvertedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileConvertedCompleted(this, new GetDocumentFileConvertedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/ConvertFile", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ConvertFile(string userGuid, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileAsBytes, string profileName, int pageNumber, out int pageCount) {
            object[] results = this.Invoke("ConvertFile", new object[] {
                        userGuid,
                        fileName,
                        fileAsBytes,
                        profileName,
                        pageNumber});
            pageCount = ((int)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ConvertFileAsync(string userGuid, string fileName, byte[] fileAsBytes, string profileName, int pageNumber) {
            this.ConvertFileAsync(userGuid, fileName, fileAsBytes, profileName, pageNumber, null);
        }
        
        /// <remarks/>
        public void ConvertFileAsync(string userGuid, string fileName, byte[] fileAsBytes, string profileName, int pageNumber, object userState) {
            if ((this.ConvertFileOperationCompleted == null)) {
                this.ConvertFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertFileOperationCompleted);
            }
            this.InvokeAsync("ConvertFile", new object[] {
                        userGuid,
                        fileName,
                        fileAsBytes,
                        profileName,
                        pageNumber}, this.ConvertFileOperationCompleted, userState);
        }
        
        private void OnConvertFileOperationCompleted(object arg) {
            if ((this.ConvertFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertFileCompleted(this, new ConvertFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetConverterProfiles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SProfile[] GetConverterProfiles(string inputExtension) {
            object[] results = this.Invoke("GetConverterProfiles", new object[] {
                        inputExtension});
            return ((SProfile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetConverterProfilesAsync(string inputExtension) {
            this.GetConverterProfilesAsync(inputExtension, null);
        }
        
        /// <remarks/>
        public void GetConverterProfilesAsync(string inputExtension, object userState) {
            if ((this.GetConverterProfilesOperationCompleted == null)) {
                this.GetConverterProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConverterProfilesOperationCompleted);
            }
            this.InvokeAsync("GetConverterProfiles", new object[] {
                        inputExtension}, this.GetConverterProfilesOperationCompleted, userState);
        }
        
        private void OnGetConverterProfilesOperationCompleted(object arg) {
            if ((this.GetConverterProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConverterProfilesCompleted(this, new GetConverterProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileWithTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileWithTransaction(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, out long fileSize) {
            object[] results = this.Invoke("GetDocumentFileWithTransaction", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID});
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileWithTransactionAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID) {
            this.GetDocumentFileWithTransactionAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileWithTransactionAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, object userState) {
            if ((this.GetDocumentFileWithTransactionOperationCompleted == null)) {
                this.GetDocumentFileWithTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileWithTransactionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileWithTransaction", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID}, this.GetDocumentFileWithTransactionOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileWithTransactionOperationCompleted(object arg) {
            if ((this.GetDocumentFileWithTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileWithTransactionCompleted(this, new GetDocumentFileWithTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileVersionWithTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileVersionWithTransaction(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID, out long fileSize) {
            object[] results = this.Invoke("GetDocumentFileVersionWithTransaction", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        versionID});
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionWithTransactionAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID) {
            this.GetDocumentFileVersionWithTransactionAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, versionID, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionWithTransactionAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string versionID, object userState) {
            if ((this.GetDocumentFileVersionWithTransactionOperationCompleted == null)) {
                this.GetDocumentFileVersionWithTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileVersionWithTransactionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileVersionWithTransaction", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        versionID}, this.GetDocumentFileVersionWithTransactionOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileVersionWithTransactionOperationCompleted(object arg) {
            if ((this.GetDocumentFileVersionWithTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileVersionWithTransactionCompleted(this, new GetDocumentFileVersionWithTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileSimpleWithSession", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileSimpleWithSession(string userGuid, string documentID, string storeID, string exportPath, string exportFileName) {
            object[] results = this.Invoke("GetDocumentFileSimpleWithSession", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleWithSessionAsync(string userGuid, string documentID, string storeID, string exportPath, string exportFileName) {
            this.GetDocumentFileSimpleWithSessionAsync(userGuid, documentID, storeID, exportPath, exportFileName, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleWithSessionAsync(string userGuid, string documentID, string storeID, string exportPath, string exportFileName, object userState) {
            if ((this.GetDocumentFileSimpleWithSessionOperationCompleted == null)) {
                this.GetDocumentFileSimpleWithSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileSimpleWithSessionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileSimpleWithSession", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName}, this.GetDocumentFileSimpleWithSessionOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileSimpleWithSessionOperationCompleted(object arg) {
            if ((this.GetDocumentFileSimpleWithSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileSimpleWithSessionCompleted(this, new GetDocumentFileSimpleWithSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileSimple", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileSimple(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string documentID, string storeID, string exportPath, string exportFileName) {
            object[] results = this.Invoke("GetDocumentFileSimple", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string documentID, string storeID, string exportPath, string exportFileName) {
            this.GetDocumentFileSimpleAsync(serverName, serverPort, tenantName, userName, userPassword, domain, documentID, storeID, exportPath, exportFileName, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string documentID, string storeID, string exportPath, string exportFileName, object userState) {
            if ((this.GetDocumentFileSimpleOperationCompleted == null)) {
                this.GetDocumentFileSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileSimpleOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileSimple", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName}, this.GetDocumentFileSimpleOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileSimpleOperationCompleted(object arg) {
            if ((this.GetDocumentFileSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileSimpleCompleted(this, new GetDocumentFileSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileSimpleWithSingleSignOn", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileSimpleWithSingleSignOn(string serverName, int serverPort, string tenantName, string documentID, string storeID, string exportPath, string exportFileName) {
            object[] results = this.Invoke("GetDocumentFileSimpleWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string documentID, string storeID, string exportPath, string exportFileName) {
            this.GetDocumentFileSimpleWithSingleSignOnAsync(serverName, serverPort, tenantName, documentID, storeID, exportPath, exportFileName, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileSimpleWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string documentID, string storeID, string exportPath, string exportFileName, object userState) {
            if ((this.GetDocumentFileSimpleWithSingleSignOnOperationCompleted == null)) {
                this.GetDocumentFileSimpleWithSingleSignOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileSimpleWithSingleSignOnOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileSimpleWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        documentID,
                        storeID,
                        exportPath,
                        exportFileName}, this.GetDocumentFileSimpleWithSingleSignOnOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileSimpleWithSingleSignOnOperationCompleted(object arg) {
            if ((this.GetDocumentFileSimpleWithSingleSignOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileSimpleWithSingleSignOnCompleted(this, new GetDocumentFileSimpleWithSingleSignOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveFileJSON", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SDocument SaveFileJSON(string userGuid, string fileAsBase64String, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            object[] results = this.Invoke("SaveFileJSON", new object[] {
                        userGuid,
                        fileAsBase64String,
                        fileName,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID});
            return ((SDocument)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFileJSONAsync(string userGuid, string fileAsBase64String, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            this.SaveFileJSONAsync(userGuid, fileAsBase64String, fileName, importTemplateName, document, folders, protectionDomain, lifeCycle, startDate, signatures, currentCulture, currentUICulture, storeID, null);
        }
        
        /// <remarks/>
        public void SaveFileJSONAsync(string userGuid, string fileAsBase64String, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, object userState) {
            if ((this.SaveFileJSONOperationCompleted == null)) {
                this.SaveFileJSONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileJSONOperationCompleted);
            }
            this.InvokeAsync("SaveFileJSON", new object[] {
                        userGuid,
                        fileAsBase64String,
                        fileName,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID}, this.SaveFileJSONOperationCompleted, userState);
        }
        
        private void OnSaveFileJSONOperationCompleted(object arg) {
            if ((this.SaveFileJSONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileJSONCompleted(this, new SaveFileJSONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveFile", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFile(string userGuid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileAsByteArray, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, out string newStoreID) {
            object[] results = this.Invoke("SaveFile", new object[] {
                        userGuid,
                        fileAsByteArray,
                        fileName,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID});
            newStoreID = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFileAsync(string userGuid, byte[] fileAsByteArray, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            this.SaveFileAsync(userGuid, fileAsByteArray, fileName, importTemplateName, document, folders, protectionDomain, lifeCycle, startDate, signatures, currentCulture, currentUICulture, storeID, null);
        }
        
        /// <remarks/>
        public void SaveFileAsync(string userGuid, byte[] fileAsByteArray, string fileName, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, object userState) {
            if ((this.SaveFileOperationCompleted == null)) {
                this.SaveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileOperationCompleted);
            }
            this.InvokeAsync("SaveFile", new object[] {
                        userGuid,
                        fileAsByteArray,
                        fileName,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID}, this.SaveFileOperationCompleted, userState);
        }
        
        private void OnSaveFileOperationCompleted(object arg) {
            if ((this.SaveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileCompleted(this, new SaveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveFileWithTransactionJSON", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SDocument SaveFileWithTransactionJSON(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            object[] results = this.Invoke("SaveFileWithTransactionJSON", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID});
            return ((SDocument)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionJSONAsync(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            this.SaveFileWithTransactionJSONAsync(userGuid, transactionID, importTemplateName, document, folders, protectionDomain, lifeCycle, startDate, signatures, currentCulture, currentUICulture, storeID, null);
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionJSONAsync(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, object userState) {
            if ((this.SaveFileWithTransactionJSONOperationCompleted == null)) {
                this.SaveFileWithTransactionJSONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileWithTransactionJSONOperationCompleted);
            }
            this.InvokeAsync("SaveFileWithTransactionJSON", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID}, this.SaveFileWithTransactionJSONOperationCompleted, userState);
        }
        
        private void OnSaveFileWithTransactionJSONOperationCompleted(object arg) {
            if ((this.SaveFileWithTransactionJSONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileWithTransactionJSONCompleted(this, new SaveFileWithTransactionJSONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveFileWithTransactionIgnoreIsRequired", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFileWithTransactionIgnoreIsRequired(string userGuid, string transactionID, string importTemplateName, bool ignoreIsRequired, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, out string newStoreID) {
            object[] results = this.Invoke("SaveFileWithTransactionIgnoreIsRequired", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        ignoreIsRequired,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID});
            newStoreID = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionIgnoreIsRequiredAsync(string userGuid, string transactionID, string importTemplateName, bool ignoreIsRequired, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            this.SaveFileWithTransactionIgnoreIsRequiredAsync(userGuid, transactionID, importTemplateName, ignoreIsRequired, document, folders, protectionDomain, lifeCycle, startDate, signatures, currentCulture, currentUICulture, storeID, null);
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionIgnoreIsRequiredAsync(string userGuid, string transactionID, string importTemplateName, bool ignoreIsRequired, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, object userState) {
            if ((this.SaveFileWithTransactionIgnoreIsRequiredOperationCompleted == null)) {
                this.SaveFileWithTransactionIgnoreIsRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileWithTransactionIgnoreIsRequiredOperationCompleted);
            }
            this.InvokeAsync("SaveFileWithTransactionIgnoreIsRequired", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        ignoreIsRequired,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID}, this.SaveFileWithTransactionIgnoreIsRequiredOperationCompleted, userState);
        }
        
        private void OnSaveFileWithTransactionIgnoreIsRequiredOperationCompleted(object arg) {
            if ((this.SaveFileWithTransactionIgnoreIsRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileWithTransactionIgnoreIsRequiredCompleted(this, new SaveFileWithTransactionIgnoreIsRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveFileWithTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFileWithTransaction(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, out string newStoreID) {
            object[] results = this.Invoke("SaveFileWithTransaction", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID});
            newStoreID = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionAsync(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID) {
            this.SaveFileWithTransactionAsync(userGuid, transactionID, importTemplateName, document, folders, protectionDomain, lifeCycle, startDate, signatures, currentCulture, currentUICulture, storeID, null);
        }
        
        /// <remarks/>
        public void SaveFileWithTransactionAsync(string userGuid, string transactionID, string importTemplateName, SDocument document, string[] folders, string protectionDomain, string lifeCycle, string startDate, SSignature[] signatures, string currentCulture, string currentUICulture, string storeID, object userState) {
            if ((this.SaveFileWithTransactionOperationCompleted == null)) {
                this.SaveFileWithTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileWithTransactionOperationCompleted);
            }
            this.InvokeAsync("SaveFileWithTransaction", new object[] {
                        userGuid,
                        transactionID,
                        importTemplateName,
                        document,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate,
                        signatures,
                        currentCulture,
                        currentUICulture,
                        storeID}, this.SaveFileWithTransactionOperationCompleted, userState);
        }
        
        private void OnSaveFileWithTransactionOperationCompleted(object arg) {
            if ((this.SaveFileWithTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileWithTransactionCompleted(this, new SaveFileWithTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveLastImportTemplateForUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveLastImportTemplateForUser(string userGuid, string importTemplate, string schemaCulture) {
            this.Invoke("SaveLastImportTemplateForUser", new object[] {
                        userGuid,
                        importTemplate,
                        schemaCulture});
        }
        
        /// <remarks/>
        public void SaveLastImportTemplateForUserAsync(string userGuid, string importTemplate, string schemaCulture) {
            this.SaveLastImportTemplateForUserAsync(userGuid, importTemplate, schemaCulture, null);
        }
        
        /// <remarks/>
        public void SaveLastImportTemplateForUserAsync(string userGuid, string importTemplate, string schemaCulture, object userState) {
            if ((this.SaveLastImportTemplateForUserOperationCompleted == null)) {
                this.SaveLastImportTemplateForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLastImportTemplateForUserOperationCompleted);
            }
            this.InvokeAsync("SaveLastImportTemplateForUser", new object[] {
                        userGuid,
                        importTemplate,
                        schemaCulture}, this.SaveLastImportTemplateForUserOperationCompleted, userState);
        }
        
        private void OnSaveLastImportTemplateForUserOperationCompleted(object arg) {
            if ((this.SaveLastImportTemplateForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLastImportTemplateForUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyTypeTemplates", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypeTemplate[] GetPropertyTypeTemplates(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetPropertyTypeTemplates", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SPropertyTypeTemplate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypeTemplatesAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetPropertyTypeTemplatesAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetPropertyTypeTemplatesAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetPropertyTypeTemplatesOperationCompleted == null)) {
                this.GetPropertyTypeTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypeTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetPropertyTypeTemplates", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetPropertyTypeTemplatesOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypeTemplatesOperationCompleted(object arg) {
            if ((this.GetPropertyTypeTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypeTemplatesCompleted(this, new GetPropertyTypeTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSignatureProfiles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSignatureProfile[] GetSignatureProfiles(string userGuid, string currentCulture, string currentUICulture, SignatureProfileDomain signatureProfileDomain) {
            object[] results = this.Invoke("GetSignatureProfiles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        signatureProfileDomain});
            return ((SSignatureProfile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSignatureProfilesAsync(string userGuid, string currentCulture, string currentUICulture, SignatureProfileDomain signatureProfileDomain) {
            this.GetSignatureProfilesAsync(userGuid, currentCulture, currentUICulture, signatureProfileDomain, null);
        }
        
        /// <remarks/>
        public void GetSignatureProfilesAsync(string userGuid, string currentCulture, string currentUICulture, SignatureProfileDomain signatureProfileDomain, object userState) {
            if ((this.GetSignatureProfilesOperationCompleted == null)) {
                this.GetSignatureProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignatureProfilesOperationCompleted);
            }
            this.InvokeAsync("GetSignatureProfiles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        signatureProfileDomain}, this.GetSignatureProfilesOperationCompleted, userState);
        }
        
        private void OnGetSignatureProfilesOperationCompleted(object arg) {
            if ((this.GetSignatureProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignatureProfilesCompleted(this, new GetSignatureProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllImportTemplates", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SImportTemplate[] GetAllImportTemplates(string userGuid, string currentCulture, string currentUICulture, bool forImport, out bool importTemplateRequired) {
            object[] results = this.Invoke("GetAllImportTemplates", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        forImport});
            importTemplateRequired = ((bool)(results[1]));
            return ((SImportTemplate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllImportTemplatesAsync(string userGuid, string currentCulture, string currentUICulture, bool forImport) {
            this.GetAllImportTemplatesAsync(userGuid, currentCulture, currentUICulture, forImport, null);
        }
        
        /// <remarks/>
        public void GetAllImportTemplatesAsync(string userGuid, string currentCulture, string currentUICulture, bool forImport, object userState) {
            if ((this.GetAllImportTemplatesOperationCompleted == null)) {
                this.GetAllImportTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllImportTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetAllImportTemplates", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        forImport}, this.GetAllImportTemplatesOperationCompleted, userState);
        }
        
        private void OnGetAllImportTemplatesOperationCompleted(object arg) {
            if ((this.GetAllImportTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllImportTemplatesCompleted(this, new GetAllImportTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetImportSettings", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SImportSettings GetImportSettings(string userGuid) {
            object[] results = this.Invoke("GetImportSettings", new object[] {
                        userGuid});
            return ((SImportSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetImportSettingsAsync(string userGuid) {
            this.GetImportSettingsAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetImportSettingsAsync(string userGuid, object userState) {
            if ((this.GetImportSettingsOperationCompleted == null)) {
                this.GetImportSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImportSettingsOperationCompleted);
            }
            this.InvokeAsync("GetImportSettings", new object[] {
                        userGuid}, this.GetImportSettingsOperationCompleted, userState);
        }
        
        private void OnGetImportSettingsOperationCompleted(object arg) {
            if ((this.GetImportSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImportSettingsCompleted(this, new GetImportSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveProcessSettings", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveProcessSettings(string userGuid, SProcessSettings settings, string schemaCulture) {
            this.Invoke("SaveProcessSettings", new object[] {
                        userGuid,
                        settings,
                        schemaCulture});
        }
        
        /// <remarks/>
        public void SaveProcessSettingsAsync(string userGuid, SProcessSettings settings, string schemaCulture) {
            this.SaveProcessSettingsAsync(userGuid, settings, schemaCulture, null);
        }
        
        /// <remarks/>
        public void SaveProcessSettingsAsync(string userGuid, SProcessSettings settings, string schemaCulture, object userState) {
            if ((this.SaveProcessSettingsOperationCompleted == null)) {
                this.SaveProcessSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveProcessSettingsOperationCompleted);
            }
            this.InvokeAsync("SaveProcessSettings", new object[] {
                        userGuid,
                        settings,
                        schemaCulture}, this.SaveProcessSettingsOperationCompleted, userState);
        }
        
        private void OnSaveProcessSettingsOperationCompleted(object arg) {
            if ((this.SaveProcessSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveProcessSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetProcessSettings", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SProcessSettings GetProcessSettings(string userGuid, string schemaLanguage) {
            object[] results = this.Invoke("GetProcessSettings", new object[] {
                        userGuid,
                        schemaLanguage});
            return ((SProcessSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessSettingsAsync(string userGuid, string schemaLanguage) {
            this.GetProcessSettingsAsync(userGuid, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void GetProcessSettingsAsync(string userGuid, string schemaLanguage, object userState) {
            if ((this.GetProcessSettingsOperationCompleted == null)) {
                this.GetProcessSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessSettingsOperationCompleted);
            }
            this.InvokeAsync("GetProcessSettings", new object[] {
                        userGuid,
                        schemaLanguage}, this.GetProcessSettingsOperationCompleted, userState);
        }
        
        private void OnGetProcessSettingsOperationCompleted(object arg) {
            if ((this.GetProcessSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessSettingsCompleted(this, new GetProcessSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPossibleValuesLimited", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyFiller[] GetPossibleValuesLimited(string userGuid, string propertyID, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetPossibleValuesLimited", new object[] {
                        userGuid,
                        propertyID,
                        searchValue,
                        maxReturnValues,
                        currentCulture,
                        currentUICulture});
            return ((SPropertyFiller[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPossibleValuesLimitedAsync(string userGuid, string propertyID, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture) {
            this.GetPossibleValuesLimitedAsync(userGuid, propertyID, searchValue, maxReturnValues, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetPossibleValuesLimitedAsync(string userGuid, string propertyID, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetPossibleValuesLimitedOperationCompleted == null)) {
                this.GetPossibleValuesLimitedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossibleValuesLimitedOperationCompleted);
            }
            this.InvokeAsync("GetPossibleValuesLimited", new object[] {
                        userGuid,
                        propertyID,
                        searchValue,
                        maxReturnValues,
                        currentCulture,
                        currentUICulture}, this.GetPossibleValuesLimitedOperationCompleted, userState);
        }
        
        private void OnGetPossibleValuesLimitedOperationCompleted(object arg) {
            if ((this.GetPossibleValuesLimitedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPossibleValuesLimitedCompleted(this, new GetPossibleValuesLimitedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetValueProposals", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetValueProposals(string userGuid, string propertyID, string propertyName, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetValueProposals", new object[] {
                        userGuid,
                        propertyID,
                        propertyName,
                        searchValue,
                        maxReturnValues,
                        currentCulture,
                        currentUICulture});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetValueProposalsAsync(string userGuid, string propertyID, string propertyName, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture) {
            this.GetValueProposalsAsync(userGuid, propertyID, propertyName, searchValue, maxReturnValues, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetValueProposalsAsync(string userGuid, string propertyID, string propertyName, string searchValue, int maxReturnValues, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetValueProposalsOperationCompleted == null)) {
                this.GetValueProposalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValueProposalsOperationCompleted);
            }
            this.InvokeAsync("GetValueProposals", new object[] {
                        userGuid,
                        propertyID,
                        propertyName,
                        searchValue,
                        maxReturnValues,
                        currentCulture,
                        currentUICulture}, this.GetValueProposalsOperationCompleted, userState);
        }
        
        private void OnGetValueProposalsOperationCompleted(object arg) {
            if ((this.GetValueProposalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValueProposalsCompleted(this, new GetValueProposalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdateProcess", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateProcess(string userGuid, string processID, string protectionDomainID, string[] recipientIDs, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] processComments, string processDueDate, string priority, string taskReminder, string taskDueDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] taskComments, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentProperty[] properties, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SCustomProperty[] customProperties, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pluginStream) {
            this.Invoke("UpdateProcess", new object[] {
                        userGuid,
                        processID,
                        protectionDomainID,
                        recipientIDs,
                        processComments,
                        processDueDate,
                        priority,
                        taskReminder,
                        taskDueDate,
                        taskComments,
                        properties,
                        customProperties,
                        pluginStream});
        }
        
        /// <remarks/>
        public void UpdateProcessAsync(string userGuid, string processID, string protectionDomainID, string[] recipientIDs, SComment[] processComments, string processDueDate, string priority, string taskReminder, string taskDueDate, SComment[] taskComments, SDocumentProperty[] properties, SCustomProperty[] customProperties, byte[] pluginStream) {
            this.UpdateProcessAsync(userGuid, processID, protectionDomainID, recipientIDs, processComments, processDueDate, priority, taskReminder, taskDueDate, taskComments, properties, customProperties, pluginStream, null);
        }
        
        /// <remarks/>
        public void UpdateProcessAsync(string userGuid, string processID, string protectionDomainID, string[] recipientIDs, SComment[] processComments, string processDueDate, string priority, string taskReminder, string taskDueDate, SComment[] taskComments, SDocumentProperty[] properties, SCustomProperty[] customProperties, byte[] pluginStream, object userState) {
            if ((this.UpdateProcessOperationCompleted == null)) {
                this.UpdateProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProcessOperationCompleted);
            }
            this.InvokeAsync("UpdateProcess", new object[] {
                        userGuid,
                        processID,
                        protectionDomainID,
                        recipientIDs,
                        processComments,
                        processDueDate,
                        priority,
                        taskReminder,
                        taskDueDate,
                        taskComments,
                        properties,
                        customProperties,
                        pluginStream}, this.UpdateProcessOperationCompleted, userState);
        }
        
        private void OnUpdateProcessOperationCompleted(object arg) {
            if ((this.UpdateProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdateProcessExt", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateProcessExt(string userGuid, string processID, string protectionDomainID, string[] recipientIDs, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] processComments, string processDueDate, string priority, string taskReminder, string taskDueDate, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SComment[] taskComments, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentProperty[] properties, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SCustomProperty[] customProperties, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pluginStream, string formatCulture, string schemaCulture) {
            this.Invoke("UpdateProcessExt", new object[] {
                        userGuid,
                        processID,
                        protectionDomainID,
                        recipientIDs,
                        processComments,
                        processDueDate,
                        priority,
                        taskReminder,
                        taskDueDate,
                        taskComments,
                        properties,
                        customProperties,
                        pluginStream,
                        formatCulture,
                        schemaCulture});
        }
        
        /// <remarks/>
        public void UpdateProcessExtAsync(string userGuid, string processID, string protectionDomainID, string[] recipientIDs, SComment[] processComments, string processDueDate, string priority, string taskReminder, string taskDueDate, SComment[] taskComments, SDocumentProperty[] properties, SCustomProperty[] customProperties, byte[] pluginStream, string formatCulture, string schemaCulture) {
            this.UpdateProcessExtAsync(userGuid, processID, protectionDomainID, recipientIDs, processComments, processDueDate, priority, taskReminder, taskDueDate, taskComments, properties, customProperties, pluginStream, formatCulture, schemaCulture, null);
        }
        
        /// <remarks/>
        public void UpdateProcessExtAsync(
                    string userGuid, 
                    string processID, 
                    string protectionDomainID, 
                    string[] recipientIDs, 
                    SComment[] processComments, 
                    string processDueDate, 
                    string priority, 
                    string taskReminder, 
                    string taskDueDate, 
                    SComment[] taskComments, 
                    SDocumentProperty[] properties, 
                    SCustomProperty[] customProperties, 
                    byte[] pluginStream, 
                    string formatCulture, 
                    string schemaCulture, 
                    object userState) {
            if ((this.UpdateProcessExtOperationCompleted == null)) {
                this.UpdateProcessExtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProcessExtOperationCompleted);
            }
            this.InvokeAsync("UpdateProcessExt", new object[] {
                        userGuid,
                        processID,
                        protectionDomainID,
                        recipientIDs,
                        processComments,
                        processDueDate,
                        priority,
                        taskReminder,
                        taskDueDate,
                        taskComments,
                        properties,
                        customProperties,
                        pluginStream,
                        formatCulture,
                        schemaCulture}, this.UpdateProcessExtOperationCompleted, userState);
        }
        
        private void OnUpdateProcessExtOperationCompleted(object arg) {
            if ((this.UpdateProcessExtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProcessExtCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdateDocumentProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDocumentProperties(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentPropertyUpdate[] docProperties, string[] folders, string protectionDomain, string lifeCycle, string startDate) {
            object[] results = this.Invoke("UpdateDocumentProperties", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        docProperties,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDocumentPropertiesAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SDocumentPropertyUpdate[] docProperties, string[] folders, string protectionDomain, string lifeCycle, string startDate) {
            this.UpdateDocumentPropertiesAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, docProperties, folders, protectionDomain, lifeCycle, startDate, null);
        }
        
        /// <remarks/>
        public void UpdateDocumentPropertiesAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, SDocumentPropertyUpdate[] docProperties, string[] folders, string protectionDomain, string lifeCycle, string startDate, object userState) {
            if ((this.UpdateDocumentPropertiesOperationCompleted == null)) {
                this.UpdateDocumentPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDocumentPropertiesOperationCompleted);
            }
            this.InvokeAsync("UpdateDocumentProperties", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        docProperties,
                        folders,
                        protectionDomain,
                        lifeCycle,
                        startDate}, this.UpdateDocumentPropertiesOperationCompleted, userState);
        }
        
        private void OnUpdateDocumentPropertiesOperationCompleted(object arg) {
            if ((this.UpdateDocumentPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDocumentPropertiesCompleted(this, new UpdateDocumentPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllRelations", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RelationObject[] GetAllRelations(string currentCulture) {
            object[] results = this.Invoke("GetAllRelations", new object[] {
                        currentCulture});
            return ((RelationObject[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRelationsAsync(string currentCulture) {
            this.GetAllRelationsAsync(currentCulture, null);
        }
        
        /// <remarks/>
        public void GetAllRelationsAsync(string currentCulture, object userState) {
            if ((this.GetAllRelationsOperationCompleted == null)) {
                this.GetAllRelationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRelationsOperationCompleted);
            }
            this.InvokeAsync("GetAllRelations", new object[] {
                        currentCulture}, this.GetAllRelationsOperationCompleted, userState);
        }
        
        private void OnGetAllRelationsOperationCompleted(object arg) {
            if ((this.GetAllRelationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRelationsCompleted(this, new GetAllRelationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllOperations", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OperationObjectExt[] GetAllOperations(string currentCulture) {
            object[] results = this.Invoke("GetAllOperations", new object[] {
                        currentCulture});
            return ((OperationObjectExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllOperationsAsync(string currentCulture) {
            this.GetAllOperationsAsync(currentCulture, null);
        }
        
        /// <remarks/>
        public void GetAllOperationsAsync(string currentCulture, object userState) {
            if ((this.GetAllOperationsOperationCompleted == null)) {
                this.GetAllOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllOperationsOperationCompleted);
            }
            this.InvokeAsync("GetAllOperations", new object[] {
                        currentCulture}, this.GetAllOperationsOperationCompleted, userState);
        }
        
        private void OnGetAllOperationsOperationCompleted(object arg) {
            if ((this.GetAllOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllOperationsCompleted(this, new GetAllOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetConnectionPoolConfiguration", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConnectionPoolConfiguration() {
            object[] results = this.Invoke("GetConnectionPoolConfiguration", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConnectionPoolConfigurationAsync() {
            this.GetConnectionPoolConfigurationAsync(null);
        }
        
        /// <remarks/>
        public void GetConnectionPoolConfigurationAsync(object userState) {
            if ((this.GetConnectionPoolConfigurationOperationCompleted == null)) {
                this.GetConnectionPoolConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConnectionPoolConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetConnectionPoolConfiguration", new object[0], this.GetConnectionPoolConfigurationOperationCompleted, userState);
        }
        
        private void OnGetConnectionPoolConfigurationOperationCompleted(object arg) {
            if ((this.GetConnectionPoolConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConnectionPoolConfigurationCompleted(this, new GetConnectionPoolConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckIn", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIn(string userGuid, string documentID, string storeID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string comment, string versionNumber, bool overwrite, string fileName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CheckIn", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        data,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInAsync(string userGuid, string documentID, string storeID, byte[] data, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture) {
            this.CheckInAsync(userGuid, documentID, storeID, data, comment, versionNumber, overwrite, fileName, signatures, nextLifeCycleState, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CheckInAsync(string userGuid, string documentID, string storeID, byte[] data, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture, object userState) {
            if ((this.CheckInOperationCompleted == null)) {
                this.CheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInOperationCompleted);
            }
            this.InvokeAsync("CheckIn", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        data,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        currentCulture,
                        currentUICulture}, this.CheckInOperationCompleted, userState);
        }
        
        private void OnCheckInOperationCompleted(object arg) {
            if ((this.CheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInCompleted(this, new CheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckInWithProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckInWithProperties(string userGuid, string documentID, string storeID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string comment, string versionNumber, bool overwrite, string fileName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, SLifeCycleState nextLifeCycleState, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentPropertyUpdate[] docProperties, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CheckInWithProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        data,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        docProperties,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInWithPropertiesAsync(string userGuid, string documentID, string storeID, byte[] data, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, SDocumentPropertyUpdate[] docProperties, string currentCulture, string currentUICulture) {
            this.CheckInWithPropertiesAsync(userGuid, documentID, storeID, data, comment, versionNumber, overwrite, fileName, signatures, nextLifeCycleState, docProperties, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CheckInWithPropertiesAsync(string userGuid, string documentID, string storeID, byte[] data, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, SDocumentPropertyUpdate[] docProperties, string currentCulture, string currentUICulture, object userState) {
            if ((this.CheckInWithPropertiesOperationCompleted == null)) {
                this.CheckInWithPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInWithPropertiesOperationCompleted);
            }
            this.InvokeAsync("CheckInWithProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        data,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        docProperties,
                        currentCulture,
                        currentUICulture}, this.CheckInWithPropertiesOperationCompleted, userState);
        }
        
        private void OnCheckInWithPropertiesOperationCompleted(object arg) {
            if ((this.CheckInWithPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInWithPropertiesCompleted(this, new CheckInWithPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckInWithTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckInWithTransaction(string userGuid, string documentID, string storeID, string transactionID, string comment, string versionNumber, bool overwrite, string fileName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CheckInWithTransaction", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        transactionID,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInWithTransactionAsync(string userGuid, string documentID, string storeID, string transactionID, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture) {
            this.CheckInWithTransactionAsync(userGuid, documentID, storeID, transactionID, comment, versionNumber, overwrite, fileName, signatures, nextLifeCycleState, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CheckInWithTransactionAsync(string userGuid, string documentID, string storeID, string transactionID, string comment, string versionNumber, bool overwrite, string fileName, SSignature[] signatures, SLifeCycleState nextLifeCycleState, string currentCulture, string currentUICulture, object userState) {
            if ((this.CheckInWithTransactionOperationCompleted == null)) {
                this.CheckInWithTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInWithTransactionOperationCompleted);
            }
            this.InvokeAsync("CheckInWithTransaction", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        transactionID,
                        comment,
                        versionNumber,
                        overwrite,
                        fileName,
                        signatures,
                        nextLifeCycleState,
                        currentCulture,
                        currentUICulture}, this.CheckInWithTransactionOperationCompleted, userState);
        }
        
        private void OnCheckInWithTransactionOperationCompleted(object arg) {
            if ((this.CheckInWithTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInWithTransactionCompleted(this, new CheckInWithTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UndoCheckout", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UndoCheckout(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("UndoCheckout", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UndoCheckoutAsync(string userGuid, string documentID, string storeID) {
            this.UndoCheckoutAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void UndoCheckoutAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.UndoCheckoutOperationCompleted == null)) {
                this.UndoCheckoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUndoCheckoutOperationCompleted);
            }
            this.InvokeAsync("UndoCheckout", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.UndoCheckoutOperationCompleted, userState);
        }
        
        private void OnUndoCheckoutOperationCompleted(object arg) {
            if ((this.UndoCheckoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UndoCheckoutCompleted(this, new UndoCheckoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckOut", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CheckOut(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("CheckOut", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckOutAsync(string userGuid, string documentID, string storeID) {
            this.CheckOutAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void CheckOutAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.CheckOutOperationCompleted == null)) {
                this.CheckOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutOperationCompleted);
            }
            this.InvokeAsync("CheckOut", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.CheckOutOperationCompleted, userState);
        }
        
        private void OnCheckOutOperationCompleted(object arg) {
            if ((this.CheckOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutCompleted(this, new CheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckOutOnly", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOutOnly(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("CheckOutOnly", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOutOnlyAsync(string userGuid, string documentID, string storeID) {
            this.CheckOutOnlyAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void CheckOutOnlyAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.CheckOutOnlyOperationCompleted == null)) {
                this.CheckOutOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutOnlyOperationCompleted);
            }
            this.InvokeAsync("CheckOutOnly", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.CheckOutOnlyOperationCompleted, userState);
        }
        
        private void OnCheckOutOnlyOperationCompleted(object arg) {
            if ((this.CheckOutOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutOnlyCompleted(this, new CheckOutOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Delete", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("Delete", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(string userGuid, string documentID, string storeID) {
            this.DeleteAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetWebServiceVersion", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebServiceVersion() {
            object[] results = this.Invoke("GetWebServiceVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServiceVersionAsync() {
            this.GetWebServiceVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServiceVersionAsync(object userState) {
            if ((this.GetWebServiceVersionOperationCompleted == null)) {
                this.GetWebServiceVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServiceVersionOperationCompleted);
            }
            this.InvokeAsync("GetWebServiceVersion", new object[0], this.GetWebServiceVersionOperationCompleted, userState);
        }
        
        private void OnGetWebServiceVersionOperationCompleted(object arg) {
            if ((this.GetWebServiceVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServiceVersionCompleted(this, new GetWebServiceVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentPageCount", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentPageCount(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations, out SDocument documentInfo) {
            object[] results = this.Invoke("GetDocumentPageCount", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        profileName,
                        includeAnnotations});
            documentInfo = ((SDocument)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentPageCountAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations) {
            this.GetDocumentPageCountAsync(userGuid, currentCulture, currentUICulture, documentID, storeID, profileName, includeAnnotations, null);
        }
        
        /// <remarks/>
        public void GetDocumentPageCountAsync(string userGuid, string currentCulture, string currentUICulture, string documentID, string storeID, string profileName, bool includeAnnotations, object userState) {
            if ((this.GetDocumentPageCountOperationCompleted == null)) {
                this.GetDocumentPageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentPageCountOperationCompleted);
            }
            this.InvokeAsync("GetDocumentPageCount", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        documentID,
                        storeID,
                        profileName,
                        includeAnnotations}, this.GetDocumentPageCountOperationCompleted, userState);
        }
        
        private void OnGetDocumentPageCountOperationCompleted(object arg) {
            if ((this.GetDocumentPageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentPageCountCompleted(this, new GetDocumentPageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileVersionConverted", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentFileVersionConverted(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations, int pageNumber, out SDocument documentInfo) {
            object[] results = this.Invoke("GetDocumentFileVersionConverted", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        profileName,
                        includeAnnotations,
                        pageNumber});
            documentInfo = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionConvertedAsync(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations, int pageNumber) {
            this.GetDocumentFileVersionConvertedAsync(userGuid, documentID, storeID, versionID, profileName, includeAnnotations, pageNumber, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionConvertedAsync(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations, int pageNumber, object userState) {
            if ((this.GetDocumentFileVersionConvertedOperationCompleted == null)) {
                this.GetDocumentFileVersionConvertedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileVersionConvertedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileVersionConverted", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        profileName,
                        includeAnnotations,
                        pageNumber}, this.GetDocumentFileVersionConvertedOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileVersionConvertedOperationCompleted(object arg) {
            if ((this.GetDocumentFileVersionConvertedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileVersionConvertedCompleted(this, new GetDocumentFileVersionConvertedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileVersion", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentFileVersion(string userGuid, string documentID, string storeID, string versionID, bool includeAnnotations, out SDocument documentInfo) {
            object[] results = this.Invoke("GetDocumentFileVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        includeAnnotations});
            documentInfo = ((SDocument)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionAsync(string userGuid, string documentID, string storeID, string versionID, bool includeAnnotations) {
            this.GetDocumentFileVersionAsync(userGuid, documentID, storeID, versionID, includeAnnotations, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionAsync(string userGuid, string documentID, string storeID, string versionID, bool includeAnnotations, object userState) {
            if ((this.GetDocumentFileVersionOperationCompleted == null)) {
                this.GetDocumentFileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileVersionOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileVersion", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        includeAnnotations}, this.GetDocumentFileVersionOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileVersionOperationCompleted(object arg) {
            if ((this.GetDocumentFileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileVersionCompleted(this, new GetDocumentFileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentFileVersionPageCount", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFileVersionPageCount(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations, out SDocument documentInfo) {
            object[] results = this.Invoke("GetDocumentFileVersionPageCount", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        profileName,
                        includeAnnotations});
            documentInfo = ((SDocument)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionPageCountAsync(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations) {
            this.GetDocumentFileVersionPageCountAsync(userGuid, documentID, storeID, versionID, profileName, includeAnnotations, null);
        }
        
        /// <remarks/>
        public void GetDocumentFileVersionPageCountAsync(string userGuid, string documentID, string storeID, string versionID, string profileName, bool includeAnnotations, object userState) {
            if ((this.GetDocumentFileVersionPageCountOperationCompleted == null)) {
                this.GetDocumentFileVersionPageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFileVersionPageCountOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFileVersionPageCount", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        profileName,
                        includeAnnotations}, this.GetDocumentFileVersionPageCountOperationCompleted, userState);
        }
        
        private void OnGetDocumentFileVersionPageCountOperationCompleted(object arg) {
            if ((this.GetDocumentFileVersionPageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFileVersionPageCountCompleted(this, new GetDocumentFileVersionPageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetWebDataProviderSettings", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SWebDataProviderSettings GetWebDataProviderSettings(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetWebDataProviderSettings", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SWebDataProviderSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebDataProviderSettingsAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetWebDataProviderSettingsAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetWebDataProviderSettingsAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetWebDataProviderSettingsOperationCompleted == null)) {
                this.GetWebDataProviderSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDataProviderSettingsOperationCompleted);
            }
            this.InvokeAsync("GetWebDataProviderSettings", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetWebDataProviderSettingsOperationCompleted, userState);
        }
        
        private void OnGetWebDataProviderSettingsOperationCompleted(object arg) {
            if ((this.GetWebDataProviderSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDataProviderSettingsCompleted(this, new GetWebDataProviderSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetVersionList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentVersion[] GetVersionList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, out bool hasMore) {
            object[] results = this.Invoke("GetVersionList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize});
            hasMore = ((bool)(results[1]));
            return ((SDocumentVersion[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize) {
            this.GetVersionListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, pageSize, null);
        }
        
        /// <remarks/>
        public void GetVersionListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, object userState) {
            if ((this.GetVersionListOperationCompleted == null)) {
                this.GetVersionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionListOperationCompleted);
            }
            this.InvokeAsync("GetVersionList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize}, this.GetVersionListOperationCompleted, userState);
        }
        
        private void OnGetVersionListOperationCompleted(object arg) {
            if ((this.GetVersionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionListCompleted(this, new GetVersionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetUserLogList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SUserLog[] GetUserLogList(string userGuid, string userID, string currentCulture, string currentUICulture, int startIndex, int count, out bool hasMore) {
            object[] results = this.Invoke("GetUserLogList", new object[] {
                        userGuid,
                        userID,
                        currentCulture,
                        currentUICulture,
                        startIndex,
                        count});
            hasMore = ((bool)(results[1]));
            return ((SUserLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLogListAsync(string userGuid, string userID, string currentCulture, string currentUICulture, int startIndex, int count) {
            this.GetUserLogListAsync(userGuid, userID, currentCulture, currentUICulture, startIndex, count, null);
        }
        
        /// <remarks/>
        public void GetUserLogListAsync(string userGuid, string userID, string currentCulture, string currentUICulture, int startIndex, int count, object userState) {
            if ((this.GetUserLogListOperationCompleted == null)) {
                this.GetUserLogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLogListOperationCompleted);
            }
            this.InvokeAsync("GetUserLogList", new object[] {
                        userGuid,
                        userID,
                        currentCulture,
                        currentUICulture,
                        startIndex,
                        count}, this.GetUserLogListOperationCompleted, userState);
        }
        
        private void OnGetUserLogListOperationCompleted(object arg) {
            if ((this.GetUserLogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLogListCompleted(this, new GetUserLogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/RemoveUserLogEntries", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveUserLogEntries(string userGuid, string userID, int startIndex, int count, out int remainingEntries) {
            object[] results = this.Invoke("RemoveUserLogEntries", new object[] {
                        userGuid,
                        userID,
                        startIndex,
                        count});
            remainingEntries = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUserLogEntriesAsync(string userGuid, string userID, int startIndex, int count) {
            this.RemoveUserLogEntriesAsync(userGuid, userID, startIndex, count, null);
        }
        
        /// <remarks/>
        public void RemoveUserLogEntriesAsync(string userGuid, string userID, int startIndex, int count, object userState) {
            if ((this.RemoveUserLogEntriesOperationCompleted == null)) {
                this.RemoveUserLogEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserLogEntriesOperationCompleted);
            }
            this.InvokeAsync("RemoveUserLogEntries", new object[] {
                        userGuid,
                        userID,
                        startIndex,
                        count}, this.RemoveUserLogEntriesOperationCompleted, userState);
        }
        
        private void OnRemoveUserLogEntriesOperationCompleted(object arg) {
            if ((this.RemoveUserLogEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserLogEntriesCompleted(this, new RemoveUserLogEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AddDocumentLinks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDocumentLinks(string userGuid, string sourceDocumentID, string[] targetDocumentIDs) {
            object[] results = this.Invoke("AddDocumentLinks", new object[] {
                        userGuid,
                        sourceDocumentID,
                        targetDocumentIDs});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDocumentLinksAsync(string userGuid, string sourceDocumentID, string[] targetDocumentIDs) {
            this.AddDocumentLinksAsync(userGuid, sourceDocumentID, targetDocumentIDs, null);
        }
        
        /// <remarks/>
        public void AddDocumentLinksAsync(string userGuid, string sourceDocumentID, string[] targetDocumentIDs, object userState) {
            if ((this.AddDocumentLinksOperationCompleted == null)) {
                this.AddDocumentLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDocumentLinksOperationCompleted);
            }
            this.InvokeAsync("AddDocumentLinks", new object[] {
                        userGuid,
                        sourceDocumentID,
                        targetDocumentIDs}, this.AddDocumentLinksOperationCompleted, userState);
        }
        
        private void OnAddDocumentLinksOperationCompleted(object arg) {
            if ((this.AddDocumentLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDocumentLinksCompleted(this, new AddDocumentLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableImportData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UserDefinedTableImportData(string userGuid, string tableName, string csvString, string delimiter, bool overwrite) {
            object[] results = this.Invoke("UserDefinedTableImportData", new object[] {
                        userGuid,
                        tableName,
                        csvString,
                        delimiter,
                        overwrite});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableImportDataAsync(string userGuid, string tableName, string csvString, string delimiter, bool overwrite) {
            this.UserDefinedTableImportDataAsync(userGuid, tableName, csvString, delimiter, overwrite, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableImportDataAsync(string userGuid, string tableName, string csvString, string delimiter, bool overwrite, object userState) {
            if ((this.UserDefinedTableImportDataOperationCompleted == null)) {
                this.UserDefinedTableImportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableImportDataOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableImportData", new object[] {
                        userGuid,
                        tableName,
                        csvString,
                        delimiter,
                        overwrite}, this.UserDefinedTableImportDataOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableImportDataOperationCompleted(object arg) {
            if ((this.UserDefinedTableImportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableImportDataCompleted(this, new UserDefinedTableImportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableExportData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserDefinedTableExportData(string userGuid, string tableName, string delimiter) {
            object[] results = this.Invoke("UserDefinedTableExportData", new object[] {
                        userGuid,
                        tableName,
                        delimiter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableExportDataAsync(string userGuid, string tableName, string delimiter) {
            this.UserDefinedTableExportDataAsync(userGuid, tableName, delimiter, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableExportDataAsync(string userGuid, string tableName, string delimiter, object userState) {
            if ((this.UserDefinedTableExportDataOperationCompleted == null)) {
                this.UserDefinedTableExportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableExportDataOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableExportData", new object[] {
                        userGuid,
                        tableName,
                        delimiter}, this.UserDefinedTableExportDataOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableExportDataOperationCompleted(object arg) {
            if ((this.UserDefinedTableExportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableExportDataCompleted(this, new UserDefinedTableExportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableGetRecords", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserDefinedTableGetRecords(string userGuid, string tableName, string delimiter, string whereClause, string orderByClause) {
            object[] results = this.Invoke("UserDefinedTableGetRecords", new object[] {
                        userGuid,
                        tableName,
                        delimiter,
                        whereClause,
                        orderByClause});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableGetRecordsAsync(string userGuid, string tableName, string delimiter, string whereClause, string orderByClause) {
            this.UserDefinedTableGetRecordsAsync(userGuid, tableName, delimiter, whereClause, orderByClause, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableGetRecordsAsync(string userGuid, string tableName, string delimiter, string whereClause, string orderByClause, object userState) {
            if ((this.UserDefinedTableGetRecordsOperationCompleted == null)) {
                this.UserDefinedTableGetRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableGetRecordsOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableGetRecords", new object[] {
                        userGuid,
                        tableName,
                        delimiter,
                        whereClause,
                        orderByClause}, this.UserDefinedTableGetRecordsOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableGetRecordsOperationCompleted(object arg) {
            if ((this.UserDefinedTableGetRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableGetRecordsCompleted(this, new UserDefinedTableGetRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableGetRowCount", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UserDefinedTableGetRowCount(string userGuid, string tableName) {
            object[] results = this.Invoke("UserDefinedTableGetRowCount", new object[] {
                        userGuid,
                        tableName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableGetRowCountAsync(string userGuid, string tableName) {
            this.UserDefinedTableGetRowCountAsync(userGuid, tableName, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableGetRowCountAsync(string userGuid, string tableName, object userState) {
            if ((this.UserDefinedTableGetRowCountOperationCompleted == null)) {
                this.UserDefinedTableGetRowCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableGetRowCountOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableGetRowCount", new object[] {
                        userGuid,
                        tableName}, this.UserDefinedTableGetRowCountOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableGetRowCountOperationCompleted(object arg) {
            if ((this.UserDefinedTableGetRowCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableGetRowCountCompleted(this, new UserDefinedTableGetRowCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableInsertRecord", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserDefinedTableInsertRecord(string userGuid, string tableName, string[] values) {
            object[] results = this.Invoke("UserDefinedTableInsertRecord", new object[] {
                        userGuid,
                        tableName,
                        values});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableInsertRecordAsync(string userGuid, string tableName, string[] values) {
            this.UserDefinedTableInsertRecordAsync(userGuid, tableName, values, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableInsertRecordAsync(string userGuid, string tableName, string[] values, object userState) {
            if ((this.UserDefinedTableInsertRecordOperationCompleted == null)) {
                this.UserDefinedTableInsertRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableInsertRecordOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableInsertRecord", new object[] {
                        userGuid,
                        tableName,
                        values}, this.UserDefinedTableInsertRecordOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableInsertRecordOperationCompleted(object arg) {
            if ((this.UserDefinedTableInsertRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableInsertRecordCompleted(this, new UserDefinedTableInsertRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UserDefinedTableDeleteRecords", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserDefinedTableDeleteRecords(string userGuid, string tableName, string whereClause) {
            object[] results = this.Invoke("UserDefinedTableDeleteRecords", new object[] {
                        userGuid,
                        tableName,
                        whereClause});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserDefinedTableDeleteRecordsAsync(string userGuid, string tableName, string whereClause) {
            this.UserDefinedTableDeleteRecordsAsync(userGuid, tableName, whereClause, null);
        }
        
        /// <remarks/>
        public void UserDefinedTableDeleteRecordsAsync(string userGuid, string tableName, string whereClause, object userState) {
            if ((this.UserDefinedTableDeleteRecordsOperationCompleted == null)) {
                this.UserDefinedTableDeleteRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDefinedTableDeleteRecordsOperationCompleted);
            }
            this.InvokeAsync("UserDefinedTableDeleteRecords", new object[] {
                        userGuid,
                        tableName,
                        whereClause}, this.UserDefinedTableDeleteRecordsOperationCompleted, userState);
        }
        
        private void OnUserDefinedTableDeleteRecordsOperationCompleted(object arg) {
            if ((this.UserDefinedTableDeleteRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDefinedTableDeleteRecordsCompleted(this, new UserDefinedTableDeleteRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteDocumentLinks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDocumentLinks(string userGuid, string sourceDocumentID, string[] targetDocumentIDs) {
            object[] results = this.Invoke("DeleteDocumentLinks", new object[] {
                        userGuid,
                        sourceDocumentID,
                        targetDocumentIDs});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDocumentLinksAsync(string userGuid, string sourceDocumentID, string[] targetDocumentIDs) {
            this.DeleteDocumentLinksAsync(userGuid, sourceDocumentID, targetDocumentIDs, null);
        }
        
        /// <remarks/>
        public void DeleteDocumentLinksAsync(string userGuid, string sourceDocumentID, string[] targetDocumentIDs, object userState) {
            if ((this.DeleteDocumentLinksOperationCompleted == null)) {
                this.DeleteDocumentLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentLinksOperationCompleted);
            }
            this.InvokeAsync("DeleteDocumentLinks", new object[] {
                        userGuid,
                        sourceDocumentID,
                        targetDocumentIDs}, this.DeleteDocumentLinksOperationCompleted, userState);
        }
        
        private void OnDeleteDocumentLinksOperationCompleted(object arg) {
            if ((this.DeleteDocumentLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDocumentLinksCompleted(this, new DeleteDocumentLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllDocumentLinks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] GetAllDocumentLinks(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllDocumentLinks", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDocumentLinksAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetAllDocumentLinksAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllDocumentLinksAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllDocumentLinksOperationCompleted == null)) {
                this.GetAllDocumentLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDocumentLinksOperationCompleted);
            }
            this.InvokeAsync("GetAllDocumentLinks", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetAllDocumentLinksOperationCompleted, userState);
        }
        
        private void OnGetAllDocumentLinksOperationCompleted(object arg) {
            if ((this.GetAllDocumentLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDocumentLinksCompleted(this, new GetAllDocumentLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllDocumentChildLinks", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] GetAllDocumentChildLinks(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllDocumentChildLinks", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDocumentChildLinksAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetAllDocumentChildLinksAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllDocumentChildLinksAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllDocumentChildLinksOperationCompleted == null)) {
                this.GetAllDocumentChildLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDocumentChildLinksOperationCompleted);
            }
            this.InvokeAsync("GetAllDocumentChildLinks", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetAllDocumentChildLinksOperationCompleted, userState);
        }
        
        private void OnGetAllDocumentChildLinksOperationCompleted(object arg) {
            if ((this.GetAllDocumentChildLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDocumentChildLinksCompleted(this, new GetAllDocumentChildLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateUrlIntegrationLinksForDocuments", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateUrlIntegrationLinksForDocuments(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocument[] documentList, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateUrlIntegrationLinksForDocuments", new object[] {
                        userGuid,
                        documentList,
                        currentCulture,
                        currentUICulture});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateUrlIntegrationLinksForDocumentsAsync(string userGuid, SDocument[] documentList, string currentCulture, string currentUICulture) {
            this.CreateUrlIntegrationLinksForDocumentsAsync(userGuid, documentList, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateUrlIntegrationLinksForDocumentsAsync(string userGuid, SDocument[] documentList, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateUrlIntegrationLinksForDocumentsOperationCompleted == null)) {
                this.CreateUrlIntegrationLinksForDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUrlIntegrationLinksForDocumentsOperationCompleted);
            }
            this.InvokeAsync("CreateUrlIntegrationLinksForDocuments", new object[] {
                        userGuid,
                        documentList,
                        currentCulture,
                        currentUICulture}, this.CreateUrlIntegrationLinksForDocumentsOperationCompleted, userState);
        }
        
        private void OnCreateUrlIntegrationLinksForDocumentsOperationCompleted(object arg) {
            if ((this.CreateUrlIntegrationLinksForDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUrlIntegrationLinksForDocumentsCompleted(this, new CreateUrlIntegrationLinksForDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetTemporaryReleasedDossiersForExtension", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SReleasedDossier[] GetTemporaryReleasedDossiersForExtension(string userGuid, string dossierExtension, string[] propertyTypes, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetTemporaryReleasedDossiersForExtension", new object[] {
                        userGuid,
                        dossierExtension,
                        propertyTypes,
                        currentCulture,
                        currentUICulture});
            return ((SReleasedDossier[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTemporaryReleasedDossiersForExtensionAsync(string userGuid, string dossierExtension, string[] propertyTypes, string currentCulture, string currentUICulture) {
            this.GetTemporaryReleasedDossiersForExtensionAsync(userGuid, dossierExtension, propertyTypes, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetTemporaryReleasedDossiersForExtensionAsync(string userGuid, string dossierExtension, string[] propertyTypes, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetTemporaryReleasedDossiersForExtensionOperationCompleted == null)) {
                this.GetTemporaryReleasedDossiersForExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemporaryReleasedDossiersForExtensionOperationCompleted);
            }
            this.InvokeAsync("GetTemporaryReleasedDossiersForExtension", new object[] {
                        userGuid,
                        dossierExtension,
                        propertyTypes,
                        currentCulture,
                        currentUICulture}, this.GetTemporaryReleasedDossiersForExtensionOperationCompleted, userState);
        }
        
        private void OnGetTemporaryReleasedDossiersForExtensionOperationCompleted(object arg) {
            if ((this.GetTemporaryReleasedDossiersForExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemporaryReleasedDossiersForExtensionCompleted(this, new GetTemporaryReleasedDossiersForExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetTemporaryReleasedDossierFiles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SReleasedDossierFile[] GetTemporaryReleasedDossierFiles(string userGuid, string dossierID, string[] propertyTypes, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetTemporaryReleasedDossierFiles", new object[] {
                        userGuid,
                        dossierID,
                        propertyTypes,
                        currentCulture,
                        currentUICulture});
            return ((SReleasedDossierFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTemporaryReleasedDossierFilesAsync(string userGuid, string dossierID, string[] propertyTypes, string currentCulture, string currentUICulture) {
            this.GetTemporaryReleasedDossierFilesAsync(userGuid, dossierID, propertyTypes, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetTemporaryReleasedDossierFilesAsync(string userGuid, string dossierID, string[] propertyTypes, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetTemporaryReleasedDossierFilesOperationCompleted == null)) {
                this.GetTemporaryReleasedDossierFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemporaryReleasedDossierFilesOperationCompleted);
            }
            this.InvokeAsync("GetTemporaryReleasedDossierFiles", new object[] {
                        userGuid,
                        dossierID,
                        propertyTypes,
                        currentCulture,
                        currentUICulture}, this.GetTemporaryReleasedDossierFilesOperationCompleted, userState);
        }
        
        private void OnGetTemporaryReleasedDossierFilesOperationCompleted(object arg) {
            if ((this.GetTemporaryReleasedDossierFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemporaryReleasedDossierFilesCompleted(this, new GetTemporaryReleasedDossierFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAccessLogList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentAccessLog[] GetAccessLogList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAccessLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SDocumentAccessLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccessLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetAccessLogListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAccessLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAccessLogListOperationCompleted == null)) {
                this.GetAccessLogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccessLogListOperationCompleted);
            }
            this.InvokeAsync("GetAccessLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetAccessLogListOperationCompleted, userState);
        }
        
        private void OnGetAccessLogListOperationCompleted(object arg) {
            if ((this.GetAccessLogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccessLogListCompleted(this, new GetAccessLogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetHistoryLogList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentHistoryLog[] GetHistoryLogList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, out bool hasMore) {
            object[] results = this.Invoke("GetHistoryLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize});
            hasMore = ((bool)(results[1]));
            return ((SDocumentHistoryLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoryLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize) {
            this.GetHistoryLogListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, pageSize, null);
        }
        
        /// <remarks/>
        public void GetHistoryLogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, int pageSize, object userState) {
            if ((this.GetHistoryLogListOperationCompleted == null)) {
                this.GetHistoryLogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryLogListOperationCompleted);
            }
            this.InvokeAsync("GetHistoryLogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        pageSize}, this.GetHistoryLogListOperationCompleted, userState);
        }
        
        private void OnGetHistoryLogListOperationCompleted(object arg) {
            if ((this.GetHistoryLogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryLogListCompleted(this, new GetHistoryLogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetFullTextDiff", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFullTextDiff(string userGuid, string documentID, string storeID, string firstVersionID, string secondVersionID, out string firstVersion, out string secondVersion) {
            object[] results = this.Invoke("GetFullTextDiff", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        firstVersionID,
                        secondVersionID});
            firstVersion = ((string)(results[1]));
            secondVersion = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFullTextDiffAsync(string userGuid, string documentID, string storeID, string firstVersionID, string secondVersionID) {
            this.GetFullTextDiffAsync(userGuid, documentID, storeID, firstVersionID, secondVersionID, null);
        }
        
        /// <remarks/>
        public void GetFullTextDiffAsync(string userGuid, string documentID, string storeID, string firstVersionID, string secondVersionID, object userState) {
            if ((this.GetFullTextDiffOperationCompleted == null)) {
                this.GetFullTextDiffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFullTextDiffOperationCompleted);
            }
            this.InvokeAsync("GetFullTextDiff", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        firstVersionID,
                        secondVersionID}, this.GetFullTextDiffOperationCompleted, userState);
        }
        
        private void OnGetFullTextDiffOperationCompleted(object arg) {
            if ((this.GetFullTextDiffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFullTextDiffCompleted(this, new GetFullTextDiffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetRiaClientDockingLayout", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRiaClientDockingLayout(string userGuid, string rubricName, string logonName) {
            object[] results = this.Invoke("GetRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName) {
            this.GetRiaClientDockingLayoutAsync(userGuid, rubricName, logonName, null);
        }
        
        /// <remarks/>
        public void GetRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName, object userState) {
            if ((this.GetRiaClientDockingLayoutOperationCompleted == null)) {
                this.GetRiaClientDockingLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRiaClientDockingLayoutOperationCompleted);
            }
            this.InvokeAsync("GetRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName}, this.GetRiaClientDockingLayoutOperationCompleted, userState);
        }
        
        private void OnGetRiaClientDockingLayoutOperationCompleted(object arg) {
            if ((this.GetRiaClientDockingLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRiaClientDockingLayoutCompleted(this, new GetRiaClientDockingLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteRiaClientDockingLayout", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRiaClientDockingLayout(string userGuid, string rubricName, string logonName) {
            this.Invoke("DeleteRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName});
        }
        
        /// <remarks/>
        public void DeleteRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName) {
            this.DeleteRiaClientDockingLayoutAsync(userGuid, rubricName, logonName, null);
        }
        
        /// <remarks/>
        public void DeleteRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName, object userState) {
            if ((this.DeleteRiaClientDockingLayoutOperationCompleted == null)) {
                this.DeleteRiaClientDockingLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRiaClientDockingLayoutOperationCompleted);
            }
            this.InvokeAsync("DeleteRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName}, this.DeleteRiaClientDockingLayoutOperationCompleted, userState);
        }
        
        private void OnDeleteRiaClientDockingLayoutOperationCompleted(object arg) {
            if ((this.DeleteRiaClientDockingLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRiaClientDockingLayoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllRiaClientUrlIntegrationDockingLayoutTemplateNames", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAllRiaClientUrlIntegrationDockingLayoutTemplateNames(string userGuid, string rubricName) {
            object[] results = this.Invoke("GetAllRiaClientUrlIntegrationDockingLayoutTemplateNames", new object[] {
                        userGuid,
                        rubricName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesAsync(string userGuid, string rubricName) {
            this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesAsync(userGuid, rubricName, null);
        }
        
        /// <remarks/>
        public void GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesAsync(string userGuid, string rubricName, object userState) {
            if ((this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted == null)) {
                this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted);
            }
            this.InvokeAsync("GetAllRiaClientUrlIntegrationDockingLayoutTemplateNames", new object[] {
                        userGuid,
                        rubricName}, this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted, userState);
        }
        
        private void OnGetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesOperationCompleted(object arg) {
            if ((this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompleted(this, new GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetRiaClientDockingLayout", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRiaClientDockingLayout(string userGuid, string rubricName, string logonName, string dockingLayout, bool throwExceptions) {
            object[] results = this.Invoke("SetRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName,
                        dockingLayout,
                        throwExceptions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName, string dockingLayout, bool throwExceptions) {
            this.SetRiaClientDockingLayoutAsync(userGuid, rubricName, logonName, dockingLayout, throwExceptions, null);
        }
        
        /// <remarks/>
        public void SetRiaClientDockingLayoutAsync(string userGuid, string rubricName, string logonName, string dockingLayout, bool throwExceptions, object userState) {
            if ((this.SetRiaClientDockingLayoutOperationCompleted == null)) {
                this.SetRiaClientDockingLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRiaClientDockingLayoutOperationCompleted);
            }
            this.InvokeAsync("SetRiaClientDockingLayout", new object[] {
                        userGuid,
                        rubricName,
                        logonName,
                        dockingLayout,
                        throwExceptions}, this.SetRiaClientDockingLayoutOperationCompleted, userState);
        }
        
        private void OnSetRiaClientDockingLayoutOperationCompleted(object arg) {
            if ((this.SetRiaClientDockingLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRiaClientDockingLayoutCompleted(this, new SetRiaClientDockingLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetRiaClientUserDockingLayoutTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRiaClientUserDockingLayoutTemplate(string userGuid, string rubricName, string dockingLayout, bool throwExceptions) {
            object[] results = this.Invoke("SetRiaClientUserDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        dockingLayout,
                        throwExceptions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRiaClientUserDockingLayoutTemplateAsync(string userGuid, string rubricName, string dockingLayout, bool throwExceptions) {
            this.SetRiaClientUserDockingLayoutTemplateAsync(userGuid, rubricName, dockingLayout, throwExceptions, null);
        }
        
        /// <remarks/>
        public void SetRiaClientUserDockingLayoutTemplateAsync(string userGuid, string rubricName, string dockingLayout, bool throwExceptions, object userState) {
            if ((this.SetRiaClientUserDockingLayoutTemplateOperationCompleted == null)) {
                this.SetRiaClientUserDockingLayoutTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRiaClientUserDockingLayoutTemplateOperationCompleted);
            }
            this.InvokeAsync("SetRiaClientUserDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        dockingLayout,
                        throwExceptions}, this.SetRiaClientUserDockingLayoutTemplateOperationCompleted, userState);
        }
        
        private void OnSetRiaClientUserDockingLayoutTemplateOperationCompleted(object arg) {
            if ((this.SetRiaClientUserDockingLayoutTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRiaClientUserDockingLayoutTemplateCompleted(this, new SetRiaClientUserDockingLayoutTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetRiaClientUrlIntegrationDockingLayoutTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRiaClientUrlIntegrationDockingLayoutTemplate(string userGuid, string rubricName, string templateName, string dockingLayout, bool throwExceptions) {
            object[] results = this.Invoke("SetRiaClientUrlIntegrationDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        templateName,
                        dockingLayout,
                        throwExceptions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRiaClientUrlIntegrationDockingLayoutTemplateAsync(string userGuid, string rubricName, string templateName, string dockingLayout, bool throwExceptions) {
            this.SetRiaClientUrlIntegrationDockingLayoutTemplateAsync(userGuid, rubricName, templateName, dockingLayout, throwExceptions, null);
        }
        
        /// <remarks/>
        public void SetRiaClientUrlIntegrationDockingLayoutTemplateAsync(string userGuid, string rubricName, string templateName, string dockingLayout, bool throwExceptions, object userState) {
            if ((this.SetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted == null)) {
                this.SetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted);
            }
            this.InvokeAsync("SetRiaClientUrlIntegrationDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        templateName,
                        dockingLayout,
                        throwExceptions}, this.SetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted, userState);
        }
        
        private void OnSetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted(object arg) {
            if ((this.SetRiaClientUrlIntegrationDockingLayoutTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRiaClientUrlIntegrationDockingLayoutTemplateCompleted(this, new SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetRiaClientUrlIntegrationDockingLayoutTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRiaClientUrlIntegrationDockingLayoutTemplate(string userGuid, string rubricName, string templateName) {
            object[] results = this.Invoke("GetRiaClientUrlIntegrationDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        templateName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRiaClientUrlIntegrationDockingLayoutTemplateAsync(string userGuid, string rubricName, string templateName) {
            this.GetRiaClientUrlIntegrationDockingLayoutTemplateAsync(userGuid, rubricName, templateName, null);
        }
        
        /// <remarks/>
        public void GetRiaClientUrlIntegrationDockingLayoutTemplateAsync(string userGuid, string rubricName, string templateName, object userState) {
            if ((this.GetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted == null)) {
                this.GetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted);
            }
            this.InvokeAsync("GetRiaClientUrlIntegrationDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName,
                        templateName}, this.GetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted, userState);
        }
        
        private void OnGetRiaClientUrlIntegrationDockingLayoutTemplateOperationCompleted(object arg) {
            if ((this.GetRiaClientUrlIntegrationDockingLayoutTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRiaClientUrlIntegrationDockingLayoutTemplateCompleted(this, new GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetRiaClientUserDockingLayoutTemplate", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRiaClientUserDockingLayoutTemplate(string userGuid, string rubricName) {
            object[] results = this.Invoke("GetRiaClientUserDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRiaClientUserDockingLayoutTemplateAsync(string userGuid, string rubricName) {
            this.GetRiaClientUserDockingLayoutTemplateAsync(userGuid, rubricName, null);
        }
        
        /// <remarks/>
        public void GetRiaClientUserDockingLayoutTemplateAsync(string userGuid, string rubricName, object userState) {
            if ((this.GetRiaClientUserDockingLayoutTemplateOperationCompleted == null)) {
                this.GetRiaClientUserDockingLayoutTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRiaClientUserDockingLayoutTemplateOperationCompleted);
            }
            this.InvokeAsync("GetRiaClientUserDockingLayoutTemplate", new object[] {
                        userGuid,
                        rubricName}, this.GetRiaClientUserDockingLayoutTemplateOperationCompleted, userState);
        }
        
        private void OnGetRiaClientUserDockingLayoutTemplateOperationCompleted(object arg) {
            if ((this.GetRiaClientUserDockingLayoutTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRiaClientUserDockingLayoutTemplateCompleted(this, new GetRiaClientUserDockingLayoutTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/StartUpload", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartUpload(string userGuid, string fileName, long totalFileSize) {
            object[] results = this.Invoke("StartUpload", new object[] {
                        userGuid,
                        fileName,
                        totalFileSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartUploadAsync(string userGuid, string fileName, long totalFileSize) {
            this.StartUploadAsync(userGuid, fileName, totalFileSize, null);
        }
        
        /// <remarks/>
        public void StartUploadAsync(string userGuid, string fileName, long totalFileSize, object userState) {
            if ((this.StartUploadOperationCompleted == null)) {
                this.StartUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartUploadOperationCompleted);
            }
            this.InvokeAsync("StartUpload", new object[] {
                        userGuid,
                        fileName,
                        totalFileSize}, this.StartUploadOperationCompleted, userState);
        }
        
        private void OnStartUploadOperationCompleted(object arg) {
            if ((this.StartUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartUploadCompleted(this, new StartUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UploadChunk", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long UploadChunk(string userGuid, string transactionID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long offset) {
            object[] results = this.Invoke("UploadChunk", new object[] {
                        userGuid,
                        transactionID,
                        buffer,
                        offset});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void UploadChunkAsync(string userGuid, string transactionID, byte[] buffer, long offset) {
            this.UploadChunkAsync(userGuid, transactionID, buffer, offset, null);
        }
        
        /// <remarks/>
        public void UploadChunkAsync(string userGuid, string transactionID, byte[] buffer, long offset, object userState) {
            if ((this.UploadChunkOperationCompleted == null)) {
                this.UploadChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadChunkOperationCompleted);
            }
            this.InvokeAsync("UploadChunk", new object[] {
                        userGuid,
                        transactionID,
                        buffer,
                        offset}, this.UploadChunkOperationCompleted, userState);
        }
        
        private void OnUploadChunkOperationCompleted(object arg) {
            if ((this.UploadChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadChunkCompleted(this, new UploadChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public STransaction GetTransaction(string userGuid, string transactionID) {
            object[] results = this.Invoke("GetTransaction", new object[] {
                        userGuid,
                        transactionID});
            return ((STransaction)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionAsync(string userGuid, string transactionID) {
            this.GetTransactionAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void GetTransactionAsync(string userGuid, string transactionID, object userState) {
            if ((this.GetTransactionOperationCompleted == null)) {
                this.GetTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionOperationCompleted);
            }
            this.InvokeAsync("GetTransaction", new object[] {
                        userGuid,
                        transactionID}, this.GetTransactionOperationCompleted, userState);
        }
        
        private void OnGetTransactionOperationCompleted(object arg) {
            if ((this.GetTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionCompleted(this, new GetTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetTransactionState", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransactionState GetTransactionState(string userGuid, string transactionID) {
            object[] results = this.Invoke("GetTransactionState", new object[] {
                        userGuid,
                        transactionID});
            return ((TransactionState)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionStateAsync(string userGuid, string transactionID) {
            this.GetTransactionStateAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void GetTransactionStateAsync(string userGuid, string transactionID, object userState) {
            if ((this.GetTransactionStateOperationCompleted == null)) {
                this.GetTransactionStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionStateOperationCompleted);
            }
            this.InvokeAsync("GetTransactionState", new object[] {
                        userGuid,
                        transactionID}, this.GetTransactionStateOperationCompleted, userState);
        }
        
        private void OnGetTransactionStateOperationCompleted(object arg) {
            if ((this.GetTransactionStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionStateCompleted(this, new GetTransactionStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EndUpload", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EndUpload(string userGuid, string transactionID) {
            object[] results = this.Invoke("EndUpload", new object[] {
                        userGuid,
                        transactionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EndUploadAsync(string userGuid, string transactionID) {
            this.EndUploadAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void EndUploadAsync(string userGuid, string transactionID, object userState) {
            if ((this.EndUploadOperationCompleted == null)) {
                this.EndUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndUploadOperationCompleted);
            }
            this.InvokeAsync("EndUpload", new object[] {
                        userGuid,
                        transactionID}, this.EndUploadOperationCompleted, userState);
        }
        
        private void OnEndUploadOperationCompleted(object arg) {
            if ((this.EndUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndUploadCompleted(this, new EndUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteTransaction", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTransaction(string userGuid, string transactionID) {
            object[] results = this.Invoke("DeleteTransaction", new object[] {
                        userGuid,
                        transactionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTransactionAsync(string userGuid, string transactionID) {
            this.DeleteTransactionAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void DeleteTransactionAsync(string userGuid, string transactionID, object userState) {
            if ((this.DeleteTransactionOperationCompleted == null)) {
                this.DeleteTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTransactionOperationCompleted);
            }
            this.InvokeAsync("DeleteTransaction", new object[] {
                        userGuid,
                        transactionID}, this.DeleteTransactionOperationCompleted, userState);
        }
        
        private void OnDeleteTransactionOperationCompleted(object arg) {
            if ((this.DeleteTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTransactionCompleted(this, new DeleteTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CancelUpload", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelUpload(string userGuid, string transactionID) {
            object[] results = this.Invoke("CancelUpload", new object[] {
                        userGuid,
                        transactionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelUploadAsync(string userGuid, string transactionID) {
            this.CancelUploadAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void CancelUploadAsync(string userGuid, string transactionID, object userState) {
            if ((this.CancelUploadOperationCompleted == null)) {
                this.CancelUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelUploadOperationCompleted);
            }
            this.InvokeAsync("CancelUpload", new object[] {
                        userGuid,
                        transactionID}, this.CancelUploadOperationCompleted, userState);
        }
        
        private void OnCancelUploadOperationCompleted(object arg) {
            if ((this.CancelUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelUploadCompleted(this, new CancelUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetMaxRequestLength", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetMaxRequestLength() {
            object[] results = this.Invoke("GetMaxRequestLength", new object[0]);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync() {
            this.GetMaxRequestLengthAsync(null);
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync(object userState) {
            if ((this.GetMaxRequestLengthOperationCompleted == null)) {
                this.GetMaxRequestLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxRequestLengthOperationCompleted);
            }
            this.InvokeAsync("GetMaxRequestLength", new object[0], this.GetMaxRequestLengthOperationCompleted, userState);
        }
        
        private void OnGetMaxRequestLengthOperationCompleted(object arg) {
            if ((this.GetMaxRequestLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxRequestLengthCompleted(this, new GetMaxRequestLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetCurrentUploadOffset", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCurrentUploadOffset(string userGuid, string transactionID) {
            object[] results = this.Invoke("GetCurrentUploadOffset", new object[] {
                        userGuid,
                        transactionID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentUploadOffsetAsync(string userGuid, string transactionID) {
            this.GetCurrentUploadOffsetAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void GetCurrentUploadOffsetAsync(string userGuid, string transactionID, object userState) {
            if ((this.GetCurrentUploadOffsetOperationCompleted == null)) {
                this.GetCurrentUploadOffsetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentUploadOffsetOperationCompleted);
            }
            this.InvokeAsync("GetCurrentUploadOffset", new object[] {
                        userGuid,
                        transactionID}, this.GetCurrentUploadOffsetOperationCompleted, userState);
        }
        
        private void OnGetCurrentUploadOffsetOperationCompleted(object arg) {
            if ((this.GetCurrentUploadOffsetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentUploadOffsetCompleted(this, new GetCurrentUploadOffsetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DownloadChunk", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadChunk(string userGuid, string transactionID, long offset, long chunkSize, out long nextOffset) {
            object[] results = this.Invoke("DownloadChunk", new object[] {
                        userGuid,
                        transactionID,
                        offset,
                        chunkSize});
            nextOffset = ((long)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string userGuid, string transactionID, long offset, long chunkSize) {
            this.DownloadChunkAsync(userGuid, transactionID, offset, chunkSize, null);
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string userGuid, string transactionID, long offset, long chunkSize, object userState) {
            if ((this.DownloadChunkOperationCompleted == null)) {
                this.DownloadChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadChunkOperationCompleted);
            }
            this.InvokeAsync("DownloadChunk", new object[] {
                        userGuid,
                        transactionID,
                        offset,
                        chunkSize}, this.DownloadChunkOperationCompleted, userState);
        }
        
        private void OnDownloadChunkOperationCompleted(object arg) {
            if ((this.DownloadChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadChunkCompleted(this, new DownloadChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EndDownload", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EndDownload(string userGuid, string transactionID) {
            object[] results = this.Invoke("EndDownload", new object[] {
                        userGuid,
                        transactionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EndDownloadAsync(string userGuid, string transactionID) {
            this.EndDownloadAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void EndDownloadAsync(string userGuid, string transactionID, object userState) {
            if ((this.EndDownloadOperationCompleted == null)) {
                this.EndDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndDownloadOperationCompleted);
            }
            this.InvokeAsync("EndDownload", new object[] {
                        userGuid,
                        transactionID}, this.EndDownloadOperationCompleted, userState);
        }
        
        private void OnEndDownloadOperationCompleted(object arg) {
            if ((this.EndDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndDownloadCompleted(this, new EndDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CancelDownload", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelDownload(string userGuid, string transactionID) {
            object[] results = this.Invoke("CancelDownload", new object[] {
                        userGuid,
                        transactionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelDownloadAsync(string userGuid, string transactionID) {
            this.CancelDownloadAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void CancelDownloadAsync(string userGuid, string transactionID, object userState) {
            if ((this.CancelDownloadOperationCompleted == null)) {
                this.CancelDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelDownloadOperationCompleted);
            }
            this.InvokeAsync("CancelDownload", new object[] {
                        userGuid,
                        transactionID}, this.CancelDownloadOperationCompleted, userState);
        }
        
        private void OnCancelDownloadOperationCompleted(object arg) {
            if ((this.CancelDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelDownloadCompleted(this, new CancelDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetCurrentDownloadOffset", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCurrentDownloadOffset(string userGuid, string transactionID) {
            object[] results = this.Invoke("GetCurrentDownloadOffset", new object[] {
                        userGuid,
                        transactionID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentDownloadOffsetAsync(string userGuid, string transactionID) {
            this.GetCurrentDownloadOffsetAsync(userGuid, transactionID, null);
        }
        
        /// <remarks/>
        public void GetCurrentDownloadOffsetAsync(string userGuid, string transactionID, object userState) {
            if ((this.GetCurrentDownloadOffsetOperationCompleted == null)) {
                this.GetCurrentDownloadOffsetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentDownloadOffsetOperationCompleted);
            }
            this.InvokeAsync("GetCurrentDownloadOffset", new object[] {
                        userGuid,
                        transactionID}, this.GetCurrentDownloadOffsetOperationCompleted, userState);
        }
        
        private void OnGetCurrentDownloadOffsetOperationCompleted(object arg) {
            if ((this.GetCurrentDownloadOffsetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentDownloadOffsetCompleted(this, new GetCurrentDownloadOffsetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Logon", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Logon(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("Logon", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture) {
            this.LogonAsync(serverName, serverPort, tenantName, userName, userPassword, domain, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void LogonAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture, object userState) {
            if ((this.LogonOperationCompleted == null)) {
                this.LogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonOperationCompleted);
            }
            this.InvokeAsync("Logon", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        currentCulture,
                        currentUICulture}, this.LogonOperationCompleted, userState);
        }
        
        private void OnLogonOperationCompleted(object arg) {
            if ((this.LogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonCompleted(this, new LogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonForApplication", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonForApplication(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture, SProduct product) {
            object[] results = this.Invoke("LogonForApplication", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        currentCulture,
                        currentUICulture,
                        product});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonForApplicationAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture, SProduct product) {
            this.LogonForApplicationAsync(serverName, serverPort, tenantName, userName, userPassword, domain, currentCulture, currentUICulture, product, null);
        }
        
        /// <remarks/>
        public void LogonForApplicationAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, string currentCulture, string currentUICulture, SProduct product, object userState) {
            if ((this.LogonForApplicationOperationCompleted == null)) {
                this.LogonForApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonForApplicationOperationCompleted);
            }
            this.InvokeAsync("LogonForApplication", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        currentCulture,
                        currentUICulture,
                        product}, this.LogonForApplicationOperationCompleted, userState);
        }
        
        private void OnLogonForApplicationOperationCompleted(object arg) {
            if ((this.LogonForApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonForApplicationCompleted(this, new LogonForApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateLogonToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateLogonToken(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, int tokenLifeTime, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateLogonToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        tokenLifeTime,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateLogonTokenAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, int tokenLifeTime, string currentCulture, string currentUICulture) {
            this.CreateLogonTokenAsync(serverName, serverPort, tenantName, userName, userPassword, domain, tokenLifeTime, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateLogonTokenAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, int tokenLifeTime, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateLogonTokenOperationCompleted == null)) {
                this.CreateLogonTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLogonTokenOperationCompleted);
            }
            this.InvokeAsync("CreateLogonToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        tokenLifeTime,
                        currentCulture,
                        currentUICulture}, this.CreateLogonTokenOperationCompleted, userState);
        }
        
        private void OnCreateLogonTokenOperationCompleted(object arg) {
            if ((this.CreateLogonTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLogonTokenCompleted(this, new CreateLogonTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateADFSToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateADFSToken(string serverName, int serverPort, string tenantName, string userName, string domain, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] hashValue, int tokenLifeTime) {
            object[] results = this.Invoke("CreateADFSToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        domain,
                        hashValue,
                        tokenLifeTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateADFSTokenAsync(string serverName, int serverPort, string tenantName, string userName, string domain, byte[] hashValue, int tokenLifeTime) {
            this.CreateADFSTokenAsync(serverName, serverPort, tenantName, userName, domain, hashValue, tokenLifeTime, null);
        }
        
        /// <remarks/>
        public void CreateADFSTokenAsync(string serverName, int serverPort, string tenantName, string userName, string domain, byte[] hashValue, int tokenLifeTime, object userState) {
            if ((this.CreateADFSTokenOperationCompleted == null)) {
                this.CreateADFSTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateADFSTokenOperationCompleted);
            }
            this.InvokeAsync("CreateADFSToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        domain,
                        hashValue,
                        tokenLifeTime}, this.CreateADFSTokenOperationCompleted, userState);
        }
        
        private void OnCreateADFSTokenOperationCompleted(object arg) {
            if ((this.CreateADFSTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateADFSTokenCompleted(this, new CreateADFSTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateApplicationToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateApplicationToken(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] hashValue, string applicationID, int tokenLifeTime) {
            object[] results = this.Invoke("CreateApplicationToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        hashValue,
                        applicationID,
                        tokenLifeTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateApplicationTokenAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, byte[] hashValue, string applicationID, int tokenLifeTime) {
            this.CreateApplicationTokenAsync(serverName, serverPort, tenantName, userName, userPassword, domain, hashValue, applicationID, tokenLifeTime, null);
        }
        
        /// <remarks/>
        public void CreateApplicationTokenAsync(string serverName, int serverPort, string tenantName, string userName, string userPassword, string domain, byte[] hashValue, string applicationID, int tokenLifeTime, object userState) {
            if ((this.CreateApplicationTokenOperationCompleted == null)) {
                this.CreateApplicationTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateApplicationTokenOperationCompleted);
            }
            this.InvokeAsync("CreateApplicationToken", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        userName,
                        userPassword,
                        domain,
                        hashValue,
                        applicationID,
                        tokenLifeTime}, this.CreateApplicationTokenOperationCompleted, userState);
        }
        
        private void OnCreateApplicationTokenOperationCompleted(object arg) {
            if ((this.CreateApplicationTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateApplicationTokenCompleted(this, new CreateApplicationTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonForApplicationWithToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonForApplicationWithToken(string tokenString, SProduct product, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("LogonForApplicationWithToken", new object[] {
                        tokenString,
                        product,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonForApplicationWithTokenAsync(string tokenString, SProduct product, string currentCulture, string currentUICulture) {
            this.LogonForApplicationWithTokenAsync(tokenString, product, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void LogonForApplicationWithTokenAsync(string tokenString, SProduct product, string currentCulture, string currentUICulture, object userState) {
            if ((this.LogonForApplicationWithTokenOperationCompleted == null)) {
                this.LogonForApplicationWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonForApplicationWithTokenOperationCompleted);
            }
            this.InvokeAsync("LogonForApplicationWithToken", new object[] {
                        tokenString,
                        product,
                        currentCulture,
                        currentUICulture}, this.LogonForApplicationWithTokenOperationCompleted, userState);
        }
        
        private void OnLogonForApplicationWithTokenOperationCompleted(object arg) {
            if ((this.LogonForApplicationWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonForApplicationWithTokenCompleted(this, new LogonForApplicationWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonWithToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonWithToken(string tokenString, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("LogonWithToken", new object[] {
                        tokenString,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonWithTokenAsync(string tokenString, string currentCulture, string currentUICulture) {
            this.LogonWithTokenAsync(tokenString, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void LogonWithTokenAsync(string tokenString, string currentCulture, string currentUICulture, object userState) {
            if ((this.LogonWithTokenOperationCompleted == null)) {
                this.LogonWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonWithTokenOperationCompleted);
            }
            this.InvokeAsync("LogonWithToken", new object[] {
                        tokenString,
                        currentCulture,
                        currentUICulture}, this.LogonWithTokenOperationCompleted, userState);
        }
        
        private void OnLogonWithTokenOperationCompleted(object arg) {
            if ((this.LogonWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonWithTokenCompleted(this, new LogonWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonWithApplicationToken", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonWithApplicationToken(string tokenString, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("LogonWithApplicationToken", new object[] {
                        tokenString,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonWithApplicationTokenAsync(string tokenString, string currentCulture, string currentUICulture) {
            this.LogonWithApplicationTokenAsync(tokenString, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void LogonWithApplicationTokenAsync(string tokenString, string currentCulture, string currentUICulture, object userState) {
            if ((this.LogonWithApplicationTokenOperationCompleted == null)) {
                this.LogonWithApplicationTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonWithApplicationTokenOperationCompleted);
            }
            this.InvokeAsync("LogonWithApplicationToken", new object[] {
                        tokenString,
                        currentCulture,
                        currentUICulture}, this.LogonWithApplicationTokenOperationCompleted, userState);
        }
        
        private void OnLogonWithApplicationTokenOperationCompleted(object arg) {
            if ((this.LogonWithApplicationTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonWithApplicationTokenCompleted(this, new LogonWithApplicationTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonWithSingleSignOn", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonWithSingleSignOn(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("LogonWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture) {
            this.LogonWithSingleSignOnAsync(serverName, serverPort, tenantName, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void LogonWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture, object userState) {
            if ((this.LogonWithSingleSignOnOperationCompleted == null)) {
                this.LogonWithSingleSignOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonWithSingleSignOnOperationCompleted);
            }
            this.InvokeAsync("LogonWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        currentCulture,
                        currentUICulture}, this.LogonWithSingleSignOnOperationCompleted, userState);
        }
        
        private void OnLogonWithSingleSignOnOperationCompleted(object arg) {
            if ((this.LogonWithSingleSignOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonWithSingleSignOnCompleted(this, new LogonWithSingleSignOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/LogonForApplicationWithSingleSignOn", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogonForApplicationWithSingleSignOn(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture, SProduct product) {
            object[] results = this.Invoke("LogonForApplicationWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        currentCulture,
                        currentUICulture,
                        product});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonForApplicationWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture, SProduct product) {
            this.LogonForApplicationWithSingleSignOnAsync(serverName, serverPort, tenantName, currentCulture, currentUICulture, product, null);
        }
        
        /// <remarks/>
        public void LogonForApplicationWithSingleSignOnAsync(string serverName, int serverPort, string tenantName, string currentCulture, string currentUICulture, SProduct product, object userState) {
            if ((this.LogonForApplicationWithSingleSignOnOperationCompleted == null)) {
                this.LogonForApplicationWithSingleSignOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonForApplicationWithSingleSignOnOperationCompleted);
            }
            this.InvokeAsync("LogonForApplicationWithSingleSignOn", new object[] {
                        serverName,
                        serverPort,
                        tenantName,
                        currentCulture,
                        currentUICulture,
                        product}, this.LogonForApplicationWithSingleSignOnOperationCompleted, userState);
        }
        
        private void OnLogonForApplicationWithSingleSignOnOperationCompleted(object arg) {
            if ((this.LogonForApplicationWithSingleSignOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonForApplicationWithSingleSignOnCompleted(this, new LogonForApplicationWithSingleSignOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Logoff", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logoff(string userGuid) {
            this.Invoke("Logoff", new object[] {
                        userGuid});
        }
        
        /// <remarks/>
        public void LogoffAsync(string userGuid) {
            this.LogoffAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void LogoffAsync(string userGuid, object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[] {
                        userGuid}, this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SDocument GetProperties(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView) {
            object[] results = this.Invoke("GetProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        editMode,
                        forView});
            return ((SDocument)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertiesAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView) {
            this.GetPropertiesAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, editMode, forView, null);
        }
        
        /// <remarks/>
        public void GetPropertiesAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView, object userState) {
            if ((this.GetPropertiesOperationCompleted == null)) {
                this.GetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture,
                        editMode,
                        forView}, this.GetPropertiesOperationCompleted, userState);
        }
        
        private void OnGetPropertiesOperationCompleted(object arg) {
            if ((this.GetPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertiesCompleted(this, new GetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetVersionProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SDocument GetVersionProperties(string userGuid, string documentID, string storeID, string versionID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView) {
            object[] results = this.Invoke("GetVersionProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        currentCulture,
                        currentUICulture,
                        editMode,
                        forView});
            return ((SDocument)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionPropertiesAsync(string userGuid, string documentID, string storeID, string versionID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView) {
            this.GetVersionPropertiesAsync(userGuid, documentID, storeID, versionID, currentCulture, currentUICulture, editMode, forView, null);
        }
        
        /// <remarks/>
        public void GetVersionPropertiesAsync(string userGuid, string documentID, string storeID, string versionID, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, bool forView, object userState) {
            if ((this.GetVersionPropertiesOperationCompleted == null)) {
                this.GetVersionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetVersionProperties", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID,
                        currentCulture,
                        currentUICulture,
                        editMode,
                        forView}, this.GetVersionPropertiesOperationCompleted, userState);
        }
        
        private void OnGetVersionPropertiesOperationCompleted(object arg) {
            if ((this.GetVersionPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionPropertiesCompleted(this, new GetVersionPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentActionsAllowed", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SActionsAllowed GetDocumentActionsAllowed(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("GetDocumentActionsAllowed", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((SActionsAllowed)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentActionsAllowedAsync(string userGuid, string documentID, string storeID) {
            this.GetDocumentActionsAllowedAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetDocumentActionsAllowedAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetDocumentActionsAllowedOperationCompleted == null)) {
                this.GetDocumentActionsAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentActionsAllowedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentActionsAllowed", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetDocumentActionsAllowedOperationCompleted, userState);
        }
        
        private void OnGetDocumentActionsAllowedOperationCompleted(object arg) {
            if ((this.GetDocumentActionsAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentActionsAllowedCompleted(this, new GetDocumentActionsAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetProcessActionsAllowed", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetProcessActionsAllowed(string userGuid, string processID) {
            object[] results = this.Invoke("GetProcessActionsAllowed", new object[] {
                        userGuid,
                        processID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessActionsAllowedAsync(string userGuid, string processID) {
            this.GetProcessActionsAllowedAsync(userGuid, processID, null);
        }
        
        /// <remarks/>
        public void GetProcessActionsAllowedAsync(string userGuid, string processID, object userState) {
            if ((this.GetProcessActionsAllowedOperationCompleted == null)) {
                this.GetProcessActionsAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessActionsAllowedOperationCompleted);
            }
            this.InvokeAsync("GetProcessActionsAllowed", new object[] {
                        userGuid,
                        processID}, this.GetProcessActionsAllowedOperationCompleted, userState);
        }
        
        private void OnGetProcessActionsAllowedOperationCompleted(object arg) {
            if ((this.GetProcessActionsAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessActionsAllowedCompleted(this, new GetProcessActionsAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetFolderActionsAllowed", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFolderActionsAllowed(string userGuid, string folderPath, string schemaLanguage) {
            object[] results = this.Invoke("GetFolderActionsAllowed", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderActionsAllowedAsync(string userGuid, string folderPath, string schemaLanguage) {
            this.GetFolderActionsAllowedAsync(userGuid, folderPath, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void GetFolderActionsAllowedAsync(string userGuid, string folderPath, string schemaLanguage, object userState) {
            if ((this.GetFolderActionsAllowedOperationCompleted == null)) {
                this.GetFolderActionsAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderActionsAllowedOperationCompleted);
            }
            this.InvokeAsync("GetFolderActionsAllowed", new object[] {
                        userGuid,
                        folderPath,
                        schemaLanguage}, this.GetFolderActionsAllowedOperationCompleted, userState);
        }
        
        private void OnGetFolderActionsAllowedOperationCompleted(object arg) {
            if ((this.GetFolderActionsAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderActionsAllowedCompleted(this, new GetFolderActionsAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetDocumentAnnotations", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentAnnotations(string userGuid, string documentID, string storeID, string versionID) {
            object[] results = this.Invoke("GetDocumentAnnotations", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentAnnotationsAsync(string userGuid, string documentID, string storeID, string versionID) {
            this.GetDocumentAnnotationsAsync(userGuid, documentID, storeID, versionID, null);
        }
        
        /// <remarks/>
        public void GetDocumentAnnotationsAsync(string userGuid, string documentID, string storeID, string versionID, object userState) {
            if ((this.GetDocumentAnnotationsOperationCompleted == null)) {
                this.GetDocumentAnnotationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentAnnotationsOperationCompleted);
            }
            this.InvokeAsync("GetDocumentAnnotations", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        versionID}, this.GetDocumentAnnotationsOperationCompleted, userState);
        }
        
        private void OnGetDocumentAnnotationsOperationCompleted(object arg) {
            if ((this.GetDocumentAnnotationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentAnnotationsCompleted(this, new GetDocumentAnnotationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/MoveDocumentToInfoStore", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MoveDocumentToInfoStore(string userGuid, string documentID, string storeID, string targetStoreID) {
            object[] results = this.Invoke("MoveDocumentToInfoStore", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        targetStoreID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveDocumentToInfoStoreAsync(string userGuid, string documentID, string storeID, string targetStoreID) {
            this.MoveDocumentToInfoStoreAsync(userGuid, documentID, storeID, targetStoreID, null);
        }
        
        /// <remarks/>
        public void MoveDocumentToInfoStoreAsync(string userGuid, string documentID, string storeID, string targetStoreID, object userState) {
            if ((this.MoveDocumentToInfoStoreOperationCompleted == null)) {
                this.MoveDocumentToInfoStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveDocumentToInfoStoreOperationCompleted);
            }
            this.InvokeAsync("MoveDocumentToInfoStore", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        targetStoreID}, this.MoveDocumentToInfoStoreOperationCompleted, userState);
        }
        
        private void OnMoveDocumentToInfoStoreOperationCompleted(object arg) {
            if ((this.MoveDocumentToInfoStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveDocumentToInfoStoreCompleted(this, new MoveDocumentToInfoStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetFilingCabinetPaths", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFilingCabinetPaths(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("GetFilingCabinetPaths", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilingCabinetPathsAsync(string userGuid, string documentID, string storeID) {
            this.GetFilingCabinetPathsAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetFilingCabinetPathsAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetFilingCabinetPathsOperationCompleted == null)) {
                this.GetFilingCabinetPathsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilingCabinetPathsOperationCompleted);
            }
            this.InvokeAsync("GetFilingCabinetPaths", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetFilingCabinetPathsOperationCompleted, userState);
        }
        
        private void OnGetFilingCabinetPathsOperationCompleted(object arg) {
            if ((this.GetFilingCabinetPathsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilingCabinetPathsCompleted(this, new GetFilingCabinetPathsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetBlogList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SBlogEntry[] GetBlogList(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetBlogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture});
            return ((SBlogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBlogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture) {
            this.GetBlogListAsync(userGuid, documentID, storeID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetBlogListAsync(string userGuid, string documentID, string storeID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetBlogListOperationCompleted == null)) {
                this.GetBlogListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlogListOperationCompleted);
            }
            this.InvokeAsync("GetBlogList", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        currentCulture,
                        currentUICulture}, this.GetBlogListOperationCompleted, userState);
        }
        
        private void OnGetBlogListOperationCompleted(object arg) {
            if ((this.GetBlogListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlogListCompleted(this, new GetBlogListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/AddBlog", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddBlog(string userGuid, string documentID, string storeID, string formatCulture, string schemaCulture, string blogText) {
            this.Invoke("AddBlog", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        formatCulture,
                        schemaCulture,
                        blogText});
        }
        
        /// <remarks/>
        public void AddBlogAsync(string userGuid, string documentID, string storeID, string formatCulture, string schemaCulture, string blogText) {
            this.AddBlogAsync(userGuid, documentID, storeID, formatCulture, schemaCulture, blogText, null);
        }
        
        /// <remarks/>
        public void AddBlogAsync(string userGuid, string documentID, string storeID, string formatCulture, string schemaCulture, string blogText, object userState) {
            if ((this.AddBlogOperationCompleted == null)) {
                this.AddBlogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBlogOperationCompleted);
            }
            this.InvokeAsync("AddBlog", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        formatCulture,
                        schemaCulture,
                        blogText}, this.AddBlogOperationCompleted, userState);
        }
        
        private void OnAddBlogOperationCompleted(object arg) {
            if ((this.AddBlogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBlogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SaveDocumentAnnotations", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveDocumentAnnotations(string userGuid, string documentID, string storeID, string annotationsAsXml, bool checkInDocumentOnSuccess) {
            object[] results = this.Invoke("SaveDocumentAnnotations", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        annotationsAsXml,
                        checkInDocumentOnSuccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveDocumentAnnotationsAsync(string userGuid, string documentID, string storeID, string annotationsAsXml, bool checkInDocumentOnSuccess) {
            this.SaveDocumentAnnotationsAsync(userGuid, documentID, storeID, annotationsAsXml, checkInDocumentOnSuccess, null);
        }
        
        /// <remarks/>
        public void SaveDocumentAnnotationsAsync(string userGuid, string documentID, string storeID, string annotationsAsXml, bool checkInDocumentOnSuccess, object userState) {
            if ((this.SaveDocumentAnnotationsOperationCompleted == null)) {
                this.SaveDocumentAnnotationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDocumentAnnotationsOperationCompleted);
            }
            this.InvokeAsync("SaveDocumentAnnotations", new object[] {
                        userGuid,
                        documentID,
                        storeID,
                        annotationsAsXml,
                        checkInDocumentOnSuccess}, this.SaveDocumentAnnotationsOperationCompleted, userState);
        }
        
        private void OnSaveDocumentAnnotationsOperationCompleted(object arg) {
            if ((this.SaveDocumentAnnotationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDocumentAnnotationsCompleted(this, new SaveDocumentAnnotationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GarbageCollector", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GarbageCollector() {
            this.Invoke("GarbageCollector", new object[0]);
        }
        
        /// <remarks/>
        public void GarbageCollectorAsync() {
            this.GarbageCollectorAsync(null);
        }
        
        /// <remarks/>
        public void GarbageCollectorAsync(object userState) {
            if ((this.GarbageCollectorOperationCompleted == null)) {
                this.GarbageCollectorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGarbageCollectorOperationCompleted);
            }
            this.InvokeAsync("GarbageCollector", new object[0], this.GarbageCollectorOperationCompleted, userState);
        }
        
        private void OnGarbageCollectorOperationCompleted(object arg) {
            if ((this.GarbageCollectorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GarbageCollectorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CurrentOpenConnections", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CurrentOpenConnections() {
            object[] results = this.Invoke("CurrentOpenConnections", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CurrentOpenConnectionsAsync() {
            this.CurrentOpenConnectionsAsync(null);
        }
        
        /// <remarks/>
        public void CurrentOpenConnectionsAsync(object userState) {
            if ((this.CurrentOpenConnectionsOperationCompleted == null)) {
                this.CurrentOpenConnectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCurrentOpenConnectionsOperationCompleted);
            }
            this.InvokeAsync("CurrentOpenConnections", new object[0], this.CurrentOpenConnectionsOperationCompleted, userState);
        }
        
        private void OnCurrentOpenConnectionsOperationCompleted(object arg) {
            if ((this.CurrentOpenConnectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CurrentOpenConnectionsCompleted(this, new CurrentOpenConnectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CurrentOpenIdleConnectionCount", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CurrentOpenIdleConnectionCount() {
            object[] results = this.Invoke("CurrentOpenIdleConnectionCount", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CurrentOpenIdleConnectionCountAsync() {
            this.CurrentOpenIdleConnectionCountAsync(null);
        }
        
        /// <remarks/>
        public void CurrentOpenIdleConnectionCountAsync(object userState) {
            if ((this.CurrentOpenIdleConnectionCountOperationCompleted == null)) {
                this.CurrentOpenIdleConnectionCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCurrentOpenIdleConnectionCountOperationCompleted);
            }
            this.InvokeAsync("CurrentOpenIdleConnectionCount", new object[0], this.CurrentOpenIdleConnectionCountOperationCompleted, userState);
        }
        
        private void OnCurrentOpenIdleConnectionCountOperationCompleted(object arg) {
            if ((this.CurrentOpenIdleConnectionCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CurrentOpenIdleConnectionCountCompleted(this, new CurrentOpenIdleConnectionCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CurrentStoredUsers", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CurrentStoredUsers() {
            object[] results = this.Invoke("CurrentStoredUsers", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CurrentStoredUsersAsync() {
            this.CurrentStoredUsersAsync(null);
        }
        
        /// <remarks/>
        public void CurrentStoredUsersAsync(object userState) {
            if ((this.CurrentStoredUsersOperationCompleted == null)) {
                this.CurrentStoredUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCurrentStoredUsersOperationCompleted);
            }
            this.InvokeAsync("CurrentStoredUsers", new object[0], this.CurrentStoredUsersOperationCompleted, userState);
        }
        
        private void OnCurrentStoredUsersOperationCompleted(object arg) {
            if ((this.CurrentStoredUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CurrentStoredUsersCompleted(this, new CurrentStoredUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CurrentOpenActiveConnections", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CurrentOpenActiveConnections() {
            object[] results = this.Invoke("CurrentOpenActiveConnections", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CurrentOpenActiveConnectionsAsync() {
            this.CurrentOpenActiveConnectionsAsync(null);
        }
        
        /// <remarks/>
        public void CurrentOpenActiveConnectionsAsync(object userState) {
            if ((this.CurrentOpenActiveConnectionsOperationCompleted == null)) {
                this.CurrentOpenActiveConnectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCurrentOpenActiveConnectionsOperationCompleted);
            }
            this.InvokeAsync("CurrentOpenActiveConnections", new object[0], this.CurrentOpenActiveConnectionsOperationCompleted, userState);
        }
        
        private void OnCurrentOpenActiveConnectionsOperationCompleted(object arg) {
            if ((this.CurrentOpenActiveConnectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CurrentOpenActiveConnectionsCompleted(this, new CurrentOpenActiveConnectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CurrentPoolSize", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CurrentPoolSize() {
            object[] results = this.Invoke("CurrentPoolSize", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CurrentPoolSizeAsync() {
            this.CurrentPoolSizeAsync(null);
        }
        
        /// <remarks/>
        public void CurrentPoolSizeAsync(object userState) {
            if ((this.CurrentPoolSizeOperationCompleted == null)) {
                this.CurrentPoolSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCurrentPoolSizeOperationCompleted);
            }
            this.InvokeAsync("CurrentPoolSize", new object[0], this.CurrentPoolSizeOperationCompleted, userState);
        }
        
        private void OnCurrentPoolSizeOperationCompleted(object arg) {
            if ((this.CurrentPoolSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CurrentPoolSizeCompleted(this, new CurrentPoolSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetUserCredentialLifetime", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserCredentialLifetime() {
            object[] results = this.Invoke("GetUserCredentialLifetime", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCredentialLifetimeAsync() {
            this.GetUserCredentialLifetimeAsync(null);
        }
        
        /// <remarks/>
        public void GetUserCredentialLifetimeAsync(object userState) {
            if ((this.GetUserCredentialLifetimeOperationCompleted == null)) {
                this.GetUserCredentialLifetimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCredentialLifetimeOperationCompleted);
            }
            this.InvokeAsync("GetUserCredentialLifetime", new object[0], this.GetUserCredentialLifetimeOperationCompleted, userState);
        }
        
        private void OnGetUserCredentialLifetimeOperationCompleted(object arg) {
            if ((this.GetUserCredentialLifetimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCredentialLifetimeCompleted(this, new GetUserCredentialLifetimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetUserInfo", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserInfoExt GetUserInfo(string userGuid) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        userGuid});
            return ((SUserInfoExt)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userGuid) {
            this.GetUserInfoAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userGuid, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        userGuid}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetUserInfoExt", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserInfoExt GetUserInfoExt(string userGuid, string formatLanguage, string schemaLanguage) {
            object[] results = this.Invoke("GetUserInfoExt", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage});
            return ((SUserInfoExt)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoExtAsync(string userGuid, string formatLanguage, string schemaLanguage) {
            this.GetUserInfoExtAsync(userGuid, formatLanguage, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void GetUserInfoExtAsync(string userGuid, string formatLanguage, string schemaLanguage, object userState) {
            if ((this.GetUserInfoExtOperationCompleted == null)) {
                this.GetUserInfoExtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoExtOperationCompleted);
            }
            this.InvokeAsync("GetUserInfoExt", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage}, this.GetUserInfoExtOperationCompleted, userState);
        }
        
        private void OnGetUserInfoExtOperationCompleted(object arg) {
            if ((this.GetUserInfoExtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoExtCompleted(this, new GetUserInfoExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetUserActionsAllowed", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserActionsAllowed GetUserActionsAllowed(string userGuid) {
            object[] results = this.Invoke("GetUserActionsAllowed", new object[] {
                        userGuid});
            return ((SUserActionsAllowed)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserActionsAllowedAsync(string userGuid) {
            this.GetUserActionsAllowedAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserActionsAllowedAsync(string userGuid, object userState) {
            if ((this.GetUserActionsAllowedOperationCompleted == null)) {
                this.GetUserActionsAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserActionsAllowedOperationCompleted);
            }
            this.InvokeAsync("GetUserActionsAllowed", new object[] {
                        userGuid}, this.GetUserActionsAllowedOperationCompleted, userState);
        }
        
        private void OnGetUserActionsAllowedOperationCompleted(object arg) {
            if ((this.GetUserActionsAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserActionsAllowedCompleted(this, new GetUserActionsAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllRoles", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SRole[] GetAllRoles(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllRoles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SRole[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetAllRolesAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllRolesOperationCompleted == null)) {
                this.GetAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllRoles", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetAllRolesOperationCompleted, userState);
        }
        
        private void OnGetAllRolesOperationCompleted(object arg) {
            if ((this.GetAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateRole", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateRole(string userGuid, string roleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateRole", new object[] {
                        userGuid,
                        roleName,
                        groupIDs,
                        userIDs,
                        protectiondDomainIDs,
                        accessOperationCategories,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string userGuid, string roleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture) {
            this.CreateRoleAsync(userGuid, roleName, groupIDs, userIDs, protectiondDomainIDs, accessOperationCategories, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string userGuid, string roleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateRoleOperationCompleted == null)) {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        userGuid,
                        roleName,
                        groupIDs,
                        userIDs,
                        protectiondDomainIDs,
                        accessOperationCategories,
                        currentCulture,
                        currentUICulture}, this.CreateRoleOperationCompleted, userState);
        }
        
        private void OnCreateRoleOperationCompleted(object arg) {
            if ((this.CreateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new CreateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditRole", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditRole(string userGuid, string roleID, string newRoleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture) {
            this.Invoke("EditRole", new object[] {
                        userGuid,
                        roleID,
                        newRoleName,
                        groupIDs,
                        userIDs,
                        protectiondDomainIDs,
                        accessOperationCategories,
                        currentCulture,
                        currentUICulture});
        }
        
        /// <remarks/>
        public void EditRoleAsync(string userGuid, string roleID, string newRoleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture) {
            this.EditRoleAsync(userGuid, roleID, newRoleName, groupIDs, userIDs, protectiondDomainIDs, accessOperationCategories, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void EditRoleAsync(string userGuid, string roleID, string newRoleName, string[] groupIDs, string[] userIDs, string[] protectiondDomainIDs, SAccessOperationCategory[] accessOperationCategories, string currentCulture, string currentUICulture, object userState) {
            if ((this.EditRoleOperationCompleted == null)) {
                this.EditRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRoleOperationCompleted);
            }
            this.InvokeAsync("EditRole", new object[] {
                        userGuid,
                        roleID,
                        newRoleName,
                        groupIDs,
                        userIDs,
                        protectiondDomainIDs,
                        accessOperationCategories,
                        currentCulture,
                        currentUICulture}, this.EditRoleOperationCompleted, userState);
        }
        
        private void OnEditRoleOperationCompleted(object arg) {
            if ((this.EditRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CopyRole", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CopyRole(string userGuid, string roleToCopyID, string newRoleName, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CopyRole", new object[] {
                        userGuid,
                        roleToCopyID,
                        newRoleName,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CopyRoleAsync(string userGuid, string roleToCopyID, string newRoleName, string currentCulture, string currentUICulture) {
            this.CopyRoleAsync(userGuid, roleToCopyID, newRoleName, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CopyRoleAsync(string userGuid, string roleToCopyID, string newRoleName, string currentCulture, string currentUICulture, object userState) {
            if ((this.CopyRoleOperationCompleted == null)) {
                this.CopyRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyRoleOperationCompleted);
            }
            this.InvokeAsync("CopyRole", new object[] {
                        userGuid,
                        roleToCopyID,
                        newRoleName,
                        currentCulture,
                        currentUICulture}, this.CopyRoleOperationCompleted, userState);
        }
        
        private void OnCopyRoleOperationCompleted(object arg) {
            if ((this.CopyRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyRoleCompleted(this, new CopyRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteRole", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRole(string userGuid, string roleToDelete) {
            this.Invoke("DeleteRole", new object[] {
                        userGuid,
                        roleToDelete});
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string userGuid, string roleToDelete) {
            this.DeleteRoleAsync(userGuid, roleToDelete, null);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string userGuid, string roleToDelete, object userState) {
            if ((this.DeleteRoleOperationCompleted == null)) {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        userGuid,
                        roleToDelete}, this.DeleteRoleOperationCompleted, userState);
        }
        
        private void OnDeleteRoleOperationCompleted(object arg) {
            if ((this.DeleteRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreateUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserInfoExt CreateUser(string userGuid, SUserInfoExt newUser, string password, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        userGuid,
                        newUser,
                        password,
                        currentCulture,
                        currentUICulture});
            return ((SUserInfoExt)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(string userGuid, SUserInfoExt newUser, string password, string currentCulture, string currentUICulture) {
            this.CreateUserAsync(userGuid, newUser, password, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(string userGuid, SUserInfoExt newUser, string password, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        userGuid,
                        newUser,
                        password,
                        currentCulture,
                        currentUICulture}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/EditUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserInfoExt EditUser(string userGuid, SUserInfoExt user, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("EditUser", new object[] {
                        userGuid,
                        user,
                        currentCulture,
                        currentUICulture});
            return ((SUserInfoExt)(results[0]));
        }
        
        /// <remarks/>
        public void EditUserAsync(string userGuid, SUserInfoExt user, string currentCulture, string currentUICulture) {
            this.EditUserAsync(userGuid, user, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void EditUserAsync(string userGuid, SUserInfoExt user, string currentCulture, string currentUICulture, object userState) {
            if ((this.EditUserOperationCompleted == null)) {
                this.EditUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditUserOperationCompleted);
            }
            this.InvokeAsync("EditUser", new object[] {
                        userGuid,
                        user,
                        currentCulture,
                        currentUICulture}, this.EditUserOperationCompleted, userState);
        }
        
        private void OnEditUserOperationCompleted(object arg) {
            if ((this.EditUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SetSearchMaskOptions", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSearchMaskOptions(string userGuid, SSearchMaskOptions searchMaskOptions, string formatCulture, string schemaLanguage) {
            this.Invoke("SetSearchMaskOptions", new object[] {
                        userGuid,
                        searchMaskOptions,
                        formatCulture,
                        schemaLanguage});
        }
        
        /// <remarks/>
        public void SetSearchMaskOptionsAsync(string userGuid, SSearchMaskOptions searchMaskOptions, string formatCulture, string schemaLanguage) {
            this.SetSearchMaskOptionsAsync(userGuid, searchMaskOptions, formatCulture, schemaLanguage, null);
        }
        
        /// <remarks/>
        public void SetSearchMaskOptionsAsync(string userGuid, SSearchMaskOptions searchMaskOptions, string formatCulture, string schemaLanguage, object userState) {
            if ((this.SetSearchMaskOptionsOperationCompleted == null)) {
                this.SetSearchMaskOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSearchMaskOptionsOperationCompleted);
            }
            this.InvokeAsync("SetSearchMaskOptions", new object[] {
                        userGuid,
                        searchMaskOptions,
                        formatCulture,
                        schemaLanguage}, this.SetSearchMaskOptionsOperationCompleted, userState);
        }
        
        private void OnSetSearchMaskOptionsOperationCompleted(object arg) {
            if ((this.SetSearchMaskOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSearchMaskOptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeleteUser", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SUserInfoExt DeleteUser(string userGuid, string userLogonName, string userID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        userGuid,
                        userLogonName,
                        userID,
                        currentCulture,
                        currentUICulture});
            return ((SUserInfoExt)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string userGuid, string userLogonName, string userID, string currentCulture, string currentUICulture) {
            this.DeleteUserAsync(userGuid, userLogonName, userID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string userGuid, string userLogonName, string userID, string currentCulture, string currentUICulture, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        userGuid,
                        userLogonName,
                        userID,
                        currentCulture,
                        currentUICulture}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllUsers", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SUserInfoExt[] GetAllUsers(string userGuid, string currentCulture, string currentUICulture, bool includeDeletedUsers) {
            object[] results = this.Invoke("GetAllUsers", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        includeDeletedUsers});
            return ((SUserInfoExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string userGuid, string currentCulture, string currentUICulture, bool includeDeletedUsers) {
            this.GetAllUsersAsync(userGuid, currentCulture, currentUICulture, includeDeletedUsers, null);
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string userGuid, string currentCulture, string currentUICulture, bool includeDeletedUsers, object userState) {
            if ((this.GetAllUsersOperationCompleted == null)) {
                this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllUsers", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        includeDeletedUsers}, this.GetAllUsersOperationCompleted, userState);
        }
        
        private void OnGetAllUsersOperationCompleted(object arg) {
            if ((this.GetAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllUsersWithRights", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SUserInfoExt[] GetAllUsersWithRights(string userGuid, string schemaLanguage, bool includeDeletedUsers, string protectionDomainName, string[] accessOperationIDs) {
            object[] results = this.Invoke("GetAllUsersWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        includeDeletedUsers,
                        protectionDomainName,
                        accessOperationIDs});
            return ((SUserInfoExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersWithRightsAsync(string userGuid, string schemaLanguage, bool includeDeletedUsers, string protectionDomainName, string[] accessOperationIDs) {
            this.GetAllUsersWithRightsAsync(userGuid, schemaLanguage, includeDeletedUsers, protectionDomainName, accessOperationIDs, null);
        }
        
        /// <remarks/>
        public void GetAllUsersWithRightsAsync(string userGuid, string schemaLanguage, bool includeDeletedUsers, string protectionDomainName, string[] accessOperationIDs, object userState) {
            if ((this.GetAllUsersWithRightsOperationCompleted == null)) {
                this.GetAllUsersWithRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersWithRightsOperationCompleted);
            }
            this.InvokeAsync("GetAllUsersWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        includeDeletedUsers,
                        protectionDomainName,
                        accessOperationIDs}, this.GetAllUsersWithRightsOperationCompleted, userState);
        }
        
        private void OnGetAllUsersWithRightsOperationCompleted(object arg) {
            if ((this.GetAllUsersWithRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersWithRightsCompleted(this, new GetAllUsersWithRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllUserGroups", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SUserGroup[] GetAllUserGroups(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetAllUserGroups", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SUserGroup[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserGroupsAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetAllUserGroupsAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetAllUserGroupsAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetAllUserGroupsOperationCompleted == null)) {
                this.GetAllUserGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllUserGroups", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetAllUserGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllUserGroupsOperationCompleted(object arg) {
            if ((this.GetAllUserGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserGroupsCompleted(this, new GetAllUserGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllUserGroupsWithRights", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SUserGroup[] GetAllUserGroupsWithRights(string userGuid, string schemaLanguage, string protectionDomainName, string[] accessOperationIDs) {
            object[] results = this.Invoke("GetAllUserGroupsWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        protectionDomainName,
                        accessOperationIDs});
            return ((SUserGroup[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserGroupsWithRightsAsync(string userGuid, string schemaLanguage, string protectionDomainName, string[] accessOperationIDs) {
            this.GetAllUserGroupsWithRightsAsync(userGuid, schemaLanguage, protectionDomainName, accessOperationIDs, null);
        }
        
        /// <remarks/>
        public void GetAllUserGroupsWithRightsAsync(string userGuid, string schemaLanguage, string protectionDomainName, string[] accessOperationIDs, object userState) {
            if ((this.GetAllUserGroupsWithRightsOperationCompleted == null)) {
                this.GetAllUserGroupsWithRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserGroupsWithRightsOperationCompleted);
            }
            this.InvokeAsync("GetAllUserGroupsWithRights", new object[] {
                        userGuid,
                        schemaLanguage,
                        protectionDomainName,
                        accessOperationIDs}, this.GetAllUserGroupsWithRightsOperationCompleted, userState);
        }
        
        private void OnGetAllUserGroupsWithRightsOperationCompleted(object arg) {
            if ((this.GetAllUserGroupsWithRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserGroupsWithRightsCompleted(this, new GetAllUserGroupsWithRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/IsLoggedIn", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsLoggedIn(string userGuid) {
            object[] results = this.Invoke("IsLoggedIn", new object[] {
                        userGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsLoggedInAsync(string userGuid) {
            this.IsLoggedInAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void IsLoggedInAsync(string userGuid, object userState) {
            if ((this.IsLoggedInOperationCompleted == null)) {
                this.IsLoggedInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLoggedInOperationCompleted);
            }
            this.InvokeAsync("IsLoggedIn", new object[] {
                        userGuid}, this.IsLoggedInOperationCompleted, userState);
        }
        
        private void OnIsLoggedInOperationCompleted(object arg) {
            if ((this.IsLoggedInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsLoggedInCompleted(this, new IsLoggedInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyTypePluginList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypePlugin[] GetPropertyTypePluginList(string userGuid, string currentCulture, string currentUICulture, bool excludeSystemOnly) {
            object[] results = this.Invoke("GetPropertyTypePluginList", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        excludeSystemOnly});
            return ((SPropertyTypePlugin[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypePluginListAsync(string userGuid, string currentCulture, string currentUICulture, bool excludeSystemOnly) {
            this.GetPropertyTypePluginListAsync(userGuid, currentCulture, currentUICulture, excludeSystemOnly, null);
        }
        
        /// <remarks/>
        public void GetPropertyTypePluginListAsync(string userGuid, string currentCulture, string currentUICulture, bool excludeSystemOnly, object userState) {
            if ((this.GetPropertyTypePluginListOperationCompleted == null)) {
                this.GetPropertyTypePluginListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypePluginListOperationCompleted);
            }
            this.InvokeAsync("GetPropertyTypePluginList", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        excludeSystemOnly}, this.GetPropertyTypePluginListOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypePluginListOperationCompleted(object arg) {
            if ((this.GetPropertyTypePluginListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypePluginListCompleted(this, new GetPropertyTypePluginListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CreatePropertyType", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreatePropertyType(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CreatePropertyType", new object[] {
                        userGuid,
                        propertyType,
                        currentCulture,
                        currentUICulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePropertyTypeAsync(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture) {
            this.CreatePropertyTypeAsync(userGuid, propertyType, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CreatePropertyTypeAsync(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture, object userState) {
            if ((this.CreatePropertyTypeOperationCompleted == null)) {
                this.CreatePropertyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePropertyTypeOperationCompleted);
            }
            this.InvokeAsync("CreatePropertyType", new object[] {
                        userGuid,
                        propertyType,
                        currentCulture,
                        currentUICulture}, this.CreatePropertyTypeOperationCompleted, userState);
        }
        
        private void OnCreatePropertyTypeOperationCompleted(object arg) {
            if ((this.CreatePropertyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePropertyTypeCompleted(this, new CreatePropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdatePropertyType", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePropertyType(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("UpdatePropertyType", new object[] {
                        userGuid,
                        propertyType,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePropertyTypeAsync(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture) {
            this.UpdatePropertyTypeAsync(userGuid, propertyType, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void UpdatePropertyTypeAsync(string userGuid, SPropertyTypeExt propertyType, string currentCulture, string currentUICulture, object userState) {
            if ((this.UpdatePropertyTypeOperationCompleted == null)) {
                this.UpdatePropertyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePropertyTypeOperationCompleted);
            }
            this.InvokeAsync("UpdatePropertyType", new object[] {
                        userGuid,
                        propertyType,
                        currentCulture,
                        currentUICulture}, this.UpdatePropertyTypeOperationCompleted, userState);
        }
        
        private void OnUpdatePropertyTypeOperationCompleted(object arg) {
            if ((this.UpdatePropertyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePropertyTypeCompleted(this, new UpdatePropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeletePropertyType", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePropertyType(string userGuid, string propertyTypeID) {
            object[] results = this.Invoke("DeletePropertyType", new object[] {
                        userGuid,
                        propertyTypeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePropertyTypeAsync(string userGuid, string propertyTypeID) {
            this.DeletePropertyTypeAsync(userGuid, propertyTypeID, null);
        }
        
        /// <remarks/>
        public void DeletePropertyTypeAsync(string userGuid, string propertyTypeID, object userState) {
            if ((this.DeletePropertyTypeOperationCompleted == null)) {
                this.DeletePropertyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePropertyTypeOperationCompleted);
            }
            this.InvokeAsync("DeletePropertyType", new object[] {
                        userGuid,
                        propertyTypeID}, this.DeletePropertyTypeOperationCompleted, userState);
        }
        
        private void OnDeletePropertyTypeOperationCompleted(object arg) {
            if ((this.DeletePropertyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePropertyTypeCompleted(this, new DeletePropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyTypes", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypeExt[] GetPropertyTypes(string userGuid, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode) {
            object[] results = this.Invoke("GetPropertyTypes", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        editMode});
            return ((SPropertyTypeExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypesAsync(string userGuid, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode) {
            this.GetPropertyTypesAsync(userGuid, currentCulture, currentUICulture, editMode, null);
        }
        
        /// <remarks/>
        public void GetPropertyTypesAsync(string userGuid, string currentCulture, string currentUICulture, PropertyTypeEditEnum editMode, object userState) {
            if ((this.GetPropertyTypesOperationCompleted == null)) {
                this.GetPropertyTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypesOperationCompleted);
            }
            this.InvokeAsync("GetPropertyTypes", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        editMode}, this.GetPropertyTypesOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypesOperationCompleted(object arg) {
            if ((this.GetPropertyTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypesCompleted(this, new GetPropertyTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyType", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypeExt[] GetPropertyType(string userGuid, string propertyTypeName, string uiCulture) {
            object[] results = this.Invoke("GetPropertyType", new object[] {
                        userGuid,
                        propertyTypeName,
                        uiCulture});
            return ((SPropertyTypeExt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypeAsync(string userGuid, string propertyTypeName, string uiCulture) {
            this.GetPropertyTypeAsync(userGuid, propertyTypeName, uiCulture, null);
        }
        
        /// <remarks/>
        public void GetPropertyTypeAsync(string userGuid, string propertyTypeName, string uiCulture, object userState) {
            if ((this.GetPropertyTypeOperationCompleted == null)) {
                this.GetPropertyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypeOperationCompleted);
            }
            this.InvokeAsync("GetPropertyType", new object[] {
                        userGuid,
                        propertyTypeName,
                        uiCulture}, this.GetPropertyTypeOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypeOperationCompleted(object arg) {
            if ((this.GetPropertyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypeCompleted(this, new GetPropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyTypeForID", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SPropertyTypeExt GetPropertyTypeForID(string userGuid, string propertyTypeID, string uiCulture) {
            object[] results = this.Invoke("GetPropertyTypeForID", new object[] {
                        userGuid,
                        propertyTypeID,
                        uiCulture});
            return ((SPropertyTypeExt)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypeForIDAsync(string userGuid, string propertyTypeID, string uiCulture) {
            this.GetPropertyTypeForIDAsync(userGuid, propertyTypeID, uiCulture, null);
        }
        
        /// <remarks/>
        public void GetPropertyTypeForIDAsync(string userGuid, string propertyTypeID, string uiCulture, object userState) {
            if ((this.GetPropertyTypeForIDOperationCompleted == null)) {
                this.GetPropertyTypeForIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypeForIDOperationCompleted);
            }
            this.InvokeAsync("GetPropertyTypeForID", new object[] {
                        userGuid,
                        propertyTypeID,
                        uiCulture}, this.GetPropertyTypeForIDOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypeForIDOperationCompleted(object arg) {
            if ((this.GetPropertyTypeForIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypeForIDCompleted(this, new GetPropertyTypeForIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/UpdatePropertyCategory", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePropertyCategory(string userGuid, string propertyCategoryID, SStringGlobal propertyCategoryName, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("UpdatePropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID,
                        propertyCategoryName,
                        currentCulture,
                        currentUICulture});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePropertyCategoryAsync(string userGuid, string propertyCategoryID, SStringGlobal propertyCategoryName, string currentCulture, string currentUICulture) {
            this.UpdatePropertyCategoryAsync(userGuid, propertyCategoryID, propertyCategoryName, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void UpdatePropertyCategoryAsync(string userGuid, string propertyCategoryID, SStringGlobal propertyCategoryName, string currentCulture, string currentUICulture, object userState) {
            if ((this.UpdatePropertyCategoryOperationCompleted == null)) {
                this.UpdatePropertyCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePropertyCategoryOperationCompleted);
            }
            this.InvokeAsync("UpdatePropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID,
                        propertyCategoryName,
                        currentCulture,
                        currentUICulture}, this.UpdatePropertyCategoryOperationCompleted, userState);
        }
        
        private void OnUpdatePropertyCategoryOperationCompleted(object arg) {
            if ((this.UpdatePropertyCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePropertyCategoryCompleted(this, new UpdatePropertyCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/DeletePropertyCategory", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePropertyCategory(string userGuid, string propertyCategoryID) {
            object[] results = this.Invoke("DeletePropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePropertyCategoryAsync(string userGuid, string propertyCategoryID) {
            this.DeletePropertyCategoryAsync(userGuid, propertyCategoryID, null);
        }
        
        /// <remarks/>
        public void DeletePropertyCategoryAsync(string userGuid, string propertyCategoryID, object userState) {
            if ((this.DeletePropertyCategoryOperationCompleted == null)) {
                this.DeletePropertyCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePropertyCategoryOperationCompleted);
            }
            this.InvokeAsync("DeletePropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID}, this.DeletePropertyCategoryOperationCompleted, userState);
        }
        
        private void OnDeletePropertyCategoryOperationCompleted(object arg) {
            if ((this.DeletePropertyCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePropertyCategoryCompleted(this, new DeletePropertyCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyCategory", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SPropertyCategory GetPropertyCategory(string userGuid, string propertyCategoryID, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetPropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID,
                        currentCulture,
                        currentUICulture});
            return ((SPropertyCategory)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyCategoryAsync(string userGuid, string propertyCategoryID, string currentCulture, string currentUICulture) {
            this.GetPropertyCategoryAsync(userGuid, propertyCategoryID, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetPropertyCategoryAsync(string userGuid, string propertyCategoryID, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetPropertyCategoryOperationCompleted == null)) {
                this.GetPropertyCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyCategoryOperationCompleted);
            }
            this.InvokeAsync("GetPropertyCategory", new object[] {
                        userGuid,
                        propertyCategoryID,
                        currentCulture,
                        currentUICulture}, this.GetPropertyCategoryOperationCompleted, userState);
        }
        
        private void OnGetPropertyCategoryOperationCompleted(object arg) {
            if ((this.GetPropertyCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyCategoryCompleted(this, new GetPropertyCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetPropertyCategoryList", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyCategory[] GetPropertyCategoryList(string userGuid, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetPropertyCategoryList", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture});
            return ((SPropertyCategory[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyCategoryListAsync(string userGuid, string currentCulture, string currentUICulture) {
            this.GetPropertyCategoryListAsync(userGuid, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetPropertyCategoryListAsync(string userGuid, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetPropertyCategoryListOperationCompleted == null)) {
                this.GetPropertyCategoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyCategoryListOperationCompleted);
            }
            this.InvokeAsync("GetPropertyCategoryList", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture}, this.GetPropertyCategoryListOperationCompleted, userState);
        }
        
        private void OnGetPropertyCategoryListOperationCompleted(object arg) {
            if ((this.GetPropertyCategoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyCategoryListCompleted(this, new GetPropertyCategoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAllPropertyTypeLanguages", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypeLanguages[] GetAllPropertyTypeLanguages(string userGuid) {
            object[] results = this.Invoke("GetAllPropertyTypeLanguages", new object[] {
                        userGuid});
            return ((SPropertyTypeLanguages[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPropertyTypeLanguagesAsync(string userGuid) {
            this.GetAllPropertyTypeLanguagesAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetAllPropertyTypeLanguagesAsync(string userGuid, object userState) {
            if ((this.GetAllPropertyTypeLanguagesOperationCompleted == null)) {
                this.GetAllPropertyTypeLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPropertyTypeLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetAllPropertyTypeLanguages", new object[] {
                        userGuid}, this.GetAllPropertyTypeLanguagesOperationCompleted, userState);
        }
        
        private void OnGetAllPropertyTypeLanguagesOperationCompleted(object arg) {
            if ((this.GetAllPropertyTypeLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPropertyTypeLanguagesCompleted(this, new GetAllPropertyTypeLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetSchemaLanguages", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SCultureString[] GetSchemaLanguages(string userGuid, string schemaCulture, string uiCulture) {
            object[] results = this.Invoke("GetSchemaLanguages", new object[] {
                        userGuid,
                        schemaCulture,
                        uiCulture});
            return ((SCultureString[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaLanguagesAsync(string userGuid, string schemaCulture, string uiCulture) {
            this.GetSchemaLanguagesAsync(userGuid, schemaCulture, uiCulture, null);
        }
        
        /// <remarks/>
        public void GetSchemaLanguagesAsync(string userGuid, string schemaCulture, string uiCulture, object userState) {
            if ((this.GetSchemaLanguagesOperationCompleted == null)) {
                this.GetSchemaLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetSchemaLanguages", new object[] {
                        userGuid,
                        schemaCulture,
                        uiCulture}, this.GetSchemaLanguagesOperationCompleted, userState);
        }
        
        private void OnGetSchemaLanguagesOperationCompleted(object arg) {
            if ((this.GetSchemaLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaLanguagesCompleted(this, new GetSchemaLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetCheckOutState", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckOutStateEnum GetCheckOutState(string userGuid, string documentID, string storeID) {
            object[] results = this.Invoke("GetCheckOutState", new object[] {
                        userGuid,
                        documentID,
                        storeID});
            return ((CheckOutStateEnum)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckOutStateAsync(string userGuid, string documentID, string storeID) {
            this.GetCheckOutStateAsync(userGuid, documentID, storeID, null);
        }
        
        /// <remarks/>
        public void GetCheckOutStateAsync(string userGuid, string documentID, string storeID, object userState) {
            if ((this.GetCheckOutStateOperationCompleted == null)) {
                this.GetCheckOutStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckOutStateOperationCompleted);
            }
            this.InvokeAsync("GetCheckOutState", new object[] {
                        userGuid,
                        documentID,
                        storeID}, this.GetCheckOutStateOperationCompleted, userState);
        }
        
        private void OnGetCheckOutStateOperationCompleted(object arg) {
            if ((this.GetCheckOutStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckOutStateCompleted(this, new GetCheckOutStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/CheckProperties", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentPropertyChecked[] CheckProperties(string userGuid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SDocumentProperty[] docPropertiesToCheck, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("CheckProperties", new object[] {
                        userGuid,
                        docPropertiesToCheck,
                        currentCulture,
                        currentUICulture});
            return ((SDocumentPropertyChecked[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckPropertiesAsync(string userGuid, SDocumentProperty[] docPropertiesToCheck, string currentCulture, string currentUICulture) {
            this.CheckPropertiesAsync(userGuid, docPropertiesToCheck, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void CheckPropertiesAsync(string userGuid, SDocumentProperty[] docPropertiesToCheck, string currentCulture, string currentUICulture, object userState) {
            if ((this.CheckPropertiesOperationCompleted == null)) {
                this.CheckPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPropertiesOperationCompleted);
            }
            this.InvokeAsync("CheckProperties", new object[] {
                        userGuid,
                        docPropertiesToCheck,
                        currentCulture,
                        currentUICulture}, this.CheckPropertiesOperationCompleted, userState);
        }
        
        private void OnCheckPropertiesOperationCompleted(object arg) {
            if ((this.CheckPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPropertiesCompleted(this, new CheckPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SearchJSON", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSearchResult SearchJSON(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSearchCondition[] searchConditions, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, string resumePoint) {
            object[] results = this.Invoke("SearchJSON", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        listProperties,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        pageSize,
                        useWildCard,
                        resumePoint});
            return ((SSearchResult)(results[0]));
        }
        
        /// <remarks/>
        public void SearchJSONAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, string resumePoint) {
            this.SearchJSONAsync(userGuid, formatLanguage, schemaLanguage, uiLanguage, searchConditions, searchStores, listProperties, fullTextSearchWords, fullTextSearchWordRelation, pageSize, useWildCard, resumePoint, null);
        }
        
        /// <remarks/>
        public void SearchJSONAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, string resumePoint, object userState) {
            if ((this.SearchJSONOperationCompleted == null)) {
                this.SearchJSONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchJSONOperationCompleted);
            }
            this.InvokeAsync("SearchJSON", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        listProperties,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        pageSize,
                        useWildCard,
                        resumePoint}, this.SearchJSONOperationCompleted, userState);
        }
        
        private void OnSearchJSONOperationCompleted(object arg) {
            if ((this.SearchJSONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchJSONCompleted(this, new SearchJSONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/Search", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] Search(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSearchCondition[] searchConditions, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, ref string resumePoint, out bool hasMore) {
            object[] results = this.Invoke("Search", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        listProperties,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        pageSize,
                        useWildCard,
                        resumePoint});
            resumePoint = ((string)(results[1]));
            hasMore = ((bool)(results[2]));
            return ((SDocument[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, string resumePoint) {
            this.SearchAsync(userGuid, formatLanguage, schemaLanguage, uiLanguage, searchConditions, searchStores, listProperties, fullTextSearchWords, fullTextSearchWordRelation, pageSize, useWildCard, resumePoint, null);
        }
        
        /// <remarks/>
        public void SearchAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string[] listProperties, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, int pageSize, bool useWildCard, string resumePoint, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        listProperties,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        pageSize,
                        useWildCard,
                        resumePoint}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetAutoSuggest", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAutoSuggest(string userGuid, string currentCulture, string currentUICulture, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSearchCondition[] searchConditions, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard) {
            object[] results = this.Invoke("GetAutoSuggest", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        searchConditions,
                        searchStores,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        useWildCard});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoSuggestAsync(string userGuid, string currentCulture, string currentUICulture, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard) {
            this.GetAutoSuggestAsync(userGuid, currentCulture, currentUICulture, searchConditions, searchStores, fullTextSearchWords, fullTextSearchWordRelation, useWildCard, null);
        }
        
        /// <remarks/>
        public void GetAutoSuggestAsync(string userGuid, string currentCulture, string currentUICulture, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard, object userState) {
            if ((this.GetAutoSuggestOperationCompleted == null)) {
                this.GetAutoSuggestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoSuggestOperationCompleted);
            }
            this.InvokeAsync("GetAutoSuggest", new object[] {
                        userGuid,
                        currentCulture,
                        currentUICulture,
                        searchConditions,
                        searchStores,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        useWildCard}, this.GetAutoSuggestOperationCompleted, userState);
        }
        
        private void OnGetAutoSuggestOperationCompleted(object arg) {
            if ((this.GetAutoSuggestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoSuggestCompleted(this, new GetAutoSuggestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/SearchCount", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SearchCount(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SSearchCondition[] searchConditions, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard) {
            object[] results = this.Invoke("SearchCount", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        useWildCard});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCountAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard) {
            this.SearchCountAsync(userGuid, formatLanguage, schemaLanguage, uiLanguage, searchConditions, searchStores, fullTextSearchWords, fullTextSearchWordRelation, useWildCard, null);
        }
        
        /// <remarks/>
        public void SearchCountAsync(string userGuid, string formatLanguage, string schemaLanguage, string uiLanguage, SSearchCondition[] searchConditions, SInfoStore[] searchStores, string fullTextSearchWords, FulltextWordRelations fullTextSearchWordRelation, bool useWildCard, object userState) {
            if ((this.SearchCountOperationCompleted == null)) {
                this.SearchCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCountOperationCompleted);
            }
            this.InvokeAsync("SearchCount", new object[] {
                        userGuid,
                        formatLanguage,
                        schemaLanguage,
                        uiLanguage,
                        searchConditions,
                        searchStores,
                        fullTextSearchWords,
                        fullTextSearchWordRelation,
                        useWildCard}, this.SearchCountOperationCompleted, userState);
        }
        
        private void OnSearchCountOperationCompleted(object arg) {
            if ((this.SearchCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCountCompleted(this, new SearchCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/GetFolderData", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SFolderData GetFolderData(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            object[] results = this.Invoke("GetFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture});
            return ((SFolderData)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture) {
            this.GetFolderDataAsync(userGuid, folderPath, currentCulture, currentUICulture, null);
        }
        
        /// <remarks/>
        public void GetFolderDataAsync(string userGuid, string folderPath, string currentCulture, string currentUICulture, object userState) {
            if ((this.GetFolderDataOperationCompleted == null)) {
                this.GetFolderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderDataOperationCompleted);
            }
            this.InvokeAsync("GetFolderData", new object[] {
                        userGuid,
                        folderPath,
                        currentCulture,
                        currentUICulture}, this.GetFolderDataOperationCompleted, userState);
        }
        
        private void OnGetFolderDataOperationCompleted(object arg) {
            if ((this.GetFolderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderDataCompleted(this, new GetFolderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.kendox.com/TranslateFolderPath", RequestNamespace="http://www.kendox.com/", ResponseNamespace="http://www.kendox.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TranslateFolderPath(string userGuid, string pathToTranslate, string sourceCulture, string targetCulture) {
            object[] results = this.Invoke("TranslateFolderPath", new object[] {
                        userGuid,
                        pathToTranslate,
                        sourceCulture,
                        targetCulture});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TranslateFolderPathAsync(string userGuid, string pathToTranslate, string sourceCulture, string targetCulture) {
            this.TranslateFolderPathAsync(userGuid, pathToTranslate, sourceCulture, targetCulture, null);
        }
        
        /// <remarks/>
        public void TranslateFolderPathAsync(string userGuid, string pathToTranslate, string sourceCulture, string targetCulture, object userState) {
            if ((this.TranslateFolderPathOperationCompleted == null)) {
                this.TranslateFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTranslateFolderPathOperationCompleted);
            }
            this.InvokeAsync("TranslateFolderPath", new object[] {
                        userGuid,
                        pathToTranslate,
                        sourceCulture,
                        targetCulture}, this.TranslateFolderPathOperationCompleted, userState);
        }
        
        private void OnTranslateFolderPathOperationCompleted(object arg) {
            if ((this.TranslateFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TranslateFolderPathCompleted(this, new TranslateFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSubscription {
        
        private string userGuidField;
        
        private string userDisplayNameField;
        
        private SubscriptionTypesEnum subscriptionTypesField;
        
        private string subscriptionTypesHumanReadableNameField;
        
        /// <remarks/>
        public string userGuid {
            get {
                return this.userGuidField;
            }
            set {
                this.userGuidField = value;
            }
        }
        
        /// <remarks/>
        public string userDisplayName {
            get {
                return this.userDisplayNameField;
            }
            set {
                this.userDisplayNameField = value;
            }
        }
        
        /// <remarks/>
        public SubscriptionTypesEnum subscriptionTypes {
            get {
                return this.subscriptionTypesField;
            }
            set {
                this.subscriptionTypesField = value;
            }
        }
        
        /// <remarks/>
        public string subscriptionTypesHumanReadableName {
            get {
                return this.subscriptionTypesHumanReadableNameField;
            }
            set {
                this.subscriptionTypesHumanReadableNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum SubscriptionTypesEnum {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        AllChanges = 2,
        
        /// <remarks/>
        OnlyBlobChanges = 4,
        
        /// <remarks/>
        Delete = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchResult {
        
        private string resumePointField;
        
        private bool hasMoreField;
        
        private SDocument[] documentsField;
        
        /// <remarks/>
        public string resumePoint {
            get {
                return this.resumePointField;
            }
            set {
                this.resumePointField = value;
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                return this.hasMoreField;
            }
            set {
                this.hasMoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] documents {
            get {
                return this.documentsField;
            }
            set {
                this.documentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocument {
        
        private string nameField;
        
        private string documentIDField;
        
        private string versionIDField;
        
        private string exportPathField;
        
        private CheckOutStateEnum docCheckOutStateField;
        
        private string fileNameField;
        
        private bool hasSignatureField;
        
        private bool isProcessField;
        
        private PriorityEnum processPriorityField;
        
        private StatusEnum processStatusField;
        
        private string processEndDateField;
        
        private string storeIDField;
        
        private string originalFileNameField;
        
        private string protectionDomainField;
        
        private SDocumentProperty[] documentPropertiesField;
        
        private bool hasDocumentLinksField;
        
        private string lastImportTemplateIDField;
        
        private string processTemplateIDField;
        
        private bool hasReleasesField;
        
        private bool hasBlogField;
        
        private bool hasAnnotationField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public string versionID {
            get {
                return this.versionIDField;
            }
            set {
                this.versionIDField = value;
            }
        }
        
        /// <remarks/>
        public string exportPath {
            get {
                return this.exportPathField;
            }
            set {
                this.exportPathField = value;
            }
        }
        
        /// <remarks/>
        public CheckOutStateEnum docCheckOutState {
            get {
                return this.docCheckOutStateField;
            }
            set {
                this.docCheckOutStateField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public bool hasSignature {
            get {
                return this.hasSignatureField;
            }
            set {
                this.hasSignatureField = value;
            }
        }
        
        /// <remarks/>
        public bool isProcess {
            get {
                return this.isProcessField;
            }
            set {
                this.isProcessField = value;
            }
        }
        
        /// <remarks/>
        public PriorityEnum processPriority {
            get {
                return this.processPriorityField;
            }
            set {
                this.processPriorityField = value;
            }
        }
        
        /// <remarks/>
        public StatusEnum processStatus {
            get {
                return this.processStatusField;
            }
            set {
                this.processStatusField = value;
            }
        }
        
        /// <remarks/>
        public string processEndDate {
            get {
                return this.processEndDateField;
            }
            set {
                this.processEndDateField = value;
            }
        }
        
        /// <remarks/>
        public string storeID {
            get {
                return this.storeIDField;
            }
            set {
                this.storeIDField = value;
            }
        }
        
        /// <remarks/>
        public string originalFileName {
            get {
                return this.originalFileNameField;
            }
            set {
                this.originalFileNameField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomain {
            get {
                return this.protectionDomainField;
            }
            set {
                this.protectionDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentProperty[] documentProperties {
            get {
                return this.documentPropertiesField;
            }
            set {
                this.documentPropertiesField = value;
            }
        }
        
        /// <remarks/>
        public bool HasDocumentLinks {
            get {
                return this.hasDocumentLinksField;
            }
            set {
                this.hasDocumentLinksField = value;
            }
        }
        
        /// <remarks/>
        public string lastImportTemplateID {
            get {
                return this.lastImportTemplateIDField;
            }
            set {
                this.lastImportTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public string processTemplateID {
            get {
                return this.processTemplateIDField;
            }
            set {
                this.processTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public bool hasReleases {
            get {
                return this.hasReleasesField;
            }
            set {
                this.hasReleasesField = value;
            }
        }
        
        /// <remarks/>
        public bool hasBlog {
            get {
                return this.hasBlogField;
            }
            set {
                this.hasBlogField = value;
            }
        }
        
        /// <remarks/>
        public bool hasAnnotation {
            get {
                return this.hasAnnotationField;
            }
            set {
                this.hasAnnotationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum CheckOutStateEnum {
        
        /// <remarks/>
        NotCheckedOut,
        
        /// <remarks/>
        CheckedOut,
        
        /// <remarks/>
        CheckedOutExclusive,
        
        /// <remarks/>
        Null,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum PriorityEnum {
        
        /// <remarks/>
        HIGH,
        
        /// <remarks/>
        NORMAL,
        
        /// <remarks/>
        LOW,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum StatusEnum {
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        InProcess,
        
        /// <remarks/>
        Complete,
        
        /// <remarks/>
        PreparedToComplete,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentProperty {
        
        private string nameField;
        
        private string[] propertyValuesField;
        
        private string typeIDField;
        
        private SPropertyBarcode barcodeField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string[] propertyValues {
            get {
                return this.propertyValuesField;
            }
            set {
                this.propertyValuesField = value;
            }
        }
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public SPropertyBarcode barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyBarcode {
        
        private int cutFromField;
        
        private int cutToField;
        
        private string searchCriterionField;
        
        /// <remarks/>
        public int cutFrom {
            get {
                return this.cutFromField;
            }
            set {
                this.cutFromField = value;
            }
        }
        
        /// <remarks/>
        public int cutTo {
            get {
                return this.cutToField;
            }
            set {
                this.cutToField = value;
            }
        }
        
        /// <remarks/>
        public string searchCriterion {
            get {
                return this.searchCriterionField;
            }
            set {
                this.searchCriterionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyValueChecked {
        
        private string valueField;
        
        private bool isCheckOKField;
        
        private string checkErrorMessageField;
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool isCheckOK {
            get {
                return this.isCheckOKField;
            }
            set {
                this.isCheckOKField = value;
            }
        }
        
        /// <remarks/>
        public string checkErrorMessage {
            get {
                return this.checkErrorMessageField;
            }
            set {
                this.checkErrorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentPropertyChecked {
        
        private SPropertyValueChecked[] propertyValuesCheckedField;
        
        private string typeIDField;
        
        private string nameField;
        
        private SPropertyBarcode barcodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyValueChecked[] propertyValuesChecked {
            get {
                return this.propertyValuesCheckedField;
            }
            set {
                this.propertyValuesCheckedField = value;
            }
        }
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SPropertyBarcode barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypeLanguages {
        
        private string typeIDField;
        
        private string[][] propertyTypeNamesField;
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] propertyTypeNames {
            get {
                return this.propertyTypeNamesField;
            }
            set {
                this.propertyTypeNamesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SOperation {
        
        private string operationField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypeExt {
        
        private string typeIDField;
        
        private string nameField;
        
        private string pluginNameField;
        
        private string pluginNameLanguageSpecificField;
        
        private string pluginIDField;
        
        private int maxLengthField;
        
        private string forbiddenCharsField;
        
        private bool matchCaseField;
        
        private bool allowPhoneticSearchField;
        
        private int maxDecimalsField;
        
        private int maxDecimalsInternalField;
        
        private int maxDigitsField;
        
        private int maxDigitsInternalField;
        
        private string descriptionField;
        
        private bool isObsoleteField;
        
        private bool isActiveField;
        
        private bool isSearchableField;
        
        private bool isMultikeyField;
        
        private bool isVisibleField;
        
        private bool isSystemPropertyField;
        
        private string categoryField;
        
        private string fieldFormatField;
        
        private PropertyValueFormatterExt viewFormatterField;
        
        private PropertyValueFormatterExt editFormatterField;
        
        private SOperation[] searchOperationsField;
        
        private SStringGlobal nameGlobalField;
        
        private bool isFreeEditableField;
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string pluginName {
            get {
                return this.pluginNameField;
            }
            set {
                this.pluginNameField = value;
            }
        }
        
        /// <remarks/>
        public string pluginNameLanguageSpecific {
            get {
                return this.pluginNameLanguageSpecificField;
            }
            set {
                this.pluginNameLanguageSpecificField = value;
            }
        }
        
        /// <remarks/>
        public string pluginID {
            get {
                return this.pluginIDField;
            }
            set {
                this.pluginIDField = value;
            }
        }
        
        /// <remarks/>
        public int maxLength {
            get {
                return this.maxLengthField;
            }
            set {
                this.maxLengthField = value;
            }
        }
        
        /// <remarks/>
        public string forbiddenChars {
            get {
                return this.forbiddenCharsField;
            }
            set {
                this.forbiddenCharsField = value;
            }
        }
        
        /// <remarks/>
        public bool matchCase {
            get {
                return this.matchCaseField;
            }
            set {
                this.matchCaseField = value;
            }
        }
        
        /// <remarks/>
        public bool allowPhoneticSearch {
            get {
                return this.allowPhoneticSearchField;
            }
            set {
                this.allowPhoneticSearchField = value;
            }
        }
        
        /// <remarks/>
        public int maxDecimals {
            get {
                return this.maxDecimalsField;
            }
            set {
                this.maxDecimalsField = value;
            }
        }
        
        /// <remarks/>
        public int maxDecimalsInternal {
            get {
                return this.maxDecimalsInternalField;
            }
            set {
                this.maxDecimalsInternalField = value;
            }
        }
        
        /// <remarks/>
        public int maxDigits {
            get {
                return this.maxDigitsField;
            }
            set {
                this.maxDigitsField = value;
            }
        }
        
        /// <remarks/>
        public int maxDigitsInternal {
            get {
                return this.maxDigitsInternalField;
            }
            set {
                this.maxDigitsInternalField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool isObsolete {
            get {
                return this.isObsoleteField;
            }
            set {
                this.isObsoleteField = value;
            }
        }
        
        /// <remarks/>
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public bool isSearchable {
            get {
                return this.isSearchableField;
            }
            set {
                this.isSearchableField = value;
            }
        }
        
        /// <remarks/>
        public bool isMultikey {
            get {
                return this.isMultikeyField;
            }
            set {
                this.isMultikeyField = value;
            }
        }
        
        /// <remarks/>
        public bool isVisible {
            get {
                return this.isVisibleField;
            }
            set {
                this.isVisibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isSystemProperty {
            get {
                return this.isSystemPropertyField;
            }
            set {
                this.isSystemPropertyField = value;
            }
        }
        
        /// <remarks/>
        public string category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string fieldFormat {
            get {
                return this.fieldFormatField;
            }
            set {
                this.fieldFormatField = value;
            }
        }
        
        /// <remarks/>
        public PropertyValueFormatterExt viewFormatter {
            get {
                return this.viewFormatterField;
            }
            set {
                this.viewFormatterField = value;
            }
        }
        
        /// <remarks/>
        public PropertyValueFormatterExt editFormatter {
            get {
                return this.editFormatterField;
            }
            set {
                this.editFormatterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SOperation[] searchOperations {
            get {
                return this.searchOperationsField;
            }
            set {
                this.searchOperationsField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal nameGlobal {
            get {
                return this.nameGlobalField;
            }
            set {
                this.nameGlobalField = value;
            }
        }
        
        /// <remarks/>
        public bool isFreeEditable {
            get {
                return this.isFreeEditableField;
            }
            set {
                this.isFreeEditableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum PropertyValueFormatterExt {
        
        /// <remarks/>
        KB_NUMBER,
        
        /// <remarks/>
        PROCESS_STATE,
        
        /// <remarks/>
        PROCESS_PRIORITY,
        
        /// <remarks/>
        STD_NUMBER,
        
        /// <remarks/>
        SHORT_DATE,
        
        /// <remarks/>
        DETAIL_DATE,
        
        /// <remarks/>
        TIME_DATE,
        
        /// <remarks/>
        TEXT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SStringGlobal {
        
        private SCultureString[] cultureStringsField;
        
        private string invariantLanguageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SCultureString[] cultureStrings {
            get {
                return this.cultureStringsField;
            }
            set {
                this.cultureStringsField = value;
            }
        }
        
        /// <remarks/>
        public string invariantLanguage {
            get {
                return this.invariantLanguageField;
            }
            set {
                this.invariantLanguageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SCultureString {
        
        private string languageField;
        
        private string descriptionField;
        
        private string textField;
        
        private bool isSchemaLanguageField;
        
        /// <remarks/>
        public string language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public bool isSchemaLanguage {
            get {
                return this.isSchemaLanguageField;
            }
            set {
                this.isSchemaLanguageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypePlugin {
        
        private string pluginIDField;
        
        private string nameField;
        
        private bool canBeMultiValueField;
        
        private bool canBeSearchableField;
        
        private PropertyValueFormatterExt viewFormatterField;
        
        private PropertyValueFormatterExt editFormatterField;
        
        /// <remarks/>
        public string pluginID {
            get {
                return this.pluginIDField;
            }
            set {
                this.pluginIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool CanBeMultiValue {
            get {
                return this.canBeMultiValueField;
            }
            set {
                this.canBeMultiValueField = value;
            }
        }
        
        /// <remarks/>
        public bool CanBeSearchable {
            get {
                return this.canBeSearchableField;
            }
            set {
                this.canBeSearchableField = value;
            }
        }
        
        /// <remarks/>
        public PropertyValueFormatterExt viewFormatter {
            get {
                return this.viewFormatterField;
            }
            set {
                this.viewFormatterField = value;
            }
        }
        
        /// <remarks/>
        public PropertyValueFormatterExt editFormatter {
            get {
                return this.editFormatterField;
            }
            set {
                this.editFormatterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SUserGroup {
        
        private string idField;
        
        private string nameField;
        
        private string displayNameField;
        
        private string[] userIDsField;
        
        private string[] roleIDsField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] roleIDs {
            get {
                return this.roleIDsField;
            }
            set {
                this.roleIDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SUserActionsAllowed {
        
        private bool canEditUserStoreField;
        
        private bool canEditSecurityStoreField;
        
        private bool canEditSchemaStoreField;
        
        /// <remarks/>
        public bool canEditUserStore {
            get {
                return this.canEditUserStoreField;
            }
            set {
                this.canEditUserStoreField = value;
            }
        }
        
        /// <remarks/>
        public bool canEditSecurityStore {
            get {
                return this.canEditSecurityStoreField;
            }
            set {
                this.canEditSecurityStoreField = value;
            }
        }
        
        /// <remarks/>
        public bool canEditSchemaStore {
            get {
                return this.canEditSchemaStoreField;
            }
            set {
                this.canEditSchemaStoreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchMaskOptions {
        
        private bool showOptionsButtonField;
        
        private string publicSearchDirectoryField;
        
        private string personalSearchDirectoryField;
        
        private int maxIndexValuesField;
        
        private bool displayIconForLinkedApplicationField;
        
        private bool displayIconForLinksField;
        
        private bool displayIconForProcessesField;
        
        private bool displayIconForDigitalSignaturesField;
        
        private bool displayIconForAnnotationsField;
        
        private bool displayIconForTemporaryReleasesField;
        
        private bool displayIconForBlogField;
        
        private bool useUserSpecificFolderSettingsField;
        
        private string defaultSearchFolderField;
        
        /// <remarks/>
        public bool showOptionsButton {
            get {
                return this.showOptionsButtonField;
            }
            set {
                this.showOptionsButtonField = value;
            }
        }
        
        /// <remarks/>
        public string publicSearchDirectory {
            get {
                return this.publicSearchDirectoryField;
            }
            set {
                this.publicSearchDirectoryField = value;
            }
        }
        
        /// <remarks/>
        public string personalSearchDirectory {
            get {
                return this.personalSearchDirectoryField;
            }
            set {
                this.personalSearchDirectoryField = value;
            }
        }
        
        /// <remarks/>
        public int maxIndexValues {
            get {
                return this.maxIndexValuesField;
            }
            set {
                this.maxIndexValuesField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForLinkedApplication {
            get {
                return this.displayIconForLinkedApplicationField;
            }
            set {
                this.displayIconForLinkedApplicationField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForLinks {
            get {
                return this.displayIconForLinksField;
            }
            set {
                this.displayIconForLinksField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForProcesses {
            get {
                return this.displayIconForProcessesField;
            }
            set {
                this.displayIconForProcessesField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForDigitalSignatures {
            get {
                return this.displayIconForDigitalSignaturesField;
            }
            set {
                this.displayIconForDigitalSignaturesField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForAnnotations {
            get {
                return this.displayIconForAnnotationsField;
            }
            set {
                this.displayIconForAnnotationsField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForTemporaryReleases {
            get {
                return this.displayIconForTemporaryReleasesField;
            }
            set {
                this.displayIconForTemporaryReleasesField = value;
            }
        }
        
        /// <remarks/>
        public bool displayIconForBlog {
            get {
                return this.displayIconForBlogField;
            }
            set {
                this.displayIconForBlogField = value;
            }
        }
        
        /// <remarks/>
        public bool useUserSpecificFolderSettings {
            get {
                return this.useUserSpecificFolderSettingsField;
            }
            set {
                this.useUserSpecificFolderSettingsField = value;
            }
        }
        
        /// <remarks/>
        public string defaultSearchFolder {
            get {
                return this.defaultSearchFolderField;
            }
            set {
                this.defaultSearchFolderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SUserInfoExt {
        
        private string logonNameField;
        
        private string displayNameField;
        
        private string emailAddressField;
        
        private bool hasEmailNotificationField;
        
        private string domainField;
        
        private string userIDField;
        
        private bool isObsoleteField;
        
        private bool isActiveField;
        
        private bool isNamedUserField;
        
        private string userLanguageField;
        
        private bool loginWithoutPasswordField;
        
        private bool loginWithInternalPasswordField;
        
        private bool loginWithWindowsUserField;
        
        private bool canChangeLanguageField;
        
        private bool canExecuteDefaultSearchField;
        
        private bool canChangeSettingsField;
        
        private string[] roleIDsField;
        
        private string[] userGroupIDsField;
        
        private SSearchMaskOptions searchMaskOptionsField;
        
        private string lastImportTemplateField;
        
        private string phoneNumberField;
        
        private string mobileNumberField;
        
        private bool isApplicationIntegrationUserField;
        
        private bool isCADIntegrationUserField;
        
        /// <remarks/>
        public string logonName {
            get {
                return this.logonNameField;
            }
            set {
                this.logonNameField = value;
            }
        }
        
        /// <remarks/>
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string emailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
            }
        }
        
        /// <remarks/>
        public bool hasEmailNotification {
            get {
                return this.hasEmailNotificationField;
            }
            set {
                this.hasEmailNotificationField = value;
            }
        }
        
        /// <remarks/>
        public string domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isObsolete {
            get {
                return this.isObsoleteField;
            }
            set {
                this.isObsoleteField = value;
            }
        }
        
        /// <remarks/>
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public bool isNamedUser {
            get {
                return this.isNamedUserField;
            }
            set {
                this.isNamedUserField = value;
            }
        }
        
        /// <remarks/>
        public string userLanguage {
            get {
                return this.userLanguageField;
            }
            set {
                this.userLanguageField = value;
            }
        }
        
        /// <remarks/>
        public bool loginWithoutPassword {
            get {
                return this.loginWithoutPasswordField;
            }
            set {
                this.loginWithoutPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool loginWithInternalPassword {
            get {
                return this.loginWithInternalPasswordField;
            }
            set {
                this.loginWithInternalPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool loginWithWindowsUser {
            get {
                return this.loginWithWindowsUserField;
            }
            set {
                this.loginWithWindowsUserField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeLanguage {
            get {
                return this.canChangeLanguageField;
            }
            set {
                this.canChangeLanguageField = value;
            }
        }
        
        /// <remarks/>
        public bool canExecuteDefaultSearch {
            get {
                return this.canExecuteDefaultSearchField;
            }
            set {
                this.canExecuteDefaultSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeSettings {
            get {
                return this.canChangeSettingsField;
            }
            set {
                this.canChangeSettingsField = value;
            }
        }
        
        /// <remarks/>
        public string[] roleIDs {
            get {
                return this.roleIDsField;
            }
            set {
                this.roleIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] userGroupIDs {
            get {
                return this.userGroupIDsField;
            }
            set {
                this.userGroupIDsField = value;
            }
        }
        
        /// <remarks/>
        public SSearchMaskOptions searchMaskOptions {
            get {
                return this.searchMaskOptionsField;
            }
            set {
                this.searchMaskOptionsField = value;
            }
        }
        
        /// <remarks/>
        public string lastImportTemplate {
            get {
                return this.lastImportTemplateField;
            }
            set {
                this.lastImportTemplateField = value;
            }
        }
        
        /// <remarks/>
        public string phoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string mobileNumber {
            get {
                return this.mobileNumberField;
            }
            set {
                this.mobileNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool isApplicationIntegrationUser {
            get {
                return this.isApplicationIntegrationUserField;
            }
            set {
                this.isApplicationIntegrationUserField = value;
            }
        }
        
        /// <remarks/>
        public bool isCADIntegrationUser {
            get {
                return this.isCADIntegrationUserField;
            }
            set {
                this.isCADIntegrationUserField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SBlogEntry {
        
        private string createdField;
        
        private string creatorField;
        
        private string textField;
        
        /// <remarks/>
        public string created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public string creator {
            get {
                return this.creatorField;
            }
            set {
                this.creatorField = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SActionsAllowed {
        
        private string documentIDField;
        
        private ActionsAllowedEnum[] allowedActionsField;
        
        private CheckOutStateEnum checkOutStateField;
        
        private bool canCreateDocumentField;
        
        private bool canCreateSearchFolderField;
        
        private bool canEditSearchFolderField;
        
        private bool canDeleteSearchFolderField;
        
        private bool canSaveGlobalColumnSettingsField;
        
        private bool canWebservicePrintField;
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public ActionsAllowedEnum[] allowedActions {
            get {
                return this.allowedActionsField;
            }
            set {
                this.allowedActionsField = value;
            }
        }
        
        /// <remarks/>
        public CheckOutStateEnum checkOutState {
            get {
                return this.checkOutStateField;
            }
            set {
                this.checkOutStateField = value;
            }
        }
        
        /// <remarks/>
        public bool canCreateDocument {
            get {
                return this.canCreateDocumentField;
            }
            set {
                this.canCreateDocumentField = value;
            }
        }
        
        /// <remarks/>
        public bool canCreateSearchFolder {
            get {
                return this.canCreateSearchFolderField;
            }
            set {
                this.canCreateSearchFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool canEditSearchFolder {
            get {
                return this.canEditSearchFolderField;
            }
            set {
                this.canEditSearchFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool canDeleteSearchFolder {
            get {
                return this.canDeleteSearchFolderField;
            }
            set {
                this.canDeleteSearchFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool canSaveGlobalColumnSettings {
            get {
                return this.canSaveGlobalColumnSettingsField;
            }
            set {
                this.canSaveGlobalColumnSettingsField = value;
            }
        }
        
        /// <remarks/>
        public bool canWebservicePrint {
            get {
                return this.canWebservicePrintField;
            }
            set {
                this.canWebservicePrintField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum ActionsAllowedEnum {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        CancelCheckout,
        
        /// <remarks/>
        Checkout,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        EditAnnotation,
        
        /// <remarks/>
        EditContent,
        
        /// <remarks/>
        EditProperties,
        
        /// <remarks/>
        SetSecurity,
        
        /// <remarks/>
        ExportToFileSystem,
        
        /// <remarks/>
        Fax,
        
        /// <remarks/>
        Send,
        
        /// <remarks/>
        Print,
        
        /// <remarks/>
        View,
        
        /// <remarks/>
        Execute,
        
        /// <remarks/>
        Checkin,
        
        /// <remarks/>
        ShowVersionsLog,
        
        /// <remarks/>
        ShowModificationLog,
        
        /// <remarks/>
        ShowAccessLog,
        
        /// <remarks/>
        ExcelReport,
        
        /// <remarks/>
        CheckSignature,
        
        /// <remarks/>
        GrantAccessToOtherUsers,
        
        /// <remarks/>
        DeletePreviousVersion,
        
        /// <remarks/>
        Overwrite,
        
        /// <remarks/>
        ChangeName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProduct {
        
        private string productNameField;
        
        private string hostServerNameField;
        
        private string hostServerDomainField;
        
        /// <remarks/>
        public string productName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string hostServerName {
            get {
                return this.hostServerNameField;
            }
            set {
                this.hostServerNameField = value;
            }
        }
        
        /// <remarks/>
        public string hostServerDomain {
            get {
                return this.hostServerDomainField;
            }
            set {
                this.hostServerDomainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class STransaction {
        
        private string transactionIDField;
        
        private long fileSizeField;
        
        private long totalBytesTransferredField;
        
        private long currentOffsetField;
        
        private string filePathField;
        
        private TransactionState transactionStateField;
        
        private string originalFileNameField;
        
        private string transactionFileNameField;
        
        private TransactionType transactionTypeField;
        
        private string[] transactionLogField;
        
        /// <remarks/>
        public string transactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        public long totalBytesTransferred {
            get {
                return this.totalBytesTransferredField;
            }
            set {
                this.totalBytesTransferredField = value;
            }
        }
        
        /// <remarks/>
        public long currentOffset {
            get {
                return this.currentOffsetField;
            }
            set {
                this.currentOffsetField = value;
            }
        }
        
        /// <remarks/>
        public string filePath {
            get {
                return this.filePathField;
            }
            set {
                this.filePathField = value;
            }
        }
        
        /// <remarks/>
        public TransactionState transactionState {
            get {
                return this.transactionStateField;
            }
            set {
                this.transactionStateField = value;
            }
        }
        
        /// <remarks/>
        public string originalFileName {
            get {
                return this.originalFileNameField;
            }
            set {
                this.originalFileNameField = value;
            }
        }
        
        /// <remarks/>
        public string transactionFileName {
            get {
                return this.transactionFileNameField;
            }
            set {
                this.transactionFileNameField = value;
            }
        }
        
        /// <remarks/>
        public TransactionType transactionType {
            get {
                return this.transactionTypeField;
            }
            set {
                this.transactionTypeField = value;
            }
        }
        
        /// <remarks/>
        public string[] transactionLog {
            get {
                return this.transactionLogField;
            }
            set {
                this.transactionLogField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum TransactionState {
        
        /// <remarks/>
        InProgress,
        
        /// <remarks/>
        Finished,
        
        /// <remarks/>
        Canceled,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        NotSet,
        
        /// <remarks/>
        NotLocked,
        
        /// <remarks/>
        AuthenticationFailed,
        
        /// <remarks/>
        GargabeCollector,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum TransactionType {
        
        /// <remarks/>
        Upload,
        
        /// <remarks/>
        Download,
        
        /// <remarks/>
        UnknownTransaction,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentAccessLog {
        
        private string accessIDField;
        
        private AccessTypesEnum[] accessTypesField;
        
        private string accessTypesHumanReadableNameField;
        
        private string dateField;
        
        private string userField;
        
        /// <remarks/>
        public string accessID {
            get {
                return this.accessIDField;
            }
            set {
                this.accessIDField = value;
            }
        }
        
        /// <remarks/>
        public AccessTypesEnum[] accessTypes {
            get {
                return this.accessTypesField;
            }
            set {
                this.accessTypesField = value;
            }
        }
        
        /// <remarks/>
        public string accessTypesHumanReadableName {
            get {
                return this.accessTypesHumanReadableNameField;
            }
            set {
                this.accessTypesHumanReadableNameField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum AccessTypesEnum {
        
        /// <remarks/>
        ContentExportForPreview = 1,
        
        /// <remarks/>
        ContentExportForPrint = 2,
        
        /// <remarks/>
        ContentExportForView = 4,
        
        /// <remarks/>
        ContentSend = 8,
        
        /// <remarks/>
        ContentSendZipped = 16,
        
        /// <remarks/>
        PropertyExportForView = 32,
        
        /// <remarks/>
        UnknownAccess = 64,
        
        /// <remarks/>
        ContentExport = 128,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SReleasedDossierFile {
        
        private string dossierIDField;
        
        private string documentIDField;
        
        private string storeIDField;
        
        private string fileNameField;
        
        private SDocumentProperty[] propertyValuesField;
        
        private long startDateField;
        
        private long endDateField;
        
        private string[] groupIDsField;
        
        private string[] userIDsField;
        
        /// <remarks/>
        public string dossierID {
            get {
                return this.dossierIDField;
            }
            set {
                this.dossierIDField = value;
            }
        }
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public string storeID {
            get {
                return this.storeIDField;
            }
            set {
                this.storeIDField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentProperty[] propertyValues {
            get {
                return this.propertyValuesField;
            }
            set {
                this.propertyValuesField = value;
            }
        }
        
        /// <remarks/>
        public long startDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public long endDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string[] groupIDs {
            get {
                return this.groupIDsField;
            }
            set {
                this.groupIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SReleasedDossier {
        
        private string documentIDField;
        
        private string storeIDField;
        
        private string fileNameField;
        
        private string dossierIDField;
        
        private string dossierExtensionField;
        
        private SDocumentProperty[] propertyValuesField;
        
        private long startDateField;
        
        private long endDateField;
        
        private string[] groupIDsField;
        
        private string[] userIDsField;
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public string storeID {
            get {
                return this.storeIDField;
            }
            set {
                this.storeIDField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string dossierID {
            get {
                return this.dossierIDField;
            }
            set {
                this.dossierIDField = value;
            }
        }
        
        /// <remarks/>
        public string dossierExtension {
            get {
                return this.dossierExtensionField;
            }
            set {
                this.dossierExtensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentProperty[] propertyValues {
            get {
                return this.propertyValuesField;
            }
            set {
                this.propertyValuesField = value;
            }
        }
        
        /// <remarks/>
        public long startDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public long endDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string[] groupIDs {
            get {
                return this.groupIDsField;
            }
            set {
                this.groupIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SUserLog {
        
        private string dateTimeField;
        
        private string clientComputerNameField;
        
        private string clientIPField;
        
        private string logEntryField;
        
        /// <remarks/>
        public string dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string clientComputerName {
            get {
                return this.clientComputerNameField;
            }
            set {
                this.clientComputerNameField = value;
            }
        }
        
        /// <remarks/>
        public string clientIP {
            get {
                return this.clientIPField;
            }
            set {
                this.clientIPField = value;
            }
        }
        
        /// <remarks/>
        public string logEntry {
            get {
                return this.logEntryField;
            }
            set {
                this.logEntryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentVersion {
        
        private string versionIDField;
        
        private string dateField;
        
        private string nameField;
        
        private string userField;
        
        private string versionField;
        
        private string commentField;
        
        private ModificationTypesEnum[] modificationTypesField;
        
        private string modificationTypesHumanReadableNameField;
        
        private string modificationCountField;
        
        private bool hasSignatureField;
        
        /// <remarks/>
        public string versionID {
            get {
                return this.versionIDField;
            }
            set {
                this.versionIDField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public ModificationTypesEnum[] modificationTypes {
            get {
                return this.modificationTypesField;
            }
            set {
                this.modificationTypesField = value;
            }
        }
        
        /// <remarks/>
        public string modificationTypesHumanReadableName {
            get {
                return this.modificationTypesHumanReadableNameField;
            }
            set {
                this.modificationTypesHumanReadableNameField = value;
            }
        }
        
        /// <remarks/>
        public string modificationCount {
            get {
                return this.modificationCountField;
            }
            set {
                this.modificationCountField = value;
            }
        }
        
        /// <remarks/>
        public bool hasSignature {
            get {
                return this.hasSignatureField;
            }
            set {
                this.hasSignatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum ModificationTypesEnum {
        
        /// <remarks/>
        ContentModification = 1,
        
        /// <remarks/>
        SecurityChange = 2,
        
        /// <remarks/>
        PropertyModification = 4,
        
        /// <remarks/>
        InitialCreate = 8,
        
        /// <remarks/>
        ReferenceChange = 16,
        
        /// <remarks/>
        ReferencedByChange = 32,
        
        /// <remarks/>
        LifeCycleTransition = 64,
        
        /// <remarks/>
        Delete = 128,
        
        /// <remarks/>
        SystemChange = 256,
        
        /// <remarks/>
        CheckOut = 512,
        
        /// <remarks/>
        SignatureAdded = 1024,
        
        /// <remarks/>
        AnnotationChanged = 2048,
        
        /// <remarks/>
        DeleteVersion = 4096,
        
        /// <remarks/>
        VersionOverwritten = 8192,
        
        /// <remarks/>
        Moved = 16384,
        
        /// <remarks/>
        PageCount = 32768,
        
        /// <remarks/>
        ReminderChange = 65536,
        
        /// <remarks/>
        BlogEntry = 131072,
        
        /// <remarks/>
        AbonnementChange = 262144,
        
        /// <remarks/>
        UnknownModification = 524288,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SWebDataProviderSettings {
        
        private string providerUrlField;
        
        private bool useProviderForImportField;
        
        private bool useProviderForSearchField;
        
        private bool useProviderForPropertyEditField;
        
        /// <remarks/>
        public string providerUrl {
            get {
                return this.providerUrlField;
            }
            set {
                this.providerUrlField = value;
            }
        }
        
        /// <remarks/>
        public bool useProviderForImport {
            get {
                return this.useProviderForImportField;
            }
            set {
                this.useProviderForImportField = value;
            }
        }
        
        /// <remarks/>
        public bool useProviderForSearch {
            get {
                return this.useProviderForSearchField;
            }
            set {
                this.useProviderForSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool useProviderForPropertyEdit {
            get {
                return this.useProviderForPropertyEditField;
            }
            set {
                this.useProviderForPropertyEditField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class OperationObjectExt {
        
        private OperationsExt operationField;
        
        private string displayNameField;
        
        /// <remarks/>
        public OperationsExt Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum OperationsExt {
        
        /// <remarks/>
        EQ,
        
        /// <remarks/>
        LE,
        
        /// <remarks/>
        LT,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        GE,
        
        /// <remarks/>
        NE,
        
        /// <remarks/>
        LK,
        
        /// <remarks/>
        CT,
        
        /// <remarks/>
        BT,
        
        /// <remarks/>
        UN,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        NOTIN,
        
        /// <remarks/>
        SX,
        
        /// <remarks/>
        NONE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class RelationObject {
        
        private Relations relationField;
        
        private string displayNameField;
        
        /// <remarks/>
        public Relations Relation {
            get {
                return this.relationField;
            }
            set {
                this.relationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum Relations {
        
        /// <remarks/>
        AND,
        
        /// <remarks/>
        OR,
        
        /// <remarks/>
        NONE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentPropertyUpdate {
        
        private string propertyTypeNameField;
        
        private string propertyTypeIDField;
        
        private string[] propertyValuesField;
        
        private string categoryField;
        
        private SPropertyBarcode barcodeField;
        
        private UpdateActions updateActionField;
        
        private bool executeAutoActionsField;
        
        /// <remarks/>
        public string propertyTypeName {
            get {
                return this.propertyTypeNameField;
            }
            set {
                this.propertyTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string propertyTypeID {
            get {
                return this.propertyTypeIDField;
            }
            set {
                this.propertyTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string[] propertyValues {
            get {
                return this.propertyValuesField;
            }
            set {
                this.propertyValuesField = value;
            }
        }
        
        /// <remarks/>
        public string category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public SPropertyBarcode barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
        
        /// <remarks/>
        public UpdateActions updateAction {
            get {
                return this.updateActionField;
            }
            set {
                this.updateActionField = value;
            }
        }
        
        /// <remarks/>
        public bool executeAutoActions {
            get {
                return this.executeAutoActionsField;
            }
            set {
                this.executeAutoActionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum UpdateActions {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        UPDATE,
        
        /// <remarks/>
        ADD,
        
        /// <remarks/>
        DELETE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyFiller {
        
        private string nameField;
        
        private string idField;
        
        private string[] valuesField;
        
        private string actionPluginIDField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string[] values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
        
        /// <remarks/>
        public string actionPluginID {
            get {
                return this.actionPluginIDField;
            }
            set {
                this.actionPluginIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProcessSettings {
        
        private string processSearchFoldersPathField;
        
        private bool respectProtectionDomainForProcessUsersField;
        
        /// <remarks/>
        public string processSearchFoldersPath {
            get {
                return this.processSearchFoldersPathField;
            }
            set {
                this.processSearchFoldersPathField = value;
            }
        }
        
        /// <remarks/>
        public bool respectProtectionDomainForProcessUsers {
            get {
                return this.respectProtectionDomainForProcessUsersField;
            }
            set {
                this.respectProtectionDomainForProcessUsersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SImportSettings {
        
        private bool isImportTemplateRequiredField;
        
        private bool showImportOptionsDialogField;
        
        private ChangeImportTemplateOptionsEnum defaultChangeImportTemplateOptionField;
        
        /// <remarks/>
        public bool IsImportTemplateRequired {
            get {
                return this.isImportTemplateRequiredField;
            }
            set {
                this.isImportTemplateRequiredField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowImportOptionsDialog {
            get {
                return this.showImportOptionsDialogField;
            }
            set {
                this.showImportOptionsDialogField = value;
            }
        }
        
        /// <remarks/>
        public ChangeImportTemplateOptionsEnum DefaultChangeImportTemplateOption {
            get {
                return this.defaultChangeImportTemplateOptionField;
            }
            set {
                this.defaultChangeImportTemplateOptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum ChangeImportTemplateOptionsEnum {
        
        /// <remarks/>
        COPY_ALL,
        
        /// <remarks/>
        TEMPLATE_ONLY,
        
        /// <remarks/>
        COPY_COMPLETED,
        
        /// <remarks/>
        NOTHING,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SImportTemplate {
        
        private string templateNameField;
        
        private string templateIDField;
        
        private string protectionDomainField;
        
        private string protectionDomainIDField;
        
        private bool canChangeProtectionDomainField;
        
        private SInfoStore storeField;
        
        private bool canChangeStoreField;
        
        private string signingProfileField;
        
        private string signingProfileIDField;
        
        private bool canChangeSigningProfileField;
        
        private string lifeCycleField;
        
        private string lifeCycleIDField;
        
        private bool canChangeLifeCycleField;
        
        private string processTemplateField;
        
        private string processTemplateIDField;
        
        private bool canChangeProcessTemplateField;
        
        private bool startProcessField;
        
        private SPropertyTypeTemplate propTypeTemplateField;
        
        private bool canAddPropertiesToTemplateField;
        
        private bool canChangeFoldersField;
        
        private bool canChangeLinksField;
        
        private bool deleteDocumentAfterImportField;
        
        /// <remarks/>
        public string templateName {
            get {
                return this.templateNameField;
            }
            set {
                this.templateNameField = value;
            }
        }
        
        /// <remarks/>
        public string templateID {
            get {
                return this.templateIDField;
            }
            set {
                this.templateIDField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomain {
            get {
                return this.protectionDomainField;
            }
            set {
                this.protectionDomainField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeProtectionDomain {
            get {
                return this.canChangeProtectionDomainField;
            }
            set {
                this.canChangeProtectionDomainField = value;
            }
        }
        
        /// <remarks/>
        public SInfoStore store {
            get {
                return this.storeField;
            }
            set {
                this.storeField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeStore {
            get {
                return this.canChangeStoreField;
            }
            set {
                this.canChangeStoreField = value;
            }
        }
        
        /// <remarks/>
        public string signingProfile {
            get {
                return this.signingProfileField;
            }
            set {
                this.signingProfileField = value;
            }
        }
        
        /// <remarks/>
        public string signingProfileID {
            get {
                return this.signingProfileIDField;
            }
            set {
                this.signingProfileIDField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeSigningProfile {
            get {
                return this.canChangeSigningProfileField;
            }
            set {
                this.canChangeSigningProfileField = value;
            }
        }
        
        /// <remarks/>
        public string lifeCycle {
            get {
                return this.lifeCycleField;
            }
            set {
                this.lifeCycleField = value;
            }
        }
        
        /// <remarks/>
        public string lifeCycleID {
            get {
                return this.lifeCycleIDField;
            }
            set {
                this.lifeCycleIDField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeLifeCycle {
            get {
                return this.canChangeLifeCycleField;
            }
            set {
                this.canChangeLifeCycleField = value;
            }
        }
        
        /// <remarks/>
        public string processTemplate {
            get {
                return this.processTemplateField;
            }
            set {
                this.processTemplateField = value;
            }
        }
        
        /// <remarks/>
        public string processTemplateID {
            get {
                return this.processTemplateIDField;
            }
            set {
                this.processTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeProcessTemplate {
            get {
                return this.canChangeProcessTemplateField;
            }
            set {
                this.canChangeProcessTemplateField = value;
            }
        }
        
        /// <remarks/>
        public bool startProcess {
            get {
                return this.startProcessField;
            }
            set {
                this.startProcessField = value;
            }
        }
        
        /// <remarks/>
        public SPropertyTypeTemplate propTypeTemplate {
            get {
                return this.propTypeTemplateField;
            }
            set {
                this.propTypeTemplateField = value;
            }
        }
        
        /// <remarks/>
        public bool canAddPropertiesToTemplate {
            get {
                return this.canAddPropertiesToTemplateField;
            }
            set {
                this.canAddPropertiesToTemplateField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeFolders {
            get {
                return this.canChangeFoldersField;
            }
            set {
                this.canChangeFoldersField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeLinks {
            get {
                return this.canChangeLinksField;
            }
            set {
                this.canChangeLinksField = value;
            }
        }
        
        /// <remarks/>
        public bool deleteDocumentAfterImport {
            get {
                return this.deleteDocumentAfterImportField;
            }
            set {
                this.deleteDocumentAfterImportField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SInfoStore {
        
        private string nameField;
        
        private string descriptionField;
        
        private string guidField;
        
        private bool autoSuggestField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public bool autoSuggest {
            get {
                return this.autoSuggestField;
            }
            set {
                this.autoSuggestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypeTemplate {
        
        private string nameField;
        
        private SStringGlobal nameGlobalField;
        
        private string propertyTypeTemplateIDField;
        
        private SPropertyTypeWithAttributes[] propertyTypeWithAttrField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal nameGlobal {
            get {
                return this.nameGlobalField;
            }
            set {
                this.nameGlobalField = value;
            }
        }
        
        /// <remarks/>
        public string propertyTypeTemplateID {
            get {
                return this.propertyTypeTemplateIDField;
            }
            set {
                this.propertyTypeTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyTypeWithAttributes[] propertyTypeWithAttr {
            get {
                return this.propertyTypeWithAttrField;
            }
            set {
                this.propertyTypeWithAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypeWithAttributes {
        
        private string typeIDField;
        
        private string nameField;
        
        private string pluginNameField;
        
        private string descriptionField;
        
        private string fieldFormatField;
        
        private bool isObsoleteField;
        
        private bool isActiveField;
        
        private bool isSearchableField;
        
        private bool isVisibleField;
        
        private bool isMultikeyField;
        
        private string categoryField;
        
        private SPropertyTypeAttribute propertyTypeAttrField;
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string pluginName {
            get {
                return this.pluginNameField;
            }
            set {
                this.pluginNameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string fieldFormat {
            get {
                return this.fieldFormatField;
            }
            set {
                this.fieldFormatField = value;
            }
        }
        
        /// <remarks/>
        public bool isObsolete {
            get {
                return this.isObsoleteField;
            }
            set {
                this.isObsoleteField = value;
            }
        }
        
        /// <remarks/>
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public bool isSearchable {
            get {
                return this.isSearchableField;
            }
            set {
                this.isSearchableField = value;
            }
        }
        
        /// <remarks/>
        public bool isVisible {
            get {
                return this.isVisibleField;
            }
            set {
                this.isVisibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isMultikey {
            get {
                return this.isMultikeyField;
            }
            set {
                this.isMultikeyField = value;
            }
        }
        
        /// <remarks/>
        public string category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public SPropertyTypeAttribute propertyTypeAttr {
            get {
                return this.propertyTypeAttrField;
            }
            set {
                this.propertyTypeAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyTypeAttribute {
        
        private string defaultValueField;
        
        private bool canEditDefaultValueField;
        
        private string attributeIDField;
        
        private bool isRequiredField;
        
        private bool isVisibleField;
        
        private string placeholderField;
        
        /// <remarks/>
        public string defaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
        
        /// <remarks/>
        public bool canEditDefaultValue {
            get {
                return this.canEditDefaultValueField;
            }
            set {
                this.canEditDefaultValueField = value;
            }
        }
        
        /// <remarks/>
        public string attributeID {
            get {
                return this.attributeIDField;
            }
            set {
                this.attributeIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isRequired {
            get {
                return this.isRequiredField;
            }
            set {
                this.isRequiredField = value;
            }
        }
        
        /// <remarks/>
        public bool isVisible {
            get {
                return this.isVisibleField;
            }
            set {
                this.isVisibleField = value;
            }
        }
        
        /// <remarks/>
        public string placeholder {
            get {
                return this.placeholderField;
            }
            set {
                this.placeholderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSignatureProfile {
        
        private string signatureProfileNameField;
        
        private string signatureProfileIDField;
        
        private bool isClientSigningField;
        
        /// <remarks/>
        public string signatureProfileName {
            get {
                return this.signatureProfileNameField;
            }
            set {
                this.signatureProfileNameField = value;
            }
        }
        
        /// <remarks/>
        public string signatureProfileID {
            get {
                return this.signatureProfileIDField;
            }
            set {
                this.signatureProfileIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isClientSigning {
            get {
                return this.isClientSigningField;
            }
            set {
                this.isClientSigningField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSignature {
        
        private string signatureFileNameField;
        
        private byte[] signatureFileField;
        
        private string cryptoClassNameField;
        
        private string certIDField;
        
        private bool isTimeStampField;
        
        private string hashAlgField;
        
        private byte[] reportFileField;
        
        private string reportFileNameField;
        
        /// <remarks/>
        public string signatureFileName {
            get {
                return this.signatureFileNameField;
            }
            set {
                this.signatureFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] signatureFile {
            get {
                return this.signatureFileField;
            }
            set {
                this.signatureFileField = value;
            }
        }
        
        /// <remarks/>
        public string cryptoClassName {
            get {
                return this.cryptoClassNameField;
            }
            set {
                this.cryptoClassNameField = value;
            }
        }
        
        /// <remarks/>
        public string certID {
            get {
                return this.certIDField;
            }
            set {
                this.certIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isTimeStamp {
            get {
                return this.isTimeStampField;
            }
            set {
                this.isTimeStampField = value;
            }
        }
        
        /// <remarks/>
        public string hashAlg {
            get {
                return this.hashAlgField;
            }
            set {
                this.hashAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] reportFile {
            get {
                return this.reportFileField;
            }
            set {
                this.reportFileField = value;
            }
        }
        
        /// <remarks/>
        public string reportFileName {
            get {
                return this.reportFileNameField;
            }
            set {
                this.reportFileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProfile {
        
        private string profileNameField;
        
        private string inputExtensionField;
        
        private string outputExtensionField;
        
        private bool isSinglePagePossibleField;
        
        /// <remarks/>
        public string profileName {
            get {
                return this.profileNameField;
            }
            set {
                this.profileNameField = value;
            }
        }
        
        /// <remarks/>
        public string inputExtension {
            get {
                return this.inputExtensionField;
            }
            set {
                this.inputExtensionField = value;
            }
        }
        
        /// <remarks/>
        public string outputExtension {
            get {
                return this.outputExtensionField;
            }
            set {
                this.outputExtensionField = value;
            }
        }
        
        /// <remarks/>
        public bool isSinglePagePossible {
            get {
                return this.isSinglePagePossibleField;
            }
            set {
                this.isSinglePagePossibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentResult {
        
        private SDocument docInformationField;
        
        private string documentAsBase64StringField;
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                return this.docInformationField;
            }
            set {
                this.docInformationField = value;
            }
        }
        
        /// <remarks/>
        public string documentAsBase64String {
            get {
                return this.documentAsBase64StringField;
            }
            set {
                this.documentAsBase64StringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SAnnotationSpecifier {
        
        private bool areasField;
        
        private bool coveringAreasField;
        
        private bool stickyNotesField;
        
        private bool stampsField;
        
        private bool textsField;
        
        private bool overlaysField;
        
        /// <remarks/>
        public bool Areas {
            get {
                return this.areasField;
            }
            set {
                this.areasField = value;
            }
        }
        
        /// <remarks/>
        public bool CoveringAreas {
            get {
                return this.coveringAreasField;
            }
            set {
                this.coveringAreasField = value;
            }
        }
        
        /// <remarks/>
        public bool StickyNotes {
            get {
                return this.stickyNotesField;
            }
            set {
                this.stickyNotesField = value;
            }
        }
        
        /// <remarks/>
        public bool Stamps {
            get {
                return this.stampsField;
            }
            set {
                this.stampsField = value;
            }
        }
        
        /// <remarks/>
        public bool Texts {
            get {
                return this.textsField;
            }
            set {
                this.textsField = value;
            }
        }
        
        /// <remarks/>
        public bool Overlays {
            get {
                return this.overlaysField;
            }
            set {
                this.overlaysField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPair {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SReleaseHandler {
        
        private string securityDefinitionIDField;
        
        private string securityHandlerIDField;
        
        private string documentIDField;
        
        private string fileNameField;
        
        private string releaseForField;
        
        private string startDateField;
        
        private string endDateField;
        
        private string createdDateField;
        
        private string createdFromField;
        
        private string modifiedDateField;
        
        private string modifiedFromField;
        
        /// <remarks/>
        public string securityDefinitionID {
            get {
                return this.securityDefinitionIDField;
            }
            set {
                this.securityDefinitionIDField = value;
            }
        }
        
        /// <remarks/>
        public string securityHandlerID {
            get {
                return this.securityHandlerIDField;
            }
            set {
                this.securityHandlerIDField = value;
            }
        }
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string releaseFor {
            get {
                return this.releaseForField;
            }
            set {
                this.releaseForField = value;
            }
        }
        
        /// <remarks/>
        public string startDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string endDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string createdDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public string createdFrom {
            get {
                return this.createdFromField;
            }
            set {
                this.createdFromField = value;
            }
        }
        
        /// <remarks/>
        public string modifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public string modifiedFrom {
            get {
                return this.modifiedFromField;
            }
            set {
                this.modifiedFromField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SThumbnail {
        
        private string documentIDField;
        
        private string storeIDField;
        
        private string fileNameField;
        
        private int pageNumberField;
        
        private byte[] imageDataField;
        
        /// <remarks/>
        public string documentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public string storeID {
            get {
                return this.storeIDField;
            }
            set {
                this.storeIDField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public int pageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] imageData {
            get {
                return this.imageDataField;
            }
            set {
                this.imageDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class STask {
        
        private string nameField;
        
        private string descriptionField;
        
        private int finalDaysField;
        
        private bool editionByAllField;
        
        private string[] userIDsField;
        
        private string[] groupIDsField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int finalDays {
            get {
                return this.finalDaysField;
            }
            set {
                this.finalDaysField = value;
            }
        }
        
        /// <remarks/>
        public bool editionByAll {
            get {
                return this.editionByAllField;
            }
            set {
                this.editionByAllField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] groupIDs {
            get {
                return this.groupIDsField;
            }
            set {
                this.groupIDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProcessTemplate {
        
        private string nameField;
        
        private string internalIDField;
        
        private string processNameField;
        
        private string descriptionField;
        
        private string defaultLanguageField;
        
        private string processOwnerIDField;
        
        private string supervisorIDField;
        
        private string protectionDomainIDField;
        
        private PriorityEnum priorityField;
        
        private int daysAfterCreationField;
        
        private string importTemplateIDField;
        
        private bool assumeDocumentPropertiesField;
        
        private bool addToOwnerField;
        
        private STask[] tasksField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string internalID {
            get {
                return this.internalIDField;
            }
            set {
                this.internalIDField = value;
            }
        }
        
        /// <remarks/>
        public string processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string defaultLanguage {
            get {
                return this.defaultLanguageField;
            }
            set {
                this.defaultLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string processOwnerID {
            get {
                return this.processOwnerIDField;
            }
            set {
                this.processOwnerIDField = value;
            }
        }
        
        /// <remarks/>
        public string supervisorID {
            get {
                return this.supervisorIDField;
            }
            set {
                this.supervisorIDField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        public PriorityEnum priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        public int daysAfterCreation {
            get {
                return this.daysAfterCreationField;
            }
            set {
                this.daysAfterCreationField = value;
            }
        }
        
        /// <remarks/>
        public string importTemplateID {
            get {
                return this.importTemplateIDField;
            }
            set {
                this.importTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public bool assumeDocumentProperties {
            get {
                return this.assumeDocumentPropertiesField;
            }
            set {
                this.assumeDocumentPropertiesField = value;
            }
        }
        
        /// <remarks/>
        public bool addToOwner {
            get {
                return this.addToOwnerField;
            }
            set {
                this.addToOwnerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public STask[] Tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SReminder {
        
        private string reminderIDField;
        
        private string reminderDateField;
        
        private SProcessTemplate processTemplateField;
        
        private bool useUserFromProcessTemplateField;
        
        private string[] userIDsField;
        
        private string[] groupIDsField;
        
        private int intervalField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string reminderID {
            get {
                return this.reminderIDField;
            }
            set {
                this.reminderIDField = value;
            }
        }
        
        /// <remarks/>
        public string reminderDate {
            get {
                return this.reminderDateField;
            }
            set {
                this.reminderDateField = value;
            }
        }
        
        /// <remarks/>
        public SProcessTemplate processTemplate {
            get {
                return this.processTemplateField;
            }
            set {
                this.processTemplateField = value;
            }
        }
        
        /// <remarks/>
        public bool useUserFromProcessTemplate {
            get {
                return this.useUserFromProcessTemplateField;
            }
            set {
                this.useUserFromProcessTemplateField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] groupIDs {
            get {
                return this.groupIDsField;
            }
            set {
                this.groupIDsField = value;
            }
        }
        
        /// <remarks/>
        public int interval {
            get {
                return this.intervalField;
            }
            set {
                this.intervalField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SAccessOperation {
        
        private string idField;
        
        private string nameField;
        
        private bool isCheckedField;
        
        private string[] preConditionAccessOperationIDsField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool isChecked {
            get {
                return this.isCheckedField;
            }
            set {
                this.isCheckedField = value;
            }
        }
        
        /// <remarks/>
        public string[] preConditionAccessOperationIDs {
            get {
                return this.preConditionAccessOperationIDsField;
            }
            set {
                this.preConditionAccessOperationIDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SAccessOperationCategory {
        
        private string nameField;
        
        private string idField;
        
        private SAccessOperation[] accessOperationsField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SAccessOperation[] accessOperations {
            get {
                return this.accessOperationsField;
            }
            set {
                this.accessOperationsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SRole {
        
        private string roleIDField;
        
        private string nameField;
        
        private string[] groupIDsField;
        
        private string[] userIDsField;
        
        private string[] protectionDomainIDsField;
        
        private SAccessOperationCategory[] accessOperationCategoriesField;
        
        /// <remarks/>
        public string roleID {
            get {
                return this.roleIDField;
            }
            set {
                this.roleIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string[] groupIDs {
            get {
                return this.groupIDsField;
            }
            set {
                this.groupIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] userIDs {
            get {
                return this.userIDsField;
            }
            set {
                this.userIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] protectionDomainIDs {
            get {
                return this.protectionDomainIDsField;
            }
            set {
                this.protectionDomainIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SAccessOperationCategory[] accessOperationCategories {
            get {
                return this.accessOperationCategoriesField;
            }
            set {
                this.accessOperationCategoriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SClientSettings {
        
        private bool usePasswordProtectionForZipField;
        
        private bool copySearchValuesField;
        
        private string textModuleFolderIDField;
        
        private bool isCADIntegrationActiveField;
        
        /// <remarks/>
        public bool usePasswordProtectionForZip {
            get {
                return this.usePasswordProtectionForZipField;
            }
            set {
                this.usePasswordProtectionForZipField = value;
            }
        }
        
        /// <remarks/>
        public bool copySearchValues {
            get {
                return this.copySearchValuesField;
            }
            set {
                this.copySearchValuesField = value;
            }
        }
        
        /// <remarks/>
        public string textModuleFolderID {
            get {
                return this.textModuleFolderIDField;
            }
            set {
                this.textModuleFolderIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isCADIntegrationActive {
            get {
                return this.isCADIntegrationActiveField;
            }
            set {
                this.isCADIntegrationActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SMailOptions {
        
        private string attachmentActionField;
        
        private string zipFilePasswordField;
        
        /// <remarks/>
        public string AttachmentAction {
            get {
                return this.attachmentActionField;
            }
            set {
                this.attachmentActionField = value;
            }
        }
        
        /// <remarks/>
        public string ZipFilePassword {
            get {
                return this.zipFilePasswordField;
            }
            set {
                this.zipFilePasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SMailAttachment {
        
        private byte[] dataField;
        
        private string fileNameField;
        
        private string documentIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SMailItem {
        
        private string fromAddressField;
        
        private string[] toAddressesField;
        
        private string[] ccAddressesField;
        
        private string[] bccAddressesField;
        
        private string mailSubjectField;
        
        private string mailBodyField;
        
        private SMailAttachment[] attachmentsField;
        
        private SMailOptions mailOptionsField;
        
        /// <remarks/>
        public string FromAddress {
            get {
                return this.fromAddressField;
            }
            set {
                this.fromAddressField = value;
            }
        }
        
        /// <remarks/>
        public string[] ToAddresses {
            get {
                return this.toAddressesField;
            }
            set {
                this.toAddressesField = value;
            }
        }
        
        /// <remarks/>
        public string[] CcAddresses {
            get {
                return this.ccAddressesField;
            }
            set {
                this.ccAddressesField = value;
            }
        }
        
        /// <remarks/>
        public string[] BccAddresses {
            get {
                return this.bccAddressesField;
            }
            set {
                this.bccAddressesField = value;
            }
        }
        
        /// <remarks/>
        public string MailSubject {
            get {
                return this.mailSubjectField;
            }
            set {
                this.mailSubjectField = value;
            }
        }
        
        /// <remarks/>
        public string MailBody {
            get {
                return this.mailBodyField;
            }
            set {
                this.mailBodyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SMailAttachment[] Attachments {
            get {
                return this.attachmentsField;
            }
            set {
                this.attachmentsField = value;
            }
        }
        
        /// <remarks/>
        public SMailOptions MailOptions {
            get {
                return this.mailOptionsField;
            }
            set {
                this.mailOptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProcessTrace {
        
        private string taskNameField;
        
        private string creatorNameField;
        
        private string subjectField;
        
        private StatusEnum statusField;
        
        private string createdField;
        
        private string dueToField;
        
        private string doneField;
        
        private bool editingByAllField;
        
        private string completedByUserNamesField;
        
        private string assignedToUserNamesField;
        
        private string descriptionField;
        
        private SComment[] commentsField;
        
        /// <remarks/>
        public string taskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public string creatorName {
            get {
                return this.creatorNameField;
            }
            set {
                this.creatorNameField = value;
            }
        }
        
        /// <remarks/>
        public string subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public StatusEnum status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public string dueTo {
            get {
                return this.dueToField;
            }
            set {
                this.dueToField = value;
            }
        }
        
        /// <remarks/>
        public string done {
            get {
                return this.doneField;
            }
            set {
                this.doneField = value;
            }
        }
        
        /// <remarks/>
        public bool editingByAll {
            get {
                return this.editingByAllField;
            }
            set {
                this.editingByAllField = value;
            }
        }
        
        /// <remarks/>
        public string completedByUserNames {
            get {
                return this.completedByUserNamesField;
            }
            set {
                this.completedByUserNamesField = value;
            }
        }
        
        /// <remarks/>
        public string assignedToUserNames {
            get {
                return this.assignedToUserNamesField;
            }
            set {
                this.assignedToUserNamesField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SComment[] comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SComment {
        
        private string dateField;
        
        private string userIDField;
        
        private string userDisplayNameField;
        
        private string textField;
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string userDisplayName {
            get {
                return this.userDisplayNameField;
            }
            set {
                this.userDisplayNameField = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class STaskInfo {
        
        private string[] completedByUserIDsField;
        
        private SApplicationLink[] applicationLinksField;
        
        private string[] deactivatedTabsField;
        
        private string[] winFormsPluginClassesField;
        
        private string[] silverlightPluginClassesField;
        
        private string[] templateUserAndGroupsField;
        
        private bool showCommentWindowField;
        
        private string idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private StatusEnum statusField;
        
        private string reminderField;
        
        private string dueDateField;
        
        private string creatorIDField;
        
        private string[] recipientIDsField;
        
        private SComment[] commentsField;
        
        private bool requiresAllRecipientsField;
        
        private bool canChangeUsersAndGroupsField;
        
        private bool selectionOnlyFromListedUsersAndGroupsField;
        
        private string taskTemplateIDField;
        
        /// <remarks/>
        public string[] completedByUserIDs {
            get {
                return this.completedByUserIDsField;
            }
            set {
                this.completedByUserIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SApplicationLink[] applicationLinks {
            get {
                return this.applicationLinksField;
            }
            set {
                this.applicationLinksField = value;
            }
        }
        
        /// <remarks/>
        public string[] deactivatedTabs {
            get {
                return this.deactivatedTabsField;
            }
            set {
                this.deactivatedTabsField = value;
            }
        }
        
        /// <remarks/>
        public string[] winFormsPluginClasses {
            get {
                return this.winFormsPluginClassesField;
            }
            set {
                this.winFormsPluginClassesField = value;
            }
        }
        
        /// <remarks/>
        public string[] silverlightPluginClasses {
            get {
                return this.silverlightPluginClassesField;
            }
            set {
                this.silverlightPluginClassesField = value;
            }
        }
        
        /// <remarks/>
        public string[] templateUserAndGroups {
            get {
                return this.templateUserAndGroupsField;
            }
            set {
                this.templateUserAndGroupsField = value;
            }
        }
        
        /// <remarks/>
        public bool showCommentWindow {
            get {
                return this.showCommentWindowField;
            }
            set {
                this.showCommentWindowField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public StatusEnum status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string reminder {
            get {
                return this.reminderField;
            }
            set {
                this.reminderField = value;
            }
        }
        
        /// <remarks/>
        public string dueDate {
            get {
                return this.dueDateField;
            }
            set {
                this.dueDateField = value;
            }
        }
        
        /// <remarks/>
        public string creatorID {
            get {
                return this.creatorIDField;
            }
            set {
                this.creatorIDField = value;
            }
        }
        
        /// <remarks/>
        public string[] recipientIDs {
            get {
                return this.recipientIDsField;
            }
            set {
                this.recipientIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SComment[] comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public bool requiresAllRecipients {
            get {
                return this.requiresAllRecipientsField;
            }
            set {
                this.requiresAllRecipientsField = value;
            }
        }
        
        /// <remarks/>
        public bool canChangeUsersAndGroups {
            get {
                return this.canChangeUsersAndGroupsField;
            }
            set {
                this.canChangeUsersAndGroupsField = value;
            }
        }
        
        /// <remarks/>
        public bool selectionOnlyFromListedUsersAndGroups {
            get {
                return this.selectionOnlyFromListedUsersAndGroupsField;
            }
            set {
                this.selectionOnlyFromListedUsersAndGroupsField = value;
            }
        }
        
        /// <remarks/>
        public string taskTemplateID {
            get {
                return this.taskTemplateIDField;
            }
            set {
                this.taskTemplateIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SApplicationLink {
        
        private string applicationIDField;
        
        private SStringGlobal descriptionField;
        
        private string linkField;
        
        private string cultureField;
        
        /// <remarks/>
        public string applicationID {
            get {
                return this.applicationIDField;
            }
            set {
                this.applicationIDField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        /// <remarks/>
        public string culture {
            get {
                return this.cultureField;
            }
            set {
                this.cultureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProcess {
        
        private string processIDField;
        
        private string storeIDField;
        
        private string nameField;
        
        private string processDueDateField;
        
        private string creationDateField;
        
        private string completionDateField;
        
        private PriorityEnum priorityField;
        
        private SComment[] commentsField;
        
        private STaskInfo currentTaskField;
        
        private string protectionDomainIDField;
        
        private SProcessTrace[] tracesField;
        
        private SPropertyValue[] propertiesField;
        
        private SCustomProperty[] customPropertiesField;
        
        private bool showCommentWindowField;
        
        private byte[] pluginStreamField;
        
        private StatusEnum statusField;
        
        private string processTemplateIDField;
        
        /// <remarks/>
        public string processID {
            get {
                return this.processIDField;
            }
            set {
                this.processIDField = value;
            }
        }
        
        /// <remarks/>
        public string storeID {
            get {
                return this.storeIDField;
            }
            set {
                this.storeIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string processDueDate {
            get {
                return this.processDueDateField;
            }
            set {
                this.processDueDateField = value;
            }
        }
        
        /// <remarks/>
        public string creationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public string completionDate {
            get {
                return this.completionDateField;
            }
            set {
                this.completionDateField = value;
            }
        }
        
        /// <remarks/>
        public PriorityEnum priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SComment[] comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public STaskInfo currentTask {
            get {
                return this.currentTaskField;
            }
            set {
                this.currentTaskField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SProcessTrace[] traces {
            get {
                return this.tracesField;
            }
            set {
                this.tracesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyValue[] properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SCustomProperty[] customProperties {
            get {
                return this.customPropertiesField;
            }
            set {
                this.customPropertiesField = value;
            }
        }
        
        /// <remarks/>
        public bool showCommentWindow {
            get {
                return this.showCommentWindowField;
            }
            set {
                this.showCommentWindowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pluginStream {
            get {
                return this.pluginStreamField;
            }
            set {
                this.pluginStreamField = value;
            }
        }
        
        /// <remarks/>
        public StatusEnum status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string processTemplateID {
            get {
                return this.processTemplateIDField;
            }
            set {
                this.processTemplateIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyValue {
        
        private string[] propertyValuesField;
        
        private string typeIDField;
        
        /// <remarks/>
        public string[] propertyValues {
            get {
                return this.propertyValuesField;
            }
            set {
                this.propertyValuesField = value;
            }
        }
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SCustomProperty {
        
        private string nameField;
        
        private string propertyValueField;
        
        private string fieldTypeField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string propertyValue {
            get {
                return this.propertyValueField;
            }
            set {
                this.propertyValueField = value;
            }
        }
        
        /// <remarks/>
        public string fieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SPropertyCategory {
        
        private string internalIDField;
        
        private string nameField;
        
        private SStringGlobal nameGlobalField;
        
        /// <remarks/>
        public string internalID {
            get {
                return this.internalIDField;
            }
            set {
                this.internalIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal nameGlobal {
            get {
                return this.nameGlobalField;
            }
            set {
                this.nameGlobalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SCondition {
        
        private string typeIDField;
        
        private string nameField;
        
        private string operationField;
        
        private Relations relationField;
        
        private string comparisonValueField;
        
        private string comparisonPropertyNameField;
        
        private string comparisonPropertyIDField;
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public Relations relation {
            get {
                return this.relationField;
            }
            set {
                this.relationField = value;
            }
        }
        
        /// <remarks/>
        public string comparisonValue {
            get {
                return this.comparisonValueField;
            }
            set {
                this.comparisonValueField = value;
            }
        }
        
        /// <remarks/>
        public string comparisonPropertyName {
            get {
                return this.comparisonPropertyNameField;
            }
            set {
                this.comparisonPropertyNameField = value;
            }
        }
        
        /// <remarks/>
        public string comparisonPropertyID {
            get {
                return this.comparisonPropertyIDField;
            }
            set {
                this.comparisonPropertyIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class STaskExt {
        
        private string taskTypeField;
        
        private SStringGlobal nameField;
        
        private bool closeProcessAfterCompletionField;
        
        private string internalIDField;
        
        private SStringGlobal descriptionField;
        
        private string trueSuccessorIDField;
        
        private string falseSuccessorIDField;
        
        private int finalDaysField;
        
        private string[] taskUserIDsField;
        
        private string[] taskGroupIDsField;
        
        private string[] escalationUserIDsField;
        
        private string[] escalationGroupIDsField;
        
        private SApplicationLink[] applicationLinksField;
        
        private bool completionByAllNecessaryField;
        
        private bool showCommentWindowField;
        
        private bool allowToChangeUsersAndGroupsField;
        
        private bool selectionOnlyFromSelecteUsersField;
        
        private string mailDeliveryModeField;
        
        private string webServiceUrlField;
        
        private SCondition[] conditionsField;
        
        private string[] deactivatedTabsField;
        
        private string[] winFormsPluginClassesField;
        
        private string[] silverlightPluginClassesField;
        
        /// <remarks/>
        public string taskType {
            get {
                return this.taskTypeField;
            }
            set {
                this.taskTypeField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool closeProcessAfterCompletion {
            get {
                return this.closeProcessAfterCompletionField;
            }
            set {
                this.closeProcessAfterCompletionField = value;
            }
        }
        
        /// <remarks/>
        public string internalID {
            get {
                return this.internalIDField;
            }
            set {
                this.internalIDField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string trueSuccessorID {
            get {
                return this.trueSuccessorIDField;
            }
            set {
                this.trueSuccessorIDField = value;
            }
        }
        
        /// <remarks/>
        public string falseSuccessorID {
            get {
                return this.falseSuccessorIDField;
            }
            set {
                this.falseSuccessorIDField = value;
            }
        }
        
        /// <remarks/>
        public int finalDays {
            get {
                return this.finalDaysField;
            }
            set {
                this.finalDaysField = value;
            }
        }
        
        /// <remarks/>
        public string[] taskUserIDs {
            get {
                return this.taskUserIDsField;
            }
            set {
                this.taskUserIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] taskGroupIDs {
            get {
                return this.taskGroupIDsField;
            }
            set {
                this.taskGroupIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] escalationUserIDs {
            get {
                return this.escalationUserIDsField;
            }
            set {
                this.escalationUserIDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] escalationGroupIDs {
            get {
                return this.escalationGroupIDsField;
            }
            set {
                this.escalationGroupIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SApplicationLink[] applicationLinks {
            get {
                return this.applicationLinksField;
            }
            set {
                this.applicationLinksField = value;
            }
        }
        
        /// <remarks/>
        public bool completionByAllNecessary {
            get {
                return this.completionByAllNecessaryField;
            }
            set {
                this.completionByAllNecessaryField = value;
            }
        }
        
        /// <remarks/>
        public bool showCommentWindow {
            get {
                return this.showCommentWindowField;
            }
            set {
                this.showCommentWindowField = value;
            }
        }
        
        /// <remarks/>
        public bool allowToChangeUsersAndGroups {
            get {
                return this.allowToChangeUsersAndGroupsField;
            }
            set {
                this.allowToChangeUsersAndGroupsField = value;
            }
        }
        
        /// <remarks/>
        public bool selectionOnlyFromSelecteUsers {
            get {
                return this.selectionOnlyFromSelecteUsersField;
            }
            set {
                this.selectionOnlyFromSelecteUsersField = value;
            }
        }
        
        /// <remarks/>
        public string mailDeliveryMode {
            get {
                return this.mailDeliveryModeField;
            }
            set {
                this.mailDeliveryModeField = value;
            }
        }
        
        /// <remarks/>
        public string webServiceUrl {
            get {
                return this.webServiceUrlField;
            }
            set {
                this.webServiceUrlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SCondition[] conditions {
            get {
                return this.conditionsField;
            }
            set {
                this.conditionsField = value;
            }
        }
        
        /// <remarks/>
        public string[] deactivatedTabs {
            get {
                return this.deactivatedTabsField;
            }
            set {
                this.deactivatedTabsField = value;
            }
        }
        
        /// <remarks/>
        public string[] winFormsPluginClasses {
            get {
                return this.winFormsPluginClassesField;
            }
            set {
                this.winFormsPluginClassesField = value;
            }
        }
        
        /// <remarks/>
        public string[] silverlightPluginClasses {
            get {
                return this.silverlightPluginClassesField;
            }
            set {
                this.silverlightPluginClassesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProcessTemplateExt {
        
        private SStringGlobal nameField;
        
        private string internalIDField;
        
        private SStringGlobal processNameField;
        
        private SStringGlobal descriptionField;
        
        private string defaultLanguageField;
        
        private string protectionDomainIDField;
        
        private PriorityEnum priorityField;
        
        private int daysAfterCreationField;
        
        private string importTemplateIDField;
        
        private bool assumeDocumentPropertiesField;
        
        private bool addProcessPropertiesToDocumentField;
        
        private bool assignToCreatorAfterCompletionField;
        
        private bool showCommentWindowField;
        
        private STaskExt[] tasksField;
        
        private SPropertyValue[] propertiesField;
        
        private SCustomProperty[] customPropertiesField;
        
        private byte[] diagrammField;
        
        private SSearchFolderColumnsConfig columnConfigurationField;
        
        private string expirationDateField;
        
        /// <remarks/>
        public SStringGlobal name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string internalID {
            get {
                return this.internalIDField;
            }
            set {
                this.internalIDField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string defaultLanguage {
            get {
                return this.defaultLanguageField;
            }
            set {
                this.defaultLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        public PriorityEnum priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        public int daysAfterCreation {
            get {
                return this.daysAfterCreationField;
            }
            set {
                this.daysAfterCreationField = value;
            }
        }
        
        /// <remarks/>
        public string importTemplateID {
            get {
                return this.importTemplateIDField;
            }
            set {
                this.importTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public bool assumeDocumentProperties {
            get {
                return this.assumeDocumentPropertiesField;
            }
            set {
                this.assumeDocumentPropertiesField = value;
            }
        }
        
        /// <remarks/>
        public bool addProcessPropertiesToDocument {
            get {
                return this.addProcessPropertiesToDocumentField;
            }
            set {
                this.addProcessPropertiesToDocumentField = value;
            }
        }
        
        /// <remarks/>
        public bool assignToCreatorAfterCompletion {
            get {
                return this.assignToCreatorAfterCompletionField;
            }
            set {
                this.assignToCreatorAfterCompletionField = value;
            }
        }
        
        /// <remarks/>
        public bool showCommentWindow {
            get {
                return this.showCommentWindowField;
            }
            set {
                this.showCommentWindowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public STaskExt[] tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SPropertyValue[] properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SCustomProperty[] customProperties {
            get {
                return this.customPropertiesField;
            }
            set {
                this.customPropertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] diagramm {
            get {
                return this.diagrammField;
            }
            set {
                this.diagrammField = value;
            }
        }
        
        /// <remarks/>
        public SSearchFolderColumnsConfig columnConfiguration {
            get {
                return this.columnConfigurationField;
            }
            set {
                this.columnConfigurationField = value;
            }
        }
        
        /// <remarks/>
        public string expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchFolderColumnsConfig {
        
        private bool inheritFromParentField;
        
        private bool saveSortField;
        
        private bool saveForAllUsersField;
        
        private SColumnInformation[] columnsField;
        
        private bool showAggregateFunctionsField;
        
        private bool showColumnFiltersField;
        
        private bool showGroupsExpandedField;
        
        /// <remarks/>
        public bool inheritFromParent {
            get {
                return this.inheritFromParentField;
            }
            set {
                this.inheritFromParentField = value;
            }
        }
        
        /// <remarks/>
        public bool saveSort {
            get {
                return this.saveSortField;
            }
            set {
                this.saveSortField = value;
            }
        }
        
        /// <remarks/>
        public bool saveForAllUsers {
            get {
                return this.saveForAllUsersField;
            }
            set {
                this.saveForAllUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SColumnInformation[] columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
            }
        }
        
        /// <remarks/>
        public bool showAggregateFunctions {
            get {
                return this.showAggregateFunctionsField;
            }
            set {
                this.showAggregateFunctionsField = value;
            }
        }
        
        /// <remarks/>
        public bool showColumnFilters {
            get {
                return this.showColumnFiltersField;
            }
            set {
                this.showColumnFiltersField = value;
            }
        }
        
        /// <remarks/>
        public bool showGroupsExpanded {
            get {
                return this.showGroupsExpandedField;
            }
            set {
                this.showGroupsExpandedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SColumnInformation {
        
        private string nameField;
        
        private string pluginnameField;
        
        private string typeIDField;
        
        private bool isGroupedField;
        
        private ColumnAlignEnum columnAlignField;
        
        private bool isSortedField;
        
        private int columnWidthField;
        
        private SortOrderEnum sortOrderField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string pluginname {
            get {
                return this.pluginnameField;
            }
            set {
                this.pluginnameField = value;
            }
        }
        
        /// <remarks/>
        public string typeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isGrouped {
            get {
                return this.isGroupedField;
            }
            set {
                this.isGroupedField = value;
            }
        }
        
        /// <remarks/>
        public ColumnAlignEnum columnAlign {
            get {
                return this.columnAlignField;
            }
            set {
                this.columnAlignField = value;
            }
        }
        
        /// <remarks/>
        public bool isSorted {
            get {
                return this.isSortedField;
            }
            set {
                this.isSortedField = value;
            }
        }
        
        /// <remarks/>
        public int columnWidth {
            get {
                return this.columnWidthField;
            }
            set {
                this.columnWidthField = value;
            }
        }
        
        /// <remarks/>
        public SortOrderEnum sortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum ColumnAlignEnum {
        
        /// <remarks/>
        LEFT,
        
        /// <remarks/>
        CENTER,
        
        /// <remarks/>
        RIGHT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum SortOrderEnum {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class OverlayDocument {
        
        private int offsetXField;
        
        private int offsetYField;
        
        private string overlayFileNameField;
        
        private System.Guid overlayDocumentIDField;
        
        /// <remarks/>
        public int OffsetX {
            get {
                return this.offsetXField;
            }
            set {
                this.offsetXField = value;
            }
        }
        
        /// <remarks/>
        public int OffsetY {
            get {
                return this.offsetYField;
            }
            set {
                this.offsetYField = value;
            }
        }
        
        /// <remarks/>
        public string OverlayFileName {
            get {
                return this.overlayFileNameField;
            }
            set {
                this.overlayFileNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OverlayDocumentID {
            get {
                return this.overlayDocumentIDField;
            }
            set {
                this.overlayDocumentIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SProtectionDomain {
        
        private string nameField;
        
        private string idField;
        
        private string[] rolesField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string[] roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SLifeCycleState {
        
        private string nameField;
        
        private string idField;
        
        private bool changeOnCheckOutField;
        
        private string checkOutSuccessorStateField;
        
        private string[] successorStatesField;
        
        private string[] stateRestrictionsField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool changeOnCheckOut {
            get {
                return this.changeOnCheckOutField;
            }
            set {
                this.changeOnCheckOutField = value;
            }
        }
        
        /// <remarks/>
        public string checkOutSuccessorState {
            get {
                return this.checkOutSuccessorStateField;
            }
            set {
                this.checkOutSuccessorStateField = value;
            }
        }
        
        /// <remarks/>
        public string[] successorStates {
            get {
                return this.successorStatesField;
            }
            set {
                this.successorStatesField = value;
            }
        }
        
        /// <remarks/>
        public string[] stateRestrictions {
            get {
                return this.stateRestrictionsField;
            }
            set {
                this.stateRestrictionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SLifeCycle {
        
        private string nameField;
        
        private SLifeCycleState startStateField;
        
        private string idField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SLifeCycleState startState {
            get {
                return this.startStateField;
            }
            set {
                this.startStateField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SFolderData {
        
        private string absoluteFolderPathField;
        
        private SDocument[] documentArrayField;
        
        private SFolderInfo[] folderInfoArrayField;
        
        private SFolderInfo[] searchFolderInfoArrayField;
        
        private SColumnInformation[] columnInfoArrayField;
        
        private SDocument[] processArrayField;
        
        private bool inheritFromParentField;
        
        private bool includeSubFoldersField;
        
        private string idField;
        
        private bool showAggregateFunctionsField;
        
        private bool showColumnFiltersField;
        
        private bool showGroupsExpandedField;
        
        private string titleField;
        
        private SStringGlobal titelGlobalField;
        
        private string importTemplateIDField;
        
        private string protectionDomainIDField;
        
        private SDocumentProperty[] propertiesField;
        
        private bool saveForAllUsersField;
        
        private bool canSaveAsMasterField;
        
        /// <remarks/>
        public string absoluteFolderPath {
            get {
                return this.absoluteFolderPathField;
            }
            set {
                this.absoluteFolderPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] documentArray {
            get {
                return this.documentArrayField;
            }
            set {
                this.documentArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] folderInfoArray {
            get {
                return this.folderInfoArrayField;
            }
            set {
                this.folderInfoArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] searchFolderInfoArray {
            get {
                return this.searchFolderInfoArrayField;
            }
            set {
                this.searchFolderInfoArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SColumnInformation[] columnInfoArray {
            get {
                return this.columnInfoArrayField;
            }
            set {
                this.columnInfoArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocument[] processArray {
            get {
                return this.processArrayField;
            }
            set {
                this.processArrayField = value;
            }
        }
        
        /// <remarks/>
        public bool inheritFromParent {
            get {
                return this.inheritFromParentField;
            }
            set {
                this.inheritFromParentField = value;
            }
        }
        
        /// <remarks/>
        public bool includeSubFolders {
            get {
                return this.includeSubFoldersField;
            }
            set {
                this.includeSubFoldersField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool showAggregateFunctions {
            get {
                return this.showAggregateFunctionsField;
            }
            set {
                this.showAggregateFunctionsField = value;
            }
        }
        
        /// <remarks/>
        public bool showColumnFilters {
            get {
                return this.showColumnFiltersField;
            }
            set {
                this.showColumnFiltersField = value;
            }
        }
        
        /// <remarks/>
        public bool showGroupsExpanded {
            get {
                return this.showGroupsExpandedField;
            }
            set {
                this.showGroupsExpandedField = value;
            }
        }
        
        /// <remarks/>
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal titelGlobal {
            get {
                return this.titelGlobalField;
            }
            set {
                this.titelGlobalField = value;
            }
        }
        
        /// <remarks/>
        public string importTemplateID {
            get {
                return this.importTemplateIDField;
            }
            set {
                this.importTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SDocumentProperty[] properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        public bool saveForAllUsers {
            get {
                return this.saveForAllUsersField;
            }
            set {
                this.saveForAllUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool canSaveAsMaster {
            get {
                return this.canSaveAsMasterField;
            }
            set {
                this.canSaveAsMasterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SFolderInfo {
        
        private string folderNameField;
        
        private string absoluteFolderPathField;
        
        private SFolderInfo[] subFoldersField;
        
        private bool isSearchFolderField;
        
        private bool isPrivateField;
        
        /// <remarks/>
        public string folderName {
            get {
                return this.folderNameField;
            }
            set {
                this.folderNameField = value;
            }
        }
        
        /// <remarks/>
        public string absoluteFolderPath {
            get {
                return this.absoluteFolderPathField;
            }
            set {
                this.absoluteFolderPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SFolderInfo[] subFolders {
            get {
                return this.subFoldersField;
            }
            set {
                this.subFoldersField = value;
            }
        }
        
        /// <remarks/>
        public bool isSearchFolder {
            get {
                return this.isSearchFolderField;
            }
            set {
                this.isSearchFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool isPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SFulltextSearchCondition {
        
        private string fullTextWordsField;
        
        private FulltextWordRelations fulltextWordRelationField;
        
        private bool isFulltextActivatedField;
        
        /// <remarks/>
        public string fullTextWords {
            get {
                return this.fullTextWordsField;
            }
            set {
                this.fullTextWordsField = value;
            }
        }
        
        /// <remarks/>
        public FulltextWordRelations fulltextWordRelation {
            get {
                return this.fulltextWordRelationField;
            }
            set {
                this.fulltextWordRelationField = value;
            }
        }
        
        /// <remarks/>
        public bool isFulltextActivated {
            get {
                return this.isFulltextActivatedField;
            }
            set {
                this.isFulltextActivatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum FulltextWordRelations {
        
        /// <remarks/>
        AND,
        
        /// <remarks/>
        OR,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchConditionSimple {
        
        private string propertyTypeIDField;
        
        private string propertyTypeSimpleDescriptionField;
        
        private bool isEditableField;
        
        private bool isVisibleField;
        
        private SStringGlobal propertyTypeSimpleDescriptionGlobalField;
        
        /// <remarks/>
        public string propertyTypeID {
            get {
                return this.propertyTypeIDField;
            }
            set {
                this.propertyTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string propertyTypeSimpleDescription {
            get {
                return this.propertyTypeSimpleDescriptionField;
            }
            set {
                this.propertyTypeSimpleDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool isEditable {
            get {
                return this.isEditableField;
            }
            set {
                this.isEditableField = value;
            }
        }
        
        /// <remarks/>
        public bool isVisible {
            get {
                return this.isVisibleField;
            }
            set {
                this.isVisibleField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal propertyTypeSimpleDescriptionGlobal {
            get {
                return this.propertyTypeSimpleDescriptionGlobalField;
            }
            set {
                this.propertyTypeSimpleDescriptionGlobalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchCondition {
        
        private string propertyTypeNameField;
        
        private string propertyTypeIDField;
        
        private string propertyTypePluginNameField;
        
        private string operationField;
        
        private string[] propertyValueArrayField;
        
        private string placeholderField;
        
        private Relations relationField;
        
        /// <remarks/>
        public string propertyTypeName {
            get {
                return this.propertyTypeNameField;
            }
            set {
                this.propertyTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string propertyTypeID {
            get {
                return this.propertyTypeIDField;
            }
            set {
                this.propertyTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string PropertyTypePluginName {
            get {
                return this.propertyTypePluginNameField;
            }
            set {
                this.propertyTypePluginNameField = value;
            }
        }
        
        /// <remarks/>
        public string operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public string[] propertyValueArray {
            get {
                return this.propertyValueArrayField;
            }
            set {
                this.propertyValueArrayField = value;
            }
        }
        
        /// <remarks/>
        public string placeholder {
            get {
                return this.placeholderField;
            }
            set {
                this.placeholderField = value;
            }
        }
        
        /// <remarks/>
        public Relations relation {
            get {
                return this.relationField;
            }
            set {
                this.relationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSearchFolderData {
        
        private string titleField;
        
        private SStringGlobal titelGlobalField;
        
        private string idField;
        
        private string commentField;
        
        private SColumnInformation[] columnInfoArrayField;
        
        private SSearchCondition[] searchConditionsArrayField;
        
        private SSearchConditionSimple[] searchConditionsSimpleArrayField;
        
        private SInfoStore[] infoStoreArrayField;
        
        private SFulltextSearchCondition fulltextSearchCondField;
        
        private int pageSizeField;
        
        private string absoluteSearchFolderPathField;
        
        private bool isSimpleSearchField;
        
        private bool inheritFromParentField;
        
        private bool useWebDataProviderField;
        
        private SStringGlobal commentGlobalField;
        
        private bool useWildCardField;
        
        private bool saveSortField;
        
        private bool saveForAllUsersField;
        
        private bool canSaveAsMasterField;
        
        private bool showInfoStoresField;
        
        private string protectionDomainIDField;
        
        private bool showAggregateFunctionsField;
        
        private bool showColumnFiltersField;
        
        private bool showGroupsExpandedField;
        
        /// <remarks/>
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal titelGlobal {
            get {
                return this.titelGlobalField;
            }
            set {
                this.titelGlobalField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SColumnInformation[] columnInfoArray {
            get {
                return this.columnInfoArrayField;
            }
            set {
                this.columnInfoArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSearchCondition[] searchConditionsArray {
            get {
                return this.searchConditionsArrayField;
            }
            set {
                this.searchConditionsArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SSearchConditionSimple[] searchConditionsSimpleArray {
            get {
                return this.searchConditionsSimpleArrayField;
            }
            set {
                this.searchConditionsSimpleArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SInfoStore[] infoStoreArray {
            get {
                return this.infoStoreArrayField;
            }
            set {
                this.infoStoreArrayField = value;
            }
        }
        
        /// <remarks/>
        public SFulltextSearchCondition fulltextSearchCond {
            get {
                return this.fulltextSearchCondField;
            }
            set {
                this.fulltextSearchCondField = value;
            }
        }
        
        /// <remarks/>
        public int pageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public string absoluteSearchFolderPath {
            get {
                return this.absoluteSearchFolderPathField;
            }
            set {
                this.absoluteSearchFolderPathField = value;
            }
        }
        
        /// <remarks/>
        public bool isSimpleSearch {
            get {
                return this.isSimpleSearchField;
            }
            set {
                this.isSimpleSearchField = value;
            }
        }
        
        /// <remarks/>
        public bool inheritFromParent {
            get {
                return this.inheritFromParentField;
            }
            set {
                this.inheritFromParentField = value;
            }
        }
        
        /// <remarks/>
        public bool useWebDataProvider {
            get {
                return this.useWebDataProviderField;
            }
            set {
                this.useWebDataProviderField = value;
            }
        }
        
        /// <remarks/>
        public SStringGlobal commentGlobal {
            get {
                return this.commentGlobalField;
            }
            set {
                this.commentGlobalField = value;
            }
        }
        
        /// <remarks/>
        public bool useWildCard {
            get {
                return this.useWildCardField;
            }
            set {
                this.useWildCardField = value;
            }
        }
        
        /// <remarks/>
        public bool saveSort {
            get {
                return this.saveSortField;
            }
            set {
                this.saveSortField = value;
            }
        }
        
        /// <remarks/>
        public bool saveForAllUsers {
            get {
                return this.saveForAllUsersField;
            }
            set {
                this.saveForAllUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool canSaveAsMaster {
            get {
                return this.canSaveAsMasterField;
            }
            set {
                this.canSaveAsMasterField = value;
            }
        }
        
        /// <remarks/>
        public bool showInfoStores {
            get {
                return this.showInfoStoresField;
            }
            set {
                this.showInfoStoresField = value;
            }
        }
        
        /// <remarks/>
        public string protectionDomainID {
            get {
                return this.protectionDomainIDField;
            }
            set {
                this.protectionDomainIDField = value;
            }
        }
        
        /// <remarks/>
        public bool showAggregateFunctions {
            get {
                return this.showAggregateFunctionsField;
            }
            set {
                this.showAggregateFunctionsField = value;
            }
        }
        
        /// <remarks/>
        public bool showColumnFilters {
            get {
                return this.showColumnFiltersField;
            }
            set {
                this.showColumnFiltersField = value;
            }
        }
        
        /// <remarks/>
        public bool showGroupsExpanded {
            get {
                return this.showGroupsExpandedField;
            }
            set {
                this.showGroupsExpandedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SSignatureCheck {
        
        private string signatureIDField;
        
        private bool isValidField;
        
        /// <remarks/>
        public string signatureID {
            get {
                return this.signatureIDField;
            }
            set {
                this.signatureIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isValid {
            get {
                return this.isValidField;
            }
            set {
                this.isValidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public partial class SDocumentHistoryLog {
        
        private string versionIDField;
        
        private string dateField;
        
        private string userField;
        
        private string nameField;
        
        private string versionField;
        
        private ModificationTypesEnum[] modificationTypesField;
        
        private string modificationTypesHumanReadableNameField;
        
        private string modificationCountField;
        
        private bool hasSignatureField;
        
        private string commentField;
        
        /// <remarks/>
        public string versionID {
            get {
                return this.versionIDField;
            }
            set {
                this.versionIDField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public ModificationTypesEnum[] modificationTypes {
            get {
                return this.modificationTypesField;
            }
            set {
                this.modificationTypesField = value;
            }
        }
        
        /// <remarks/>
        public string modificationTypesHumanReadableName {
            get {
                return this.modificationTypesHumanReadableNameField;
            }
            set {
                this.modificationTypesHumanReadableNameField = value;
            }
        }
        
        /// <remarks/>
        public string modificationCount {
            get {
                return this.modificationCountField;
            }
            set {
                this.modificationCountField = value;
            }
        }
        
        /// <remarks/>
        public bool hasSignature {
            get {
                return this.hasSignatureField;
            }
            set {
                this.hasSignatureField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum StampModifier {
        
        /// <remarks/>
        ADD,
        
        /// <remarks/>
        DELETE,
        
        /// <remarks/>
        UPDATE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum StampValidity {
        
        /// <remarks/>
        GLOBAL,
        
        /// <remarks/>
        PERSONAL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum SignatureProfileDomain {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        CLIENT,
        
        /// <remarks/>
        SERVER,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.kendox.com/")]
    public enum PropertyTypeEditEnum {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        EDITABLE,
        
        /// <remarks/>
        SYSTEM,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CanEditSchemaInfoCompletedEventHandler(object sender, CanEditSchemaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanEditSchemaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanEditSchemaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CanEditUserInfoCompletedEventHandler(object sender, CanEditUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanEditUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanEditUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSubscriptionListCompletedEventHandler(object sender, GetSubscriptionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSubscription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSubscription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetChangeLogListCompletedEventHandler(object sender, GetChangeLogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChangeLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChangeLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentHistoryLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentHistoryLog[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckSignaturesCompletedEventHandler(object sender, CheckSignaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSignaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSignaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSignatureCheck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSignatureCheck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RenameFolderCompletedEventHandler(object sender, RenameFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RenameDocumentInFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetSearchFolderColumnsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditSearchFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditFolderCompletedEventHandler(object sender, EditFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateSearchFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateSearchFolderSimpleCompletedEventHandler(object sender, CreateSearchFolderSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSearchFolderSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSearchFolderSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteSearchFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteFolderReferenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetFolderPropertiesCompletedEventHandler(object sender, SetFolderPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFolderPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFolderPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ResetFolderPropertiesCompletedEventHandler(object sender, ResetFolderPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetFolderPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetFolderPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DecryptURLCompletedEventHandler(object sender, DecryptURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EncryptURLCompletedEventHandler(object sender, EncryptURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ModifyAnnotationStampCompletedEventHandler(object sender, ModifyAnnotationStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyAnnotationStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyAnnotationStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllAnnotationStampsCompletedEventHandler(object sender, GetAllAnnotationStampsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAnnotationStampsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAnnotationStampsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveDefaultRectangleAnnotationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDefaultRectangleAnnotationCompletedEventHandler(object sender, GetDefaultRectangleAnnotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultRectangleAnnotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultRectangleAnnotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllLifeCyclesCompletedEventHandler(object sender, GetAllLifeCyclesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLifeCyclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLifeCyclesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SLifeCycle[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SLifeCycle[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetLifeCycleCompletedEventHandler(object sender, GetLifeCycleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLifeCycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLifeCycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SLifeCycle Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SLifeCycle)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSuccessorLifeCycleStatesCompletedEventHandler(object sender, GetSuccessorLifeCycleStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSuccessorLifeCycleStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSuccessorLifeCycleStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SLifeCycleState[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SLifeCycleState[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllProtectionDomainsCompletedEventHandler(object sender, GetAllProtectionDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllProtectionDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllProtectionDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProtectionDomain[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProtectionDomain[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllProtectionDomainsWithRightsCompletedEventHandler(object sender, GetAllProtectionDomainsWithRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllProtectionDomainsWithRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllProtectionDomainsWithRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProtectionDomain[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProtectionDomain[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetNextVersionNumberCompletedEventHandler(object sender, GetNextVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetOverlayDocumentCompletedEventHandler(object sender, GetOverlayDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOverlayDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOverlayDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public OverlayDocument overlayInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OverlayDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetOverlayDocumentConvertedCompletedEventHandler(object sender, GetOverlayDocumentConvertedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOverlayDocumentConvertedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOverlayDocumentConvertedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public OverlayDocument overlayInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OverlayDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllProcessTemplatesCompletedEventHandler(object sender, GetAllProcessTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllProcessTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllProcessTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProcessTemplateExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProcessTemplateExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateProcessCompletedEventHandler(object sender, CreateProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreatePropertyCategoryCompletedEventHandler(object sender, CreatePropertyCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePropertyCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePropertyCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void StartProcessTasksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateProcessWithoutTasksCompletedEventHandler(object sender, CreateProcessWithoutTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProcessWithoutTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProcessWithoutTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AssumeAssignedTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TakeActiveActionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProcessCompletedEventHandler(object sender, GetProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProcess Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProcess)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CompleteCurrentTaskCompletedEventHandler(object sender, CompleteCurrentTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteCurrentTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteCurrentTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CompleteProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CompleteOngoingProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AssignTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddDocumentsToProcessCompletedEventHandler(object sender, AddDocumentsToProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDocumentsToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDocumentsToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentsFromProcessCompletedEventHandler(object sender, GetDocumentsFromProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsFromProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsFromProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SSearchFolderColumnsConfig searchFolderConfig {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchFolderColumnsConfig)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveDocumentFromProcessCompletedEventHandler(object sender, RemoveDocumentFromProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveDocumentFromProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveDocumentFromProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void MoveDocumentCompletedEventHandler(object sender, MoveDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendDocumentsByEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendEmailCompletedEventHandler(object sender, SendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddAccessLogEntryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateDocumentFromTemplateCompletedEventHandler(object sender, CreateDocumentFromTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDocumentFromTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDocumentFromTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetLicensedApplicationIntegrationUserCompletedEventHandler(object sender, GetLicensedApplicationIntegrationUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicensedApplicationIntegrationUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicensedApplicationIntegrationUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetLicensedNamedUserCompletedEventHandler(object sender, GetLicensedNamedUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicensedNamedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicensedNamedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetTemplateFolderPathCompletedEventHandler(object sender, GetTemplateFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplateFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplateFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetTemplateFolderPathCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetModuleFolderPathCompletedEventHandler(object sender, GetModuleFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModuleFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModuleFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetModuleFolderPathCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetLastSelectedFolderPathCompletedEventHandler(object sender, GetLastSelectedFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastSelectedFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastSelectedFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetLastSelectedFolderPathCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetClientSettingsCompletedEventHandler(object sender, GetClientSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SClientSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SClientSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateProtectionDomainCompletedEventHandler(object sender, CreateProtectionDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProtectionDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProtectionDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditProtectionDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteProtectionDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateDocumentReminderCompletedEventHandler(object sender, CreateDocumentReminderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDocumentReminderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDocumentReminderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetThumbnailListCompletedEventHandler(object sender, GetThumbnailListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThumbnailListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThumbnailListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SThumbnail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SThumbnail[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int previousThumbnails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int nextThumbnails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool hasMorePreviousThumbnails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool hasMoreNextThumbnails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateRemindersForDocumentCompletedEventHandler(object sender, UpdateRemindersForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRemindersForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRemindersForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllRemindersForDocumentCompletedEventHandler(object sender, GetAllRemindersForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRemindersForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRemindersForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SReminder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SReminder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteRemindersForDocumentCompletedEventHandler(object sender, DeleteRemindersForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRemindersForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRemindersForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateTemporaryReleasedDossierFilesCompletedEventHandler(object sender, CreateTemporaryReleasedDossierFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTemporaryReleasedDossierFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTemporaryReleasedDossierFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetReleaseHandlersForDossierCompletedEventHandler(object sender, GetReleaseHandlersForDossierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleaseHandlersForDossierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReleaseHandlersForDossierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SReleaseHandler[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SReleaseHandler[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteReleaseHandlersCompletedEventHandler(object sender, DeleteReleaseHandlersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteReleaseHandlersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteReleaseHandlersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateReleaseHandlersCompletedEventHandler(object sender, UpdateReleaseHandlersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateReleaseHandlersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateReleaseHandlersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TestURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateProcessTemplateCompletedEventHandler(object sender, CreateProcessTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProcessTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProcessTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditProcessTemplateCompletedEventHandler(object sender, EditProcessTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProcessTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProcessTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteProcessTemplatesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TestLicenceFeatureCompletedEventHandler(object sender, TestLicenceFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestLicenceFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestLicenceFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentsZippedCompletedEventHandler(object sender, GetDocumentsZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveLatestVersionCompletedEventHandler(object sender, RemoveLatestVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveLatestVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveLatestVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RenameCompletedEventHandler(object sender, RenameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void PrintCompletedEventHandler(object sender, PrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPrinterListCompletedEventHandler(object sender, GetPrinterListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrinterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrinterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveVersionCompletedEventHandler(object sender, RemoveVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCommonDefinitionsCompletedEventHandler(object sender, GetCommonDefinitionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommonDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommonDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPair[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPair[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangeMobileNumberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangePasswordForUserIDCompletedEventHandler(object sender, ChangePasswordForUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllSearchFolderDataCompletedEventHandler(object sender, GetAllSearchFolderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSearchFolderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSearchFolderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSearchFolderData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchFolderData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllFolderInfoCompletedEventHandler(object sender, GetAllFolderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllFolderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllFolderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveDocumentsFromFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllSearchFolderInfoFromFolderCompletedEventHandler(object sender, GetAllSearchFolderInfoFromFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSearchFolderInfoFromFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSearchFolderInfoFromFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllFolderInfoFromFolderCompletedEventHandler(object sender, GetAllFolderInfoFromFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllFolderInfoFromFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllFolderInfoFromFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllFolderInfoAlongFolderPathCompletedEventHandler(object sender, GetAllFolderInfoAlongFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllFolderInfoAlongFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllFolderInfoAlongFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void FindNextFolderCompletedEventHandler(object sender, FindNextFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindNextFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindNextFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllSearchFolderDataFromFolderCompletedEventHandler(object sender, GetAllSearchFolderDataFromFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSearchFolderDataFromFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSearchFolderDataFromFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSearchFolderData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchFolderData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSearchFolderDataCompletedEventHandler(object sender, GetSearchFolderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSearchFolderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSearchFolderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSearchFolderData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchFolderData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDefaultSearchFolderDataCompletedEventHandler(object sender, GetDefaultSearchFolderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultSearchFolderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultSearchFolderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSearchFolderData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchFolderData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllInfoStoresCompletedEventHandler(object sender, GetAllInfoStoresCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllInfoStoresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllInfoStoresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SInfoStore[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SInfoStore[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProcessStoreCompletedEventHandler(object sender, GetProcessStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SInfoStore Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SInfoStore)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSignatureFileCompletedEventHandler(object sender, GetSignatureFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignatureFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignatureFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sigFilePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void HasSignatureReportCompletedEventHandler(object sender, HasSignatureReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasSignatureReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasSignatureReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSignatureReportCompletedEventHandler(object sender, GetSignatureReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignatureReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignatureReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sigReportFilePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSignaturesCompletedEventHandler(object sender, GetSignaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileJSONCompletedEventHandler(object sender, GetDocumentFileJSONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileJSONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileJSONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileCompletedEventHandler(object sender, GetDocumentFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileEncodedCompletedEventHandler(object sender, GetDocumentFileEncodedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileEncodedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileEncodedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileConvertedCompletedEventHandler(object sender, GetDocumentFileConvertedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileConvertedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileConvertedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument docInformation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ConvertFileCompletedEventHandler(object sender, ConvertFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pageCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetConverterProfilesCompletedEventHandler(object sender, GetConverterProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConverterProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConverterProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProfile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProfile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileWithTransactionCompletedEventHandler(object sender, GetDocumentFileWithTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileWithTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileWithTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileVersionWithTransactionCompletedEventHandler(object sender, GetDocumentFileVersionWithTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileVersionWithTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileVersionWithTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileSimpleWithSessionCompletedEventHandler(object sender, GetDocumentFileSimpleWithSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileSimpleWithSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileSimpleWithSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileSimpleCompletedEventHandler(object sender, GetDocumentFileSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileSimpleWithSingleSignOnCompletedEventHandler(object sender, GetDocumentFileSimpleWithSingleSignOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileSimpleWithSingleSignOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileSimpleWithSingleSignOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveFileJSONCompletedEventHandler(object sender, SaveFileJSONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileJSONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileJSONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveFileCompletedEventHandler(object sender, SaveFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string newStoreID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveFileWithTransactionJSONCompletedEventHandler(object sender, SaveFileWithTransactionJSONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileWithTransactionJSONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileWithTransactionJSONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveFileWithTransactionIgnoreIsRequiredCompletedEventHandler(object sender, SaveFileWithTransactionIgnoreIsRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileWithTransactionIgnoreIsRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileWithTransactionIgnoreIsRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string newStoreID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveFileWithTransactionCompletedEventHandler(object sender, SaveFileWithTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileWithTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileWithTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string newStoreID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveLastImportTemplateForUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyTypeTemplatesCompletedEventHandler(object sender, GetPropertyTypeTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypeTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypeTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypeTemplate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypeTemplate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSignatureProfilesCompletedEventHandler(object sender, GetSignatureProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignatureProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignatureProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSignatureProfile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSignatureProfile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllImportTemplatesCompletedEventHandler(object sender, GetAllImportTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllImportTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllImportTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SImportTemplate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SImportTemplate[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool importTemplateRequired {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetImportSettingsCompletedEventHandler(object sender, GetImportSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImportSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImportSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SImportSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SImportSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveProcessSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProcessSettingsCompletedEventHandler(object sender, GetProcessSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SProcessSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SProcessSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPossibleValuesLimitedCompletedEventHandler(object sender, GetPossibleValuesLimitedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPossibleValuesLimitedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPossibleValuesLimitedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyFiller[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyFiller[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetValueProposalsCompletedEventHandler(object sender, GetValueProposalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValueProposalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValueProposalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateProcessExtCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateDocumentPropertiesCompletedEventHandler(object sender, UpdateDocumentPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDocumentPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDocumentPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllRelationsCompletedEventHandler(object sender, GetAllRelationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRelationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRelationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RelationObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RelationObject[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllOperationsCompletedEventHandler(object sender, GetAllOperationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OperationObjectExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OperationObjectExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetConnectionPoolConfigurationCompletedEventHandler(object sender, GetConnectionPoolConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConnectionPoolConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConnectionPoolConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckInCompletedEventHandler(object sender, CheckInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckInWithPropertiesCompletedEventHandler(object sender, CheckInWithPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInWithPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInWithPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckInWithTransactionCompletedEventHandler(object sender, CheckInWithTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInWithTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInWithTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UndoCheckoutCompletedEventHandler(object sender, UndoCheckoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UndoCheckoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UndoCheckoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckOutCompletedEventHandler(object sender, CheckOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckOutOnlyCompletedEventHandler(object sender, CheckOutOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetWebServiceVersionCompletedEventHandler(object sender, GetWebServiceVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentPageCountCompletedEventHandler(object sender, GetDocumentPageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentPageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentPageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument documentInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileVersionConvertedCompletedEventHandler(object sender, GetDocumentFileVersionConvertedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileVersionConvertedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileVersionConvertedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument documentInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileVersionCompletedEventHandler(object sender, GetDocumentFileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument documentInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentFileVersionPageCountCompletedEventHandler(object sender, GetDocumentFileVersionPageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFileVersionPageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFileVersionPageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SDocument documentInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetWebDataProviderSettingsCompletedEventHandler(object sender, GetWebDataProviderSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDataProviderSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebDataProviderSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SWebDataProviderSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SWebDataProviderSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetVersionListCompletedEventHandler(object sender, GetVersionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentVersion[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentVersion[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserLogListCompletedEventHandler(object sender, GetUserLogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserLog[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RemoveUserLogEntriesCompletedEventHandler(object sender, RemoveUserLogEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUserLogEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUserLogEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int remainingEntries {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddDocumentLinksCompletedEventHandler(object sender, AddDocumentLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDocumentLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDocumentLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableImportDataCompletedEventHandler(object sender, UserDefinedTableImportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableImportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableImportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableExportDataCompletedEventHandler(object sender, UserDefinedTableExportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableExportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableExportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableGetRecordsCompletedEventHandler(object sender, UserDefinedTableGetRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableGetRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableGetRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableGetRowCountCompletedEventHandler(object sender, UserDefinedTableGetRowCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableGetRowCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableGetRowCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableInsertRecordCompletedEventHandler(object sender, UserDefinedTableInsertRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableInsertRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableInsertRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserDefinedTableDeleteRecordsCompletedEventHandler(object sender, UserDefinedTableDeleteRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDefinedTableDeleteRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDefinedTableDeleteRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteDocumentLinksCompletedEventHandler(object sender, DeleteDocumentLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDocumentLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDocumentLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllDocumentLinksCompletedEventHandler(object sender, GetAllDocumentLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDocumentLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDocumentLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllDocumentChildLinksCompletedEventHandler(object sender, GetAllDocumentChildLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDocumentChildLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDocumentChildLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateUrlIntegrationLinksForDocumentsCompletedEventHandler(object sender, CreateUrlIntegrationLinksForDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUrlIntegrationLinksForDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUrlIntegrationLinksForDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetTemporaryReleasedDossiersForExtensionCompletedEventHandler(object sender, GetTemporaryReleasedDossiersForExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemporaryReleasedDossiersForExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemporaryReleasedDossiersForExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SReleasedDossier[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SReleasedDossier[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetTemporaryReleasedDossierFilesCompletedEventHandler(object sender, GetTemporaryReleasedDossierFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemporaryReleasedDossierFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemporaryReleasedDossierFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SReleasedDossierFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SReleasedDossierFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAccessLogListCompletedEventHandler(object sender, GetAccessLogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccessLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccessLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentAccessLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentAccessLog[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetHistoryLogListCompletedEventHandler(object sender, GetHistoryLogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentHistoryLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentHistoryLog[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFullTextDiffCompletedEventHandler(object sender, GetFullTextDiffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFullTextDiffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFullTextDiffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string firstVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string secondVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRiaClientDockingLayoutCompletedEventHandler(object sender, GetRiaClientDockingLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRiaClientDockingLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRiaClientDockingLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteRiaClientDockingLayoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventHandler(object sender, GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRiaClientUrlIntegrationDockingLayoutTemplateNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRiaClientDockingLayoutCompletedEventHandler(object sender, SetRiaClientDockingLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRiaClientDockingLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRiaClientDockingLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRiaClientUserDockingLayoutTemplateCompletedEventHandler(object sender, SetRiaClientUserDockingLayoutTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRiaClientUserDockingLayoutTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRiaClientUserDockingLayoutTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventHandler(object sender, SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventHandler(object sender, GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRiaClientUrlIntegrationDockingLayoutTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRiaClientUserDockingLayoutTemplateCompletedEventHandler(object sender, GetRiaClientUserDockingLayoutTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRiaClientUserDockingLayoutTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRiaClientUserDockingLayoutTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void StartUploadCompletedEventHandler(object sender, StartUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UploadChunkCompletedEventHandler(object sender, UploadChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetTransactionCompletedEventHandler(object sender, GetTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public STransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((STransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetTransactionStateCompletedEventHandler(object sender, GetTransactionStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransactionState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EndUploadCompletedEventHandler(object sender, EndUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteTransactionCompletedEventHandler(object sender, DeleteTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CancelUploadCompletedEventHandler(object sender, CancelUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetMaxRequestLengthCompletedEventHandler(object sender, GetMaxRequestLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxRequestLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxRequestLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCurrentUploadOffsetCompletedEventHandler(object sender, GetCurrentUploadOffsetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentUploadOffsetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentUploadOffsetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DownloadChunkCompletedEventHandler(object sender, DownloadChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long nextOffset {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EndDownloadCompletedEventHandler(object sender, EndDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CancelDownloadCompletedEventHandler(object sender, CancelDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCurrentDownloadOffsetCompletedEventHandler(object sender, GetCurrentDownloadOffsetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentDownloadOffsetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentDownloadOffsetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonCompletedEventHandler(object sender, LogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonForApplicationCompletedEventHandler(object sender, LogonForApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonForApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonForApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateLogonTokenCompletedEventHandler(object sender, CreateLogonTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLogonTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLogonTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateADFSTokenCompletedEventHandler(object sender, CreateADFSTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateADFSTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateADFSTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateApplicationTokenCompletedEventHandler(object sender, CreateApplicationTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateApplicationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateApplicationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonForApplicationWithTokenCompletedEventHandler(object sender, LogonForApplicationWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonForApplicationWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonForApplicationWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonWithTokenCompletedEventHandler(object sender, LogonWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonWithApplicationTokenCompletedEventHandler(object sender, LogonWithApplicationTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonWithApplicationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonWithApplicationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonWithSingleSignOnCompletedEventHandler(object sender, LogonWithSingleSignOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonWithSingleSignOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonWithSingleSignOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonForApplicationWithSingleSignOnCompletedEventHandler(object sender, LogonForApplicationWithSingleSignOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonForApplicationWithSingleSignOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonForApplicationWithSingleSignOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertiesCompletedEventHandler(object sender, GetPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetVersionPropertiesCompletedEventHandler(object sender, GetVersionPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentActionsAllowedCompletedEventHandler(object sender, GetDocumentActionsAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentActionsAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentActionsAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SActionsAllowed Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SActionsAllowed)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProcessActionsAllowedCompletedEventHandler(object sender, GetProcessActionsAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessActionsAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessActionsAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFolderActionsAllowedCompletedEventHandler(object sender, GetFolderActionsAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderActionsAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderActionsAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetDocumentAnnotationsCompletedEventHandler(object sender, GetDocumentAnnotationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentAnnotationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentAnnotationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void MoveDocumentToInfoStoreCompletedEventHandler(object sender, MoveDocumentToInfoStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveDocumentToInfoStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveDocumentToInfoStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFilingCabinetPathsCompletedEventHandler(object sender, GetFilingCabinetPathsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilingCabinetPathsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilingCabinetPathsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetBlogListCompletedEventHandler(object sender, GetBlogListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SBlogEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SBlogEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddBlogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveDocumentAnnotationsCompletedEventHandler(object sender, SaveDocumentAnnotationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveDocumentAnnotationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDocumentAnnotationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GarbageCollectorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CurrentOpenConnectionsCompletedEventHandler(object sender, CurrentOpenConnectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CurrentOpenConnectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CurrentOpenConnectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CurrentOpenIdleConnectionCountCompletedEventHandler(object sender, CurrentOpenIdleConnectionCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CurrentOpenIdleConnectionCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CurrentOpenIdleConnectionCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CurrentStoredUsersCompletedEventHandler(object sender, CurrentStoredUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CurrentStoredUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CurrentStoredUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CurrentOpenActiveConnectionsCompletedEventHandler(object sender, CurrentOpenActiveConnectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CurrentOpenActiveConnectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CurrentOpenActiveConnectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CurrentPoolSizeCompletedEventHandler(object sender, CurrentPoolSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CurrentPoolSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CurrentPoolSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserCredentialLifetimeCompletedEventHandler(object sender, GetUserCredentialLifetimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCredentialLifetimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCredentialLifetimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserInfoExtCompletedEventHandler(object sender, GetUserInfoExtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoExtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoExtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserActionsAllowedCompletedEventHandler(object sender, GetUserActionsAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserActionsAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserActionsAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserActionsAllowed Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserActionsAllowed)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllRolesCompletedEventHandler(object sender, GetAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SRole[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SRole[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateRoleCompletedEventHandler(object sender, CreateRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CopyRoleCompletedEventHandler(object sender, CopyRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void EditUserCompletedEventHandler(object sender, EditUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetSearchMaskOptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllUsersWithRightsCompletedEventHandler(object sender, GetAllUsersWithRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersWithRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersWithRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserInfoExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserInfoExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllUserGroupsCompletedEventHandler(object sender, GetAllUserGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserGroup[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllUserGroupsWithRightsCompletedEventHandler(object sender, GetAllUserGroupsWithRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserGroupsWithRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserGroupsWithRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUserGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUserGroup[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsLoggedInCompletedEventHandler(object sender, IsLoggedInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsLoggedInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsLoggedInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyTypePluginListCompletedEventHandler(object sender, GetPropertyTypePluginListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypePluginListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypePluginListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypePlugin[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypePlugin[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreatePropertyTypeCompletedEventHandler(object sender, CreatePropertyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePropertyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePropertyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdatePropertyTypeCompletedEventHandler(object sender, UpdatePropertyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePropertyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePropertyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeletePropertyTypeCompletedEventHandler(object sender, DeletePropertyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePropertyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePropertyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyTypesCompletedEventHandler(object sender, GetPropertyTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypeExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypeExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyTypeCompletedEventHandler(object sender, GetPropertyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypeExt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypeExt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyTypeForIDCompletedEventHandler(object sender, GetPropertyTypeForIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypeForIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypeForIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypeExt Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypeExt)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdatePropertyCategoryCompletedEventHandler(object sender, UpdatePropertyCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePropertyCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePropertyCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeletePropertyCategoryCompletedEventHandler(object sender, DeletePropertyCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePropertyCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePropertyCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyCategoryCompletedEventHandler(object sender, GetPropertyCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyCategory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyCategory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPropertyCategoryListCompletedEventHandler(object sender, GetPropertyCategoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyCategoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyCategoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyCategory[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyCategory[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllPropertyTypeLanguagesCompletedEventHandler(object sender, GetAllPropertyTypeLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPropertyTypeLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPropertyTypeLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SPropertyTypeLanguages[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SPropertyTypeLanguages[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSchemaLanguagesCompletedEventHandler(object sender, GetSchemaLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SCultureString[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SCultureString[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCheckOutStateCompletedEventHandler(object sender, GetCheckOutStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckOutStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckOutStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckOutStateEnum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckOutStateEnum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckPropertiesCompletedEventHandler(object sender, CheckPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocumentPropertyChecked[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocumentPropertyChecked[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SearchJSONCompletedEventHandler(object sender, SearchJSONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchJSONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchJSONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SSearchResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SSearchResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SDocument[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SDocument[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string resumePoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool hasMore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAutoSuggestCompletedEventHandler(object sender, GetAutoSuggestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoSuggestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoSuggestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SearchCountCompletedEventHandler(object sender, SearchCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFolderDataCompletedEventHandler(object sender, GetFolderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SFolderData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SFolderData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TranslateFolderPathCompletedEventHandler(object sender, TranslateFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TranslateFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TranslateFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591